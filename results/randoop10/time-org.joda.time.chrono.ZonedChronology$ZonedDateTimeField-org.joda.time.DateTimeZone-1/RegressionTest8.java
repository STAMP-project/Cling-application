import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset(20);
        int int4 = timeZone0.getOffset((long) 38168509);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = timeZone0.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "jpn" + "'", str7, "jpn");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str8, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0117-02-11T09:45:43.162", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0117-02-11t09:45:43.162");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, (int) (short) -1);
        int int12 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear((int) (short) 10);
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) "41", chronology16);
        java.lang.String str20 = localDateTime19.toString();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2922789 + "'", int12 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0041-01-01T00:00:00.000" + "'", str20, "0041-01-01T00:00:00.000");
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        int int45 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        boolean boolean68 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withWeekOfWeekyear((int) (short) 10);
        int int71 = localDateTime70.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        int int77 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime79, dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.minusSeconds(697589);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(4);
        int int8 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusYears(49494192);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49682752 + "'", int8 == 49682752);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long5 = dateTimeZone1.convertLocalToUTC(0L, false, 0L);
        long long8 = dateTimeZone1.convertLocalToUTC((long) 292278993, true);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) (byte) 1);
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMillis(508);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime24.getValue(49540549);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49540549");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-187200000L) + "'", long5 == (-187200000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105078993L + "'", long8 == 105078993L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = localDateTime3.toString("2022", locale8);
        java.util.Locale locale12 = new java.util.Locale("2022");
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getScript();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale8, locale12, locale13, locale15, locale16, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.lang.String str36 = localDateTime29.toString("2022", locale34);
        java.util.Locale locale38 = new java.util.Locale("2022");
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale34, locale38, locale39, locale41, locale42, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap51);
        java.util.Collection<java.util.Locale> localeCollection53 = null;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection53);
        org.joda.time.tz.Provider provider55 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone57 = provider55.getZone("0122-02-11T10:36:10.344");
        java.util.Set<java.lang.String> strSet58 = provider55.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider55);
        java.util.Set<java.lang.String> strSet60 = provider55.getAvailableIDs();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet60);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertEquals(locale12.toString(), "2022");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode22.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertEquals(locale38.toString(), "2022");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode48.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale4.getDisplayVariant(locale5);
        java.lang.String str8 = locale0.getDisplayName(locale5);
        java.lang.String str9 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u6587" + "'", str8, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = property11.getAsText(locale15);
        int int17 = property7.getMaximumShortTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property7.withMinimumValue();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = property7.getAsShortText(locale19);
        java.lang.String str22 = locale0.getDisplayVariant(locale19);
        java.util.Set<java.lang.Character> charSet23 = locale19.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = charSet23.add((java.lang.Character) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime18.getFieldType((int) (short) 0);
        boolean boolean21 = localDateTime5.isSupported(dateTimeFieldType20);
        int int22 = localDateTime5.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minusMinutes(17);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 865 + "'", int22 == 865);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        boolean boolean12 = localDateTime8.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((int) (short) 0);
        int int26 = localDateTime8.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime8.withYearOfEra(56);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = dateTimeZone31.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long39 = dateTimeZone37.convertUTCToLocal(0L);
        long long41 = dateTimeZone31.getMillisKeepLocal(dateTimeZone37, 1L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withWeekyear((int) (byte) -1);
        boolean boolean54 = localDateTime50.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType((int) (short) 0);
        int int68 = localDateTime50.indexOf(dateTimeFieldType67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime50.millisOfDay();
        boolean boolean70 = dateTimeZone31.isLocalDateTimeGap(localDateTime50);
        boolean boolean71 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField73 = localDateTime50.getField(49614589);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49614589");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 187200000L + "'", long39 == 187200000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2021-12-31T21:00:00.000");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(195);
        java.lang.String str4 = localDateTime1.toString();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2021-12-31T21:00:00.000" + "'", str4, "2021-12-31T21:00:00.000");
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = localDateTime2.toString("2022", locale7);
        java.util.Locale.Builder builder10 = builder1.setLocale(locale7);
        java.util.Locale.Builder builder11 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder1.setExtension('#', "292278993-03-21T13:45:22.837");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        boolean boolean12 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear((int) (byte) -1);
        boolean boolean18 = localDateTime14.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        int int32 = localDateTime14.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime4.withField(dateTimeFieldType31, (int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime4.centuryOfEra();
        java.lang.String str36 = property35.getAsShortText();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes(35121875);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withSecondOfMinute((int) (short) 0);
        int int47 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withSecondOfMinute(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime39.withField(dateTimeFieldType51, 2381139);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2381139 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2021 + "'", int47 == 2021);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusSeconds(38168736);
        int int10 = localDateTime9.getEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis((int) (short) 0);
        int int15 = localDateTime12.size();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime21.getField(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.era();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = dateTimeZone27.isLocalDateTimeGap(localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withWeekyear((int) (byte) -1);
        boolean boolean44 = localDateTime40.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = localDateTime55.getFieldType((int) (short) 0);
        int int58 = localDateTime40.indexOf(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime30.withField(dateTimeFieldType57, (int) ' ');
        boolean boolean61 = localDateTime21.isSupported(dateTimeFieldType57);
        int int62 = localDateTime12.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime.Property property63 = localDateTime9.property(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime9.minusHours(298);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField67 = localDateTime9.getField(189);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 189");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(44);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(376);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(194);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long5 = dateTimeZone1.convertLocalToUTC(0L, false, 0L);
        long long8 = dateTimeZone1.convertLocalToUTC((long) 292278993, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long19 = dateTimeZone17.convertUTCToLocal(0L);
        long long21 = dateTimeZone11.getMillisKeepLocal(dateTimeZone17, 1L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        boolean boolean28 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withWeekOfWeekyear((int) (short) 10);
        int int31 = localDateTime27.getDayOfYear();
        boolean boolean32 = dateTimeZone17.isLocalDateTimeGap(localDateTime27);
        int int34 = dateTimeZone17.getOffset((long) (byte) 100);
        long long36 = dateTimeZone17.previousTransition(9223371988911842323L);
        long long39 = dateTimeZone17.convertLocalToUTC(38169615L, true);
        long long41 = dateTimeZone1.getMillisKeepLocal(dateTimeZone17, (long) 104400000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-187200000L) + "'", long5 == (-187200000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105078993L + "'", long8 == 105078993L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 187200000L + "'", long19 == 187200000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 44 + "'", int31 == 44);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 187200000 + "'", int34 == 187200000);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 9223371988911842323L + "'", long36 == 9223371988911842323L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-149030385L) + "'", long39 == (-149030385L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 104400000L + "'", long41 == 104400000L);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(187200000);
        java.lang.String str13 = localDateTime11.toString("+52:00");
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMinuteOfHour(47);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMillis(38340389);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.minusYears(405);
        org.joda.time.LocalDateTime.Property property20 = localDateTime11.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        long long15 = durationField10.getMillis(49435789);
        org.joda.time.DurationFieldType durationFieldType16 = durationField10.getType();
        long long19 = durationField10.add(0L, (int) (byte) -1);
        boolean boolean20 = durationField10.isSupported();
        long long23 = durationField10.subtract((long) 34, 49531038);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = durationField10.add(9223371988912005415L, 35114213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 327393206 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1560042820555128000L + "'", long15 == 1560042820555128000L);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-31536000000L) + "'", long19 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1563048588700799966L) + "'", long23 == (-1563048588700799966L));
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        boolean boolean7 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(349800000);
        boolean boolean19 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder16 = builder15.clear();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMaximumValue();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField33 = property30.getField();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = property30.getAsText(locale34);
        int int36 = property26.getMaximumShortTextLength(locale34);
        org.joda.time.LocalDateTime localDateTime37 = property26.withMinimumValue();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = property26.getAsShortText(locale38);
        java.lang.String str41 = locale19.getDisplayVariant(locale38);
        java.lang.String str44 = nameProvider17.getName(locale38, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", "dayOfYear");
        boolean boolean45 = locale38.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        java.lang.String str51 = property50.getAsString();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField53 = property50.getField();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = property50.getAsText(locale54);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.yearOfEra();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.weekyear();
        org.joda.time.LocalDateTime localDateTime61 = property60.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readableDuration62);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) (short) 1);
        boolean boolean70 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withWeekOfWeekyear((int) (short) 10);
        int int73 = localDateTime72.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = property74.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = localDateTime63.toDateTime(readableInstant77);
        long long80 = dateTime79.getMillis();
        long long81 = property50.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime79);
        java.util.Locale locale85 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str86 = property50.getAsShortText(locale85);
        java.lang.String str87 = locale46.getDisplayCountry(locale85);
        java.lang.String str88 = locale38.getDisplayCountry(locale46);
        java.util.Locale.Builder builder89 = builder15.setLocale(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder91 = builder15.addUnicodeLocaleAttribute("0122-02-11t09:45:13.400");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0122-02-11t09:45:13.400 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7" + "'", str40, "7");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 9223371988912083344L + "'", long80 == 9223371988912083344L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-292276970L) + "'", long81 == (-292276970L));
        org.junit.Assert.assertEquals(locale85.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekyear((int) (byte) -1);
        boolean boolean24 = localDateTime20.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime35.getFieldType((int) (short) 0);
        int int38 = localDateTime20.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime20.millisOfDay();
        boolean boolean40 = dateTimeZone1.isLocalDateTimeGap(localDateTime20);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime20.withPeriodAdded(readablePeriod41, 49582646);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury(83762701);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83762701 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withYearOfCentury(14);
        int int25 = localDateTime17.getCenturyOfEra();
        java.lang.String str26 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0122-02-13T13:48:03.379" + "'", str26, "0122-02-13T13:48:03.379");
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime16.getDayOfYear();
        boolean boolean21 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusWeeks(42);
        boolean boolean24 = charSet1.remove((java.lang.Object) localDateTime23);
        boolean boolean26 = charSet1.contains((java.lang.Object) 100);
        boolean boolean27 = charSet1.isEmpty();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream30 = charSet29.parallelStream();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getScript();
        java.util.Set<java.lang.Character> charSet33 = locale31.getExtensionKeys();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet33);
        java.util.Spliterator<java.lang.Character> charSpliterator35 = charSet29.spliterator();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream38 = charSet37.parallelStream();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getScript();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        boolean boolean42 = charSet37.containsAll((java.util.Collection<java.lang.Character>) charSet41);
        boolean boolean44 = charSet37.contains((java.lang.Object) 390);
        boolean boolean45 = charSet29.removeAll((java.util.Collection<java.lang.Character>) charSet37);
        boolean boolean46 = charSet37.isEmpty();
        boolean boolean47 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet37);
        boolean boolean48 = charSet37.isEmpty();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        int int58 = localDateTime57.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        boolean boolean65 = dateTimeZone61.isLocalDateTimeGap(localDateTime64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long69 = dateTimeZone67.convertUTCToLocal(0L);
        long long71 = dateTimeZone61.getMillisKeepLocal(dateTimeZone67, 1L);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) (short) 1);
        boolean boolean78 = localDateTime74.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withWeekOfWeekyear((int) (short) 10);
        int int81 = localDateTime77.getDayOfYear();
        boolean boolean82 = dateTimeZone67.isLocalDateTimeGap(localDateTime77);
        int int83 = property59.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime84 = property59.roundHalfEvenCopy();
        long long85 = property59.remainder();
        java.lang.String str86 = property59.getAsShortText();
        int int87 = property59.getMaximumValue();
        boolean boolean88 = charSet37.contains((java.lang.Object) property59);
        java.lang.String str89 = property59.getName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 44 + "'", int20 == 44);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charStream30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charSpliterator35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(charStream38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 187200000L + "'", long69 == 187200000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 44 + "'", int81 == 44);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 395283420L + "'", long85 == 395283420L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "10" + "'", str86, "10");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 53 + "'", int87 == 53);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "weekOfWeekyear" + "'", str89, "weekOfWeekyear");
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayVariant(locale11);
        java.lang.String str14 = locale10.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale10.getDisplayVariant(locale18);
        java.lang.String str20 = locale9.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder21 = builder8.setLocale(locale9);
        boolean boolean22 = localDateTime5.equals((java.lang.Object) builder8);
        java.util.Locale.Builder builder23 = builder8.clear();
        java.util.Locale locale24 = builder8.build();
        java.util.Locale.Builder builder26 = builder8.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder8.setScript("0122-02-11T09:45:13.400");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 0122-02-11T09:45:13.400 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours(349800000);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property12.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime22.getDayOfYear();
        boolean boolean27 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusWeeks(42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime29.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusHours(38158052);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withWeekOfWeekyear((int) (short) 10);
        int[] intArray44 = localDateTime40.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime40.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime40);
        boolean boolean47 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime7.plusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime7.plus(readablePeriod50);
        org.joda.time.DateTime dateTime52 = localDateTime51.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 44 + "'", int26 == 44);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[122, 2, 13, 49683483]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime31.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = localDateTime22.toDateTime(readableInstant36);
        boolean boolean39 = dateTime14.isBefore(readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime14.getZone();
        java.lang.String str41 = dateTimeZone40.getID();
        long long45 = dateTimeZone40.convertLocalToUTC((long) 49497992, true, 9223371988912002261L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+52:00" + "'", str41, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-137702008L) + "'", long45 == (-137702008L));
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        int int10 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.lang.String str15 = property14.getAsString();
        int int16 = property14.getMinimumValueOverall();
        java.lang.String str17 = property14.toString();
        org.joda.time.LocalDateTime localDateTime18 = property14.getLocalDateTime();
        java.lang.String str19 = property14.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property14.getFieldType();
        boolean boolean21 = localDateTime5.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusWeeks(717);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.year();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(38156803);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withCenturyOfEra(56);
        java.util.Date date13 = localDateTime12.toDate();
        int int14 = localDateTime12.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMonths((-738861));
        int int17 = localDateTime12.getMonthOfYear();
        int int18 = localDateTime12.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 14 13:48:04 GMT 5622");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 56 + "'", int18 == 56);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long15 = durationField10.getValueAsLong(1560042820555128000L);
        boolean boolean16 = durationField10.isPrecise();
        long long17 = durationField10.getUnitMillis();
        long long20 = durationField10.subtract(9223371988911854536L, 0);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        int int26 = property24.getMinimumValueOverall();
        java.lang.String str27 = property24.toString();
        org.joda.time.LocalDateTime localDateTime28 = property24.getLocalDateTime();
        java.lang.String str29 = property24.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DurationField durationField31 = property24.getDurationField();
        long long34 = durationField31.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        java.lang.String str39 = property38.getAsString();
        int int40 = property38.getMinimumValueOverall();
        java.lang.String str41 = property38.toString();
        org.joda.time.LocalDateTime localDateTime42 = property38.getLocalDateTime();
        java.lang.String str43 = property38.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property38.getFieldType();
        org.joda.time.DurationField durationField45 = property38.getDurationField();
        java.lang.String str46 = durationField45.toString();
        org.joda.time.DurationFieldType durationFieldType47 = durationField45.getType();
        int int48 = durationField31.compareTo(durationField45);
        int int51 = durationField45.getDifference((-92234312150400000L), (long) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        java.lang.String str56 = property55.getAsString();
        int int57 = property55.getMinimumValueOverall();
        java.lang.String str58 = property55.toString();
        org.joda.time.LocalDateTime localDateTime59 = property55.getLocalDateTime();
        java.lang.String str60 = property55.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property55.getFieldType();
        org.joda.time.DurationField durationField62 = property55.getDurationField();
        long long65 = durationField62.getMillis((long) (byte) -1, 9223371988911839815L);
        java.lang.String str66 = durationField62.toString();
        int int69 = durationField62.getValue((long) ' ', 94694400000L);
        int int70 = durationField45.compareTo(durationField62);
        int int71 = durationField10.compareTo(durationField62);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) (short) 1);
        boolean boolean78 = dateTimeZone74.isLocalDateTimeGap(localDateTime77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long82 = dateTimeZone80.convertUTCToLocal(0L);
        long long84 = dateTimeZone74.getMillisKeepLocal(dateTimeZone80, 1L);
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withCenturyOfEra((int) (short) 1);
        boolean boolean88 = dateTimeZone80.isLocalDateTimeGap(localDateTime85);
        java.lang.String str90 = dateTimeZone80.getShortName((long) 511);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) 187200000L, dateTimeZone80);
        java.util.TimeZone timeZone92 = dateTimeZone80.toTimeZone();
        long long96 = dateTimeZone80.convertLocalToUTC(589L, false, 9223371988911874639L);
        java.lang.String str97 = dateTimeZone80.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = new org.joda.time.LocalDateTime((java.lang.Object) int71, dateTimeZone80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 49435789L + "'", long15 == 49435789L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 31556952000L + "'", long17 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223371988911854536L + "'", long20 == 9223371988911854536L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[yearOfEra]" + "'", str27, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-31622400000L) + "'", long34 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[yearOfEra]" + "'", str41, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DurationField[years]" + "'", str46, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2922789) + "'", int51 == (-2922789));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Property[yearOfEra]" + "'", str58, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-31622400000L) + "'", long65 == (-31622400000L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DurationField[years]" + "'", str66, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 187200000L + "'", long82 == 187200000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+52:00" + "'", str90, "+52:00");
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-187199411L) + "'", long96 == (-187199411L));
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+52:00" + "'", str97, "+52:00");
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.setScript("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        boolean boolean7 = charSet1.isEmpty();
        java.lang.Object[] objArray8 = charSet1.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray14 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray9, dateTimeFieldArray10, dateTimeFieldArray11, dateTimeFieldArray12, dateTimeFieldArray13 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray15 = charSet1.toArray(dateTimeFieldArray14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator18 = charSet17.spliterator();
        boolean boolean19 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet17);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property23.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        boolean boolean27 = property26.isLeap();
        java.lang.String str28 = property26.toString();
        boolean boolean29 = charSet1.equals((java.lang.Object) property26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(426);
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) 'a');
        java.util.Locale locale37 = new java.util.Locale("0122-02-11T09:43:49.336", "2022");
        java.lang.String str38 = locale37.toLanguageTag();
        java.lang.String str39 = dateTimeZone31.getShortName(283996800000L, locale37);
        int int40 = property26.getMaximumTextLength(locale37);
        int int41 = property26.getMinimumValue();
        int int42 = property26.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(charSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[minuteOfHour]" + "'", str28, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(locale37.toString(), "0122-02-11t09:43:49.336_2022");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+426:00" + "'", str39, "+426:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale1.getDisplayVariant(locale9);
        java.lang.String str11 = locale0.getDisplayLanguage(locale9);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        java.util.Locale locale38 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str39 = property3.getAsShortText(locale38);
        org.joda.time.DateTimeField dateTimeField40 = property3.getField();
        org.joda.time.LocalDateTime localDateTime41 = property3.roundHalfFloorCopy();
        java.lang.Object obj42 = null;
        boolean boolean43 = property3.equals(obj42);
        org.joda.time.LocalDateTime localDateTime44 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        boolean boolean46 = property45.isLeap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912083722L + "'", long33 == 9223371988912083722L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertEquals(locale38.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        java.util.Locale locale1 = new java.util.Locale("0122-02-11T10:36:09.548");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "0122-02-11t10:36:09.548");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0122-02-11t10:36:09.548" + "'", str2, "0122-02-11t10:36:09.548");
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        boolean boolean7 = dateTimeZone3.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long11 = dateTimeZone9.convertUTCToLocal(0L);
        long long13 = dateTimeZone3.getMillisKeepLocal(dateTimeZone9, 1L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int int23 = localDateTime19.getDayOfYear();
        boolean boolean24 = dateTimeZone9.isLocalDateTimeGap(localDateTime19);
        int int26 = dateTimeZone9.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTime dateTime28 = localDateTime1.toDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime1.plus(readableDuration29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime30.getFields();
        int int32 = localDateTime30.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withPeriodAdded(readablePeriod33, 312);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusWeeks(32420964);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDateTime37.getValue(165);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 165");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 187200000L + "'", long11 == 187200000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 44 + "'", int23 == 44);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setRegion("2022-02-12T10:37:44.975");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-12T10:37:44.975 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(123, 49472846, 46836119, 49632911, 49607271, 49510233, 242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49632911 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        boolean boolean8 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekOfWeekyear((int) (short) 10);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = dateTimeZone14.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long22 = dateTimeZone20.convertUTCToLocal(0L);
        long long24 = dateTimeZone14.getMillisKeepLocal(dateTimeZone20, 1L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        int int34 = localDateTime30.getDayOfYear();
        boolean boolean35 = dateTimeZone20.isLocalDateTimeGap(localDateTime30);
        int int36 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime37 = property12.withMaximumValue();
        boolean boolean38 = dateTimeZone1.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone1.isLocalDateTimeGap(localDateTime40);
        long long44 = dateTimeZone1.adjustOffset((long) 656, false);
        java.util.TimeZone timeZone45 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = dateTimeZone47.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long55 = dateTimeZone53.convertUTCToLocal(0L);
        long long57 = dateTimeZone47.getMillisKeepLocal(dateTimeZone53, 1L);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = dateTimeZone53.isLocalDateTimeGap(localDateTime58);
        java.util.TimeZone timeZone62 = dateTimeZone53.toTimeZone();
        boolean boolean63 = timeZone45.hasSameRules(timeZone62);
        timeZone62.setID("1970");
        int int67 = timeZone62.getOffset(999885168L);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = timeZone62.getOffset(56, 55, 576, 97, 451, 659);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200000L + "'", long22 == 187200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 44 + "'", int34 == 44);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 656L + "'", long44 == 656L);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 187200000L + "'", long55 == 187200000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        int int13 = dateTimeZone1.getOffsetFromLocal(0L);
        java.lang.String str15 = dateTimeZone1.getName((long) 51);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(426);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) 'a');
        int int21 = dateTimeZone17.getStandardOffset(9223371988911866199L);
        java.lang.String str23 = dateTimeZone17.getNameKey((long) 49475936);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone17, (long) 65);
        int int27 = dateTimeZone1.getOffset(9223371988911894402L);
        java.lang.String str29 = dateTimeZone1.getNameKey(9223371988911925064L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str31 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1533600000 + "'", int21 == 1533600000);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1346399935L) + "'", long25 == (-1346399935L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 187200000 + "'", int27 == 187200000);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+52:00" + "'", str31, "+52:00");
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = dateTimeZone20.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long28 = dateTimeZone26.convertUTCToLocal(0L);
        long long30 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, 1L);
        org.joda.time.DateTime dateTime31 = localDateTime13.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property32 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYear((int) (short) 10);
        org.joda.time.Chronology chronology36 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withMillisOfSecond(14);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        int int49 = localDateTime48.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property50.getFieldType();
        int int54 = localDateTime37.get(dateTimeFieldType53);
        int int55 = localDateTime13.indexOf(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property56 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime57 = property56.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        boolean boolean7 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear((int) (byte) -1);
        int[] intArray12 = localDateTime9.getValues();
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 49515154, chronology13);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[122, 3, 6, 49684152]");
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        int[] intArray11 = localDateTime8.getValues();
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withWeekOfWeekyear((int) (short) 10);
        int int30 = localDateTime29.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = localDateTime20.toDateTime(readableInstant34);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        java.lang.String str41 = property40.getAsString();
        int int42 = property40.getMinimumValueOverall();
        org.joda.time.Interval interval43 = property40.toInterval();
        boolean boolean44 = localDateTime20.equals((java.lang.Object) property40);
        java.lang.String str45 = property40.getAsString();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        boolean boolean52 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear((int) (byte) -1);
        int[] intArray57 = localDateTime54.getValues();
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        int int60 = localDateTime59.size();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.year();
        int int62 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        org.joda.time.LocalDateTime.Property property67 = localDateTime63.weekyear();
        org.joda.time.LocalDateTime localDateTime68 = property67.withMaximumValue();
        int int69 = localDateTime68.getCenturyOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = localDateTime68.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withEra((int) (short) 0);
        int int73 = localDateTime59.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        boolean boolean74 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[122, 3, 6, 49684164]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[122, 3, 6, 49684164]");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2922789 + "'", int69 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(38247199, 46811422, 49580124, 0, 49589667, 46854483);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49589667 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        int int8 = localDateTime5.getWeekOfWeekyear();
        int int9 = localDateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode12.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        boolean boolean14 = property4.equals((java.lang.Object) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMinutes(12);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withDurationAdded(readableDuration19, (int) (short) 0);
        boolean boolean22 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusDays((int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.hourOfDay();
        int int26 = localDateTime16.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMaximumValue();
        boolean boolean12 = property3.equals((java.lang.Object) property9);
        org.joda.time.LocalDateTime localDateTime14 = property9.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = property9.addToCopy((long) 20);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = dateTimeZone29.isLocalDateTimeGap(localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long37 = dateTimeZone35.convertUTCToLocal(0L);
        long long39 = dateTimeZone29.getMillisKeepLocal(dateTimeZone35, 1L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        int int49 = localDateTime45.getDayOfYear();
        boolean boolean50 = dateTimeZone35.isLocalDateTimeGap(localDateTime45);
        int int51 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime52 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime53 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property27.getFieldType();
        org.joda.time.LocalDateTime.Property property55 = localDateTime16.property(dateTimeFieldType54);
        java.lang.String str56 = localDateTime16.toString();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime16.withMillisOfSecond(458);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 187200000L + "'", long37 == 187200000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 44 + "'", int49 == 44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2042-02-13T13:48:04.354" + "'", str56, "2042-02-13T13:48:04.354");
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder6 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setLanguage("0060-05-13T13:47:38.037+52:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 0060-05-13T13:47:38.037+52:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        java.lang.String str9 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMillis(2);
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.minusHours(736);
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime5.getValue(35114108);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35114108");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0122-02-13T13:48:04.400" + "'", str9, "0122-02-13T13:48:04.400");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(38154052L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        boolean boolean30 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withWeekOfWeekyear((int) (short) 10);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = localDateTime23.toDateTime(readableInstant37);
        long long40 = dateTime39.getMillis();
        long long41 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Interval interval42 = property10.toInterval();
        int int43 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int int47 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = property6.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime50 = property10.addWrapFieldToCopy((-3600000));
        java.util.Locale locale55 = new java.util.Locale("292278993-02-10T13:44:53.802", "de", "0122-02-13T13:45:15.046");
        java.util.Locale locale58 = new java.util.Locale("0122-02-11T10:38:17.733", "0122-03-06T13:44:56.750+52:00");
        java.lang.String str59 = locale58.getScript();
        java.lang.String str60 = locale55.getDisplayCountry(locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = property10.setCopy("0122-02-13T13:45:29.893", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0122-02-13T13:45:29.893\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223371988912084409L + "'", long40 == 9223371988912084409L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-292276970L) + "'", long41 == (-292276970L));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals(locale55.toString(), "292278993-02-10t13:44:53.802_DE_0122-02-13T13:45:15.046");
        org.junit.Assert.assertEquals(locale58.toString(), "0122-02-11t10:38:17.733_0122-03-06T13:44:56.750+52:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Germany" + "'", str60, "Germany");
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 44);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 10, dateTimeZone3);
        int int5 = localDateTime4.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor3 = charSet2.iterator();
        java.util.stream.Stream<java.lang.Character> charStream4 = charSet2.stream();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getScript();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor8 = charSet7.iterator();
        java.util.stream.Stream<java.lang.Character> charStream9 = charSet7.stream();
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet7.stream();
        java.util.stream.Stream<java.lang.Character> charStream11 = charSet7.stream();
        boolean boolean12 = charSet2.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = charSet7.add((java.lang.Character) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charItor3);
        org.junit.Assert.assertNotNull(charStream4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charItor8);
        org.junit.Assert.assertNotNull(charStream9);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(charStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "292278993-02-13T13:44:13.431", "2022-01-01T00:00:00.000");
        java.util.Locale locale7 = new java.util.Locale("0122-03-04T09:44:03.055Z");
        java.lang.String str10 = nameProvider0.getShortName(locale7, "0122-02-13T13:44:36.449+52:00", "0122-03-06T13:44:27.517+52:00");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.lang.String str16 = locale12.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = locale17.getCountry();
        java.util.Locale locale20 = locale17.stripExtensions();
        java.lang.String str21 = locale12.getDisplayVariant(locale20);
        java.lang.String str22 = locale12.getVariant();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = localDateTime23.toString("2022", locale28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale28.getDisplayCountry(locale31);
        java.util.Set<java.lang.String> strSet33 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale12.getDisplayName(locale28);
        java.lang.String str35 = locale28.getDisplayName();
        java.lang.String str38 = nameProvider0.getName(locale28, "0117-02-11T10:36:40.046", "\u6cd5\u56fd");
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.yearOfEra();
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime localDateTime44 = property43.withMaximumValue();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.LocalDateTime localDateTime47 = property43.addWrapFieldToCopy((int) (short) 10);
        int int48 = property43.get();
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.yearOfEra();
        java.lang.String str55 = property54.getAsString();
        org.joda.time.LocalDateTime localDateTime56 = property54.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = property54.getAsText(locale58);
        org.joda.time.LocalDateTime localDateTime60 = property54.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusHours(44);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider64 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider64);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider64);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.yearOfEra();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfFloorCopy();
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = property70.getAsText(locale72);
        java.lang.String str76 = nameProvider64.getName(locale72, "+100:00", "0122-03-06T13:44:23.740+52:00");
        java.lang.String str77 = property63.getAsShortText(locale72);
        java.util.Locale.setDefault(category49, locale72);
        java.lang.String str79 = property43.getAsText(locale72);
        java.lang.String str82 = nameProvider0.getShortName(locale72, "2667-02-13T13:46:48.497", "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        java.lang.String str83 = locale72.getVariant();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale7.toString(), "0122-03-04t09:44:03.055z");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u6587" + "'", str35, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.FORMAT + "'", category49.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(nameProvider64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022" + "'", str77, "2022");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("0122-02-11T10:36:09.548");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes(7);
        int int4 = localDateTime3.size();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("0122-02-11T10:36:09.548");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundCeilingCopy();
        org.joda.time.DurationField durationField4 = property2.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNull(durationField4);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        long long15 = durationField10.getMillis(49435789);
        int int18 = durationField10.getDifference(0L, (long) 916);
        long long21 = durationField10.subtract(9223371988911945223L, (long) 49466800);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1560042820555128000L + "'", long15 == 1560042820555128000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 7662350555718345223L + "'", long21 == 7662350555718345223L);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        int int8 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusMinutes(100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.lang.String str15 = property14.getAsString();
        int int16 = property14.getMinimumValueOverall();
        java.lang.String str17 = property14.toString();
        org.joda.time.LocalDateTime localDateTime18 = property14.getLocalDateTime();
        java.lang.String str19 = property14.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property14.getFieldType();
        org.joda.time.DurationField durationField21 = property14.getDurationField();
        java.lang.String str22 = durationField21.toString();
        org.joda.time.DurationFieldType durationFieldType23 = durationField21.getType();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime0.withFieldAdded(durationFieldType23, 13);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        java.lang.String str31 = localDateTime26.toString("+00:00:00.100");
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime26);
        int int33 = localDateTime32.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DurationField[years]" + "'", str22, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.100" + "'", str31, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 38404548 + "'", int33 == 38404548);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("0122-03-06T13:46:06.505+52:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0122-03-06T13:46:06.505+52:00 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("GMT");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder15.setVariant("2022-02-12T19:31:19.592");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-12T19:31:19.592 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(56, 410, 511, 49489125, 731503, 49621711, 49598083);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49489125 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((int) (short) 10, 38334189, 352, 49516799, 923);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49516799 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet9.parallelStream();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream13 = charSet12.parallelStream();
        boolean boolean14 = charSet9.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        boolean boolean15 = charSet9.isEmpty();
        boolean boolean16 = languageRange1.equals((java.lang.Object) boolean15);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        int int14 = localDateTime13.getCenturyOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime13.getFieldTypes();
        int int16 = localDateTime13.getYear();
        boolean boolean17 = dateTimeZone6.equals((java.lang.Object) localDateTime13);
        long long19 = dateTimeZone6.nextTransition((-3849983999997L));
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (long) 41);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = dateTimeZone23.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long31 = dateTimeZone29.convertUTCToLocal(0L);
        long long33 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, 1L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = dateTimeZone29.isLocalDateTimeGap(localDateTime34);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMaximumValue();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.LocalDateTime localDateTime46 = property42.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readableDuration53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withWeekOfWeekyear((int) (short) 10);
        int int64 = localDateTime63.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = localDateTime54.toDateTime(readableInstant68);
        long long71 = dateTime70.getMillis();
        int int72 = property42.compareTo((org.joda.time.ReadableInstant) dateTime70);
        int int73 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.ReadableInstant readableInstant74 = null;
        boolean boolean75 = dateTime70.isBefore(readableInstant74);
        int int76 = dateTimeZone6.getOffset(readableInstant74);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3849983999997L) + "'", long19 == (-3849983999997L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3119927L) + "'", long21 == (-3119927L));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 187200000L + "'", long31 == 187200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 9223371988912084704L + "'", long71 == 9223371988912084704L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 187200000 + "'", int73 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3120000 + "'", int76 == 3120000);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays(49529275);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime36 = property10.setCopy(24);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = property41.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readableDuration49);
        boolean boolean51 = property41.equals((java.lang.Object) localDateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minus(readablePeriod52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMinutes(12);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.weekyear();
        int int57 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = property10.roundHalfEvenCopy();
        int int59 = property10.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime61 = property10.addToCopy(38156753);
        int int62 = localDateTime61.getEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusYears(35170854);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusHours(629);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        java.lang.String str8 = localDateTime7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusDays(49512725);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371988915204843 + 4277899440000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "292278993-02-08T10:40:04.843" + "'", str8, "292278993-02-08T10:40:04.843");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusDays(349800000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime8.getFieldType(2381139);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2381139");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        int int13 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime19.getField(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.era();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = dateTimeZone25.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withWeekyear((int) (byte) -1);
        boolean boolean42 = localDateTime38.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime53.getFieldType((int) (short) 0);
        int int56 = localDateTime38.indexOf(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime28.withField(dateTimeFieldType55, (int) ' ');
        boolean boolean59 = localDateTime19.isSupported(dateTimeFieldType55);
        boolean boolean60 = localDateTime12.isSupported(dateTimeFieldType55);
        int int61 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime2.withMillisOfDay(0);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plus(readableDuration64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.minuteOfHour();
        org.joda.time.DurationField durationField67 = property66.getDurationField();
        long long70 = durationField67.subtract(9223371988912005415L, 0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 9223371988912005415L + "'", long70 == 9223371988912005415L);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(29);
        int int3 = dateTimeZone1.getStandardOffset((long) 21);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 104400000 + "'", int3 == 104400000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+29:00" + "'", str5, "+29:00");
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(readableInstant21);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        java.lang.String str28 = property27.getAsString();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.Interval interval30 = property27.toInterval();
        boolean boolean31 = localDateTime7.equals((java.lang.Object) property27);
        org.joda.time.Interval interval32 = property27.toInterval();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale35.getDisplayVariant(locale36);
        java.lang.String str39 = locale35.getDisplayCountry();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.String str42 = locale40.getCountry();
        java.util.Locale locale43 = locale40.stripExtensions();
        java.lang.String str44 = locale35.getDisplayVariant(locale43);
        java.lang.String str45 = locale34.getDisplayLanguage(locale43);
        java.util.Locale.Builder builder46 = builder33.setLocale(locale34);
        java.util.Locale locale47 = builder33.build();
        java.util.Locale.Builder builder49 = builder33.setLanguage("");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.yearOfEra();
        java.lang.String str55 = property54.getAsString();
        org.joda.time.LocalDateTime localDateTime56 = property54.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = property54.getAsText(locale58);
        java.lang.String str60 = locale58.getISO3Country();
        java.lang.String str61 = locale50.getDisplayScript(locale58);
        java.util.Locale.Builder builder62 = builder49.setLocale(locale58);
        java.util.Locale.Builder builder63 = builder49.clear();
        java.util.Locale locale64 = builder49.build();
        int int65 = property27.getMaximumTextLength(locale64);
        org.joda.time.LocalDateTime localDateTime66 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587" + "'", str45, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getScript();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = builder21.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder21.setLanguageTag("\u91d1\u66dc\u65e5");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear((int) (byte) -1);
        boolean boolean21 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMaximumValue();
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.lang.String str38 = localDateTime31.toString("2022", locale36);
        int int39 = property30.getMaximumShortTextLength(locale36);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.String str42 = locale40.getCountry();
        java.lang.String str43 = property30.getAsText(locale40);
        org.joda.time.Interval interval44 = property30.toInterval();
        boolean boolean45 = localDateTime20.equals((java.lang.Object) property30);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime20.minusSeconds(49474464);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2922789 + "'", int29 == 2922789);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u661f\u671f\u4e94" + "'", str43, "\u661f\u671f\u4e94");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(419, 194, 0, 0, 8952669, 187200122, 1899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8952669 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.LocalDateTime localDateTime6 = property3.setCopy(4);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = property3.getAsShortText(locale7);
        java.lang.String str11 = property3.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3" + "'", str4, "3");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str9, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3" + "'", str10, "3");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3" + "'", str11, "3");
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        long long19 = durationField16.add((long) 49500521, 23);
        long long21 = durationField16.getMillis(0);
        org.joda.time.DurationFieldType durationFieldType22 = durationField16.getType();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 49500544L + "'", long19 == 49500544L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType22);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withWeekOfWeekyear((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+Z6:00");
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long10 = dateTimeZone8.convertUTCToLocal(0L);
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, 1L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        java.lang.String str18 = dateTimeZone8.getShortName((long) 511);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        long long22 = dateTimeZone8.convertLocalToUTC(9223371988911848994L, false);
        java.lang.String str24 = dateTimeZone8.getNameKey(9131137676588659509L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 829, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsString();
        int int32 = property30.getMinimumValueOverall();
        java.lang.String str33 = property30.toString();
        org.joda.time.LocalDateTime localDateTime34 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = property30.withMaximumValue();
        int int36 = localDateTime35.getCenturyOfEra();
        int int37 = localDateTime35.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        boolean boolean45 = dateTimeZone41.isLocalDateTimeGap(localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long49 = dateTimeZone47.convertUTCToLocal(0L);
        long long51 = dateTimeZone41.getMillisKeepLocal(dateTimeZone47, 1L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        boolean boolean58 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withWeekOfWeekyear((int) (short) 10);
        int int61 = localDateTime57.getDayOfYear();
        boolean boolean62 = dateTimeZone47.isLocalDateTimeGap(localDateTime57);
        int int64 = dateTimeZone47.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.DateTime dateTime66 = localDateTime39.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime67 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str68 = dateTime67.toString();
        int int69 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223371988724648994L + "'", long22 == 9223371988724648994L);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[yearOfEra]" + "'", str33, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2922789 + "'", int36 == 2922789);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 187200000L + "'", long49 == 187200000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 44 + "'", int61 == 44);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 187200000 + "'", int64 == 187200000);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "292278993-02-13T13:48:05.311+52:00" + "'", str68, "292278993-02-13T13:48:05.311+52:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 187200000 + "'", int69 == 187200000);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.setCopy(49457693);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property4.getAsText(locale8);
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale0.getDisplayScript(locale8);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2022");
        java.lang.String str14 = locale8.getDisplayCountry(locale13);
        java.lang.String str15 = locale13.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setID("0122-02-11T10:35:57.632");
        int int4 = timeZone0.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId5 = timeZone0.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 0122-02-11T10:35:57.632");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "292278993-02-13T13:44:13.431", "2022-01-01T00:00:00.000");
        java.lang.String str6 = locale1.toString();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.getAsText();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = property3.getAsShortText(locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("0122-02-11T09:46:11.114");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0122-02-11t09:46:11.114");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35035070);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 426, true, 94694400000L);
        boolean boolean7 = dateTimeZone1.isStandardOffset(9223371988911993292L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-35034644L) + "'", long5 == (-35034644L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(199, 38350028, 38333273, 49540742, 38223350, 49494192);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49540742 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        int int8 = localDateTime0.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusMillis(7);
        org.joda.time.DateTime dateTime11 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) (short) 100);
        int int24 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYear((int) (short) 100);
        int int36 = localDateTime33.getYearOfCentury();
        boolean boolean37 = localDateTime21.equals((java.lang.Object) localDateTime33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        int int49 = localDateTime48.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withWeekOfWeekyear((int) (short) 10);
        int int64 = localDateTime63.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        int int70 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withCenturyOfEra((int) (short) 1);
        boolean boolean77 = localDateTime73.isBefore((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDateTime81.getFieldType((int) (short) 0);
        boolean boolean84 = dateTime54.isSupported(dateTimeFieldType83);
        org.joda.time.DateTime dateTime85 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        java.lang.String str86 = dateTime54.toString();
        java.lang.String str87 = dateTime54.toString();
        org.joda.time.DateTime dateTime88 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        java.lang.String str89 = localDateTime0.toString();
        int[] intArray90 = localDateTime0.getValues();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0122-03-06T13:48:05.640+52:00" + "'", str86, "0122-03-06T13:48:05.640+52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0122-03-06T13:48:05.640+52:00" + "'", str87, "0122-03-06T13:48:05.640+52:00");
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-13T13:48:05.640" + "'", str89, "2022-02-13T13:48:05.640");
        org.junit.Assert.assertNotNull(intArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 2, 13, 49685640]");
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = localDateTime4.toString("2022", locale9);
        java.util.Locale locale13 = new java.util.Locale("2022");
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale9, locale13, locale14, locale16, locale17, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.lang.String str38 = localDateTime31.toString("2022", locale36);
        java.util.Locale locale40 = new java.util.Locale("2022");
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getScript();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale36, locale40, locale41, locale43, locale44, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList48, filteringMode50);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale54 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertEquals(locale13.toString(), "2022");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode23.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertEquals(locale40.toString(), "2022");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode50.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor3 = charSet2.iterator();
        java.util.stream.Stream<java.lang.Character> charStream4 = charSet2.stream();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet2.stream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream8 = charSet7.parallelStream();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getScript();
        java.util.Set<java.lang.Character> charSet11 = locale9.getExtensionKeys();
        boolean boolean12 = charSet7.containsAll((java.util.Collection<java.lang.Character>) charSet11);
        boolean boolean14 = charSet7.contains((java.lang.Object) 390);
        boolean boolean15 = charSet7.isEmpty();
        boolean boolean16 = charSet7.isEmpty();
        boolean boolean17 = charSet2.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream20 = charSet19.parallelStream();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream23 = charSet22.parallelStream();
        boolean boolean24 = charSet19.containsAll((java.util.Collection<java.lang.Character>) charSet22);
        boolean boolean25 = charSet2.addAll((java.util.Collection<java.lang.Character>) charSet22);
        java.util.Iterator<java.lang.Character> charItor26 = charSet22.iterator();
        boolean boolean27 = charSet22.isEmpty();
        java.util.stream.Stream<java.lang.Character> charStream28 = charSet22.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charItor3);
        org.junit.Assert.assertNotNull(charStream4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(charStream20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(charStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charStream28);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getMillisOfSecond();
        int int14 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = dateTimeZone18.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear((int) (byte) -1);
        boolean boolean35 = localDateTime31.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        int int49 = localDateTime31.indexOf(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.withField(dateTimeFieldType48, (int) ' ');
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property53 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime55 = property53.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 786 + "'", int13 == 786);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49685786 + "'", int14 == 49685786);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        int int4 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDayOfWeek(4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 831 + "'", int4 == 831);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        boolean boolean24 = property23.isLeap();
        org.joda.time.LocalDateTime localDateTime25 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property30.withMaximumValue();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusDays(349800000);
        boolean boolean36 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.plusSeconds(38170779);
        boolean boolean40 = dateTimeZone7.isLocalDateTimeGap(localDateTime26);
        long long42 = dateTimeZone7.nextTransition((long) 49512725);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        java.lang.String str47 = property46.getAsString();
        org.joda.time.LocalDateTime localDateTime48 = property46.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = property46.getAsText(locale50);
        org.joda.time.LocalDateTime localDateTime52 = property46.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusHours(44);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusMillis(3);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime.Property property58 = localDateTime52.weekyear();
        boolean boolean59 = dateTimeZone7.isLocalDateTimeGap(localDateTime52);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.withDurationAdded(readableDuration60, 38229291);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 49512725L + "'", long42 == 49512725L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(733, 934);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 934");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("centuryOfEra");
        int int3 = timeZone1.getOffset((-58311843300234L));
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.lang.String str8 = nameProvider0.getShortName(locale2, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        java.lang.String str17 = property16.getAsString();
        org.joda.time.LocalDateTime localDateTime18 = property16.withMaximumValue();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = property23.getAsText(locale27);
        int int29 = property19.getMaximumShortTextLength(locale27);
        org.joda.time.LocalDateTime localDateTime30 = property19.withMinimumValue();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = property19.getAsShortText(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale31);
        java.lang.String str37 = nameProvider10.getName(locale31, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", "dayOfYear");
        boolean boolean38 = locale31.hasExtensions();
        java.lang.String str41 = nameProvider0.getShortName(locale31, "0122-02-13T13:45:04.154", "0122-03-06T13:44:41.177+52:00");
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale.Builder builder45 = builder42.setLocale(locale43);
        java.lang.String str48 = nameProvider0.getName(locale43, "2022-02-14T13:45:33.246", "France");
        java.util.Locale locale49 = java.util.Locale.ROOT;
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        java.lang.String str54 = property53.getAsString();
        org.joda.time.LocalDateTime localDateTime55 = property53.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField56 = property53.getField();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = property53.getAsText(locale57);
        java.lang.String str59 = locale57.getISO3Country();
        java.lang.String str60 = locale49.getDisplayScript(locale57);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        boolean boolean62 = locale61.hasExtensions();
        boolean boolean63 = locale61.hasExtensions();
        java.lang.String str64 = locale57.getDisplayScript(locale61);
        java.lang.String str65 = locale61.getDisplayCountry();
        java.lang.String str68 = nameProvider0.getShortName(locale61, "+97:10", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u6cd5\u6587" + "'", str4, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7" + "'", str33, "7");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYearOfCentury(813);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 813 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = property3.toInterval();
        int int36 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int40 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime41 = property3.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withDurationAdded(readableDuration42, 49489125);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.year();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912086169L + "'", long33 == 9223371988912086169L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNull(durationField46);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hi!");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str4 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Greenwich Mean Time" + "'", str4, "Greenwich Mean Time");
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withEra(194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 194 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        java.lang.String str9 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(38154052L, dateTimeZone14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        boolean boolean20 = locale19.hasExtensions();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getISO3Country();
        java.lang.String str23 = locale18.getDisplayName(locale19);
        int int24 = property17.getMaximumTextLength(locale19);
        java.lang.String str25 = locale19.getVariant();
        int int26 = property7.getMaximumShortTextLength(locale19);
        int int27 = property7.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u661f\u671f\u65e5" + "'", str9, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        java.util.Locale locale1 = new java.util.Locale("0117-02-11T09:45:51.633");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "0117-02-11t09:45:51.633");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusHours((int) (short) 100);
        int int6 = localDateTime5.size();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths(24);
        int int9 = localDateTime8.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(35152107);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35152107 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.yearOfEra();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime48 = property46.withMinimumValue();
        int int49 = localDateTime48.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minus(readableDuration50);
        boolean boolean53 = localDateTime48.equals((java.lang.Object) 646);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 13 + "'", int49 == 13);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream8 = charSet7.parallelStream();
        boolean boolean9 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean10 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getScript();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        boolean boolean14 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        charSet13.clear();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream18 = charSet17.parallelStream();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream21 = charSet20.parallelStream();
        boolean boolean22 = charSet17.containsAll((java.util.Collection<java.lang.Character>) charSet20);
        boolean boolean23 = charSet17.isEmpty();
        java.lang.Object[] objArray24 = charSet17.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray30 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray25, dateTimeFieldArray26, dateTimeFieldArray27, dateTimeFieldArray28, dateTimeFieldArray29 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray31 = charSet17.toArray(dateTimeFieldArray30);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator34 = charSet33.spliterator();
        boolean boolean35 = charSet17.removeAll((java.util.Collection<java.lang.Character>) charSet33);
        java.util.stream.Stream<java.lang.Character> charStream36 = charSet33.parallelStream();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream39 = charSet38.parallelStream();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getScript();
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        boolean boolean43 = charSet38.containsAll((java.util.Collection<java.lang.Character>) charSet42);
        java.util.Spliterator<java.lang.Character> charSpliterator44 = charSet38.spliterator();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream47 = charSet46.parallelStream();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getScript();
        java.util.Set<java.lang.Character> charSet50 = locale48.getExtensionKeys();
        boolean boolean51 = charSet46.containsAll((java.util.Collection<java.lang.Character>) charSet50);
        boolean boolean53 = charSet46.contains((java.lang.Object) 390);
        boolean boolean54 = charSet38.removeAll((java.util.Collection<java.lang.Character>) charSet46);
        boolean boolean55 = charSet46.isEmpty();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream58 = charSet57.parallelStream();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getScript();
        java.util.Set<java.lang.Character> charSet61 = locale59.getExtensionKeys();
        boolean boolean62 = charSet57.containsAll((java.util.Collection<java.lang.Character>) charSet61);
        boolean boolean64 = charSet57.contains((java.lang.Object) 390);
        java.lang.Object[] objArray65 = charSet57.toArray();
        boolean boolean66 = charSet46.removeAll((java.util.Collection<java.lang.Character>) charSet57);
        boolean boolean67 = charSet33.containsAll((java.util.Collection<java.lang.Character>) charSet57);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.yearOfEra();
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.weekyear();
        org.joda.time.LocalDateTime localDateTime74 = property73.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.withPeriodAdded(readablePeriod77, (int) (short) -1);
        int int80 = localDateTime79.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withYear((int) (short) 10);
        org.joda.time.Chronology chronology84 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(chronology84);
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime79, chronology84);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology84);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(1561376133334080000L, chronology84);
        boolean boolean89 = charSet33.equals((java.lang.Object) chronology84);
        boolean boolean90 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(charStream18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(charStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(charSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charStream36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(charStream39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charSpliterator44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(charStream47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNotNull(charStream58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2922789 + "'", int80 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusMonths((int) (byte) 0);
        java.lang.String str18 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        java.lang.String str23 = property22.getAsString();
        int int24 = property22.getMinimumValueOverall();
        java.lang.String str25 = property22.toString();
        org.joda.time.LocalDateTime localDateTime26 = property22.getLocalDateTime();
        java.lang.String str27 = property22.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property22.getFieldType();
        org.joda.time.DurationField durationField29 = property22.getDurationField();
        long long32 = durationField29.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        java.lang.String str37 = property36.getAsString();
        int int38 = property36.getMinimumValueOverall();
        java.lang.String str39 = property36.toString();
        org.joda.time.LocalDateTime localDateTime40 = property36.getLocalDateTime();
        java.lang.String str41 = property36.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property36.getFieldType();
        org.joda.time.DurationField durationField43 = property36.getDurationField();
        java.lang.String str44 = durationField43.toString();
        org.joda.time.DurationFieldType durationFieldType45 = durationField43.getType();
        int int46 = durationField29.compareTo(durationField43);
        int int49 = durationField43.getDifference((-92234312150400000L), (long) 10);
        org.joda.time.DurationFieldType durationFieldType50 = durationField43.getType();
        boolean boolean51 = localDateTime12.isSupported(durationFieldType50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime8.withFieldAdded(durationFieldType50, 194);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        boolean boolean60 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.Chronology chronology61 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.plusMinutes(0);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withDurationAdded(readableDuration64, 22);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withCenturyOfEra((int) (short) 1);
        boolean boolean73 = localDateTime69.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.plusMillis(0);
        boolean boolean80 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.yearOfEra();
        java.lang.String str85 = property84.getAsString();
        org.joda.time.LocalDateTime localDateTime86 = property84.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime87 = property84.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime89 = property84.setCopy(49457693);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minus(readableDuration90);
        int int92 = localDateTime75.compareTo((org.joda.time.ReadablePartial) localDateTime89);
        int int93 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime.Property property94 = localDateTime8.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-13T13:48:06.622" + "'", str18, "2022-02-13T13:48:06.622");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[yearOfEra]" + "'", str25, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-31622400000L) + "'", long32 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Property[yearOfEra]" + "'", str39, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DurationField[years]" + "'", str44, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2922789) + "'", int49 == (-2922789));
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022" + "'", str85, "2022");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(107);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withHourOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int[] intArray23 = localDateTime19.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.yearOfCentury();
        int int25 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.plusMillis(650);
        int[] intArray28 = localDateTime13.getValues();
        org.joda.time.LocalDateTime.Property property29 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 49626276);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMonthOfYear(49651182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49651182 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[122, 2, 13, 49686708]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[122, 3, 6, 6486708]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        int int9 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours(697589);
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = property13.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        int int36 = localDateTime35.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = localDateTime26.toDateTime(readableInstant40);
        long long43 = dateTime42.getMillis();
        long long44 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Interval interval45 = property13.toInterval();
        org.joda.time.LocalDateTime localDateTime46 = property13.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = property13.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = property13.addToCopy((long) 426);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry(locale54);
        java.lang.String str57 = locale53.getDisplayScript();
        java.lang.String str58 = dateTimeZone51.getShortName((long) 49453563, locale53);
        java.lang.String str59 = locale53.getDisplayScript();
        java.util.Set<java.lang.Character> charSet60 = locale53.getExtensionKeys();
        java.lang.String str61 = property13.getAsShortText(locale53);
        boolean boolean62 = localDateTime9.equals((java.lang.Object) property13);
        int int63 = localDateTime9.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = localDateTime9.getFieldType(983);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 983");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 9223371988912086732L + "'", long43 == 9223371988912086732L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-292276970L) + "'", long44 == (-292276970L));
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+426:00" + "'", str58, "+426:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekOfWeekyear((int) (short) 10);
        int int16 = localDateTime12.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime12.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        int int40 = localDateTime39.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property41.getFieldType();
        int int45 = localDateTime12.indexOf(dateTimeFieldType44);
        int int46 = localDateTime5.indexOf(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime5.withWeekyear(722);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime5.plusHours(355);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime5.minusWeeks(38171489);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond(629);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 44 + "'", int16 == 44);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours(349800000);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(35170854);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35170854 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "40005-02-11T13:48:06.850" + "'", str8, "40005-02-11T13:48:06.850");
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long15 = durationField10.getValueAsLong(1560042820555128000L);
        long long17 = durationField10.getMillis(20L);
        java.lang.String str18 = durationField10.toString();
        long long20 = durationField10.getMillis((long) 3);
        long long23 = durationField10.getValueAsLong((-187199999L), 3764760177L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 49435789L + "'", long15 == 49435789L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 631139040000L + "'", long17 == 631139040000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DurationField[years]" + "'", str18, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 94670856000L + "'", long20 == 94670856000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setRawOffset(1);
        timeZone0.setID("+52:00");
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(4);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(2);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (short) 0);
        java.util.Date date18 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date18);
        boolean boolean20 = timeZone0.inDaylightTime(date18);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sun Jan 13 13:46:07 GMT 292278993");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(489);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (byte) -1);
        int int19 = localDateTime16.getEra();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        boolean boolean34 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withWeekOfWeekyear((int) (short) 10);
        int int37 = localDateTime36.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = localDateTime27.toDateTime(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = dateTimeZone45.isLocalDateTimeGap(localDateTime48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        boolean boolean56 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withWeekyear((int) (byte) -1);
        boolean boolean62 = localDateTime58.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        boolean boolean69 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime73.getFieldType((int) (short) 0);
        int int76 = localDateTime58.indexOf(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime48.withField(dateTimeFieldType75, (int) ' ');
        boolean boolean79 = dateTime43.isSupported(dateTimeFieldType75);
        boolean boolean80 = localDateTime16.isSupported(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime7.withField(dateTimeFieldType75, 44);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime7.plus(readableDuration83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime7.plusHours(192);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.weekOfWeekyear();
        int int88 = localDateTime86.size();
        org.joda.time.LocalDateTime.Property property89 = localDateTime86.year();
        int int90 = property89.get();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 292278983 + "'", int90 == 292278983);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        boolean boolean7 = charSet1.isEmpty();
        java.util.List[] listArray9 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.util.Locale>[] localeListArray10 = (java.util.List<java.util.Locale>[]) listArray9;
        java.util.List<java.util.Locale>[] localeListArray11 = charSet1.toArray(localeListArray10);
        java.util.Iterator<java.lang.Character> charItor12 = charSet1.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(localeListArray10);
        org.junit.Assert.assertNotNull(localeListArray11);
        org.junit.Assert.assertNotNull(charItor12);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        int int4 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withDurationAdded(readableDuration7, 0);
        org.joda.time.DateTime dateTime10 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        java.lang.String str30 = property29.getAsString();
        int int31 = property29.getMinimumValueOverall();
        java.lang.String str32 = property29.toString();
        org.joda.time.LocalDateTime localDateTime33 = property29.getLocalDateTime();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        boolean boolean35 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant37 = dateTime25.toInstant();
        java.lang.String str38 = dateTime25.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 189 + "'", int4 == 189);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[yearOfEra]" + "'", str32, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(instant37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0122-03-06T13:48:07.189+52:00" + "'", str38, "0122-03-06T13:48:07.189+52:00");
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime7.getField(580);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 580");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withPeriodAdded(readablePeriod6, 2);
        java.lang.String str9 = localDateTime8.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-13T13:48:07.283" + "'", str9, "2022-02-13T13:48:07.283");
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = property3.toInterval();
        org.joda.time.LocalDateTime localDateTime36 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property3.roundFloorCopy();
        int int38 = property3.get();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        boolean boolean45 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        boolean boolean56 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withWeekOfWeekyear((int) (short) 10);
        int int59 = localDateTime58.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = property60.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withCenturyOfEra((int) (short) 1);
        boolean boolean71 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withWeekOfWeekyear((int) (short) 10);
        int int74 = localDateTime73.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = property75.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        int int80 = dateTime64.compareTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime81 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        long long82 = dateTime79.getMillis();
        org.joda.time.Instant instant83 = dateTime79.toInstant();
        long long84 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912087305L + "'", long33 == 9223371988912087305L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-58311843112695L) + "'", long82 == (-58311843112695L));
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1899L + "'", long84 == 1899L);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = localDateTime11.toString("2022", locale16);
        java.util.Locale locale20 = new java.util.Locale("2022");
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale16, locale20, locale21, locale23, locale24, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList28);
        java.lang.String[] strArray35 = new java.lang.String[] { "0122-02-11T09:43:49.336", "0122-02-11T09:43:49.336" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str48 = localDateTime41.toString("2022", locale46);
        java.util.Locale locale50 = new java.util.Locale("2022");
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getScript();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale46, locale50, locale51, locale53, locale54, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList58, filteringMode60);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList36, filteringMode60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.parse("zh", strMap65);
        org.joda.time.tz.Provider provider67 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone69 = provider67.getZone("2022-02-12T09:43:52.434");
        org.joda.time.DateTimeZone dateTimeZone71 = provider67.getZone("zh");
        java.util.Set<java.lang.String> strSet72 = provider67.getAvailableIDs();
        java.lang.String str73 = java.util.Locale.lookupTag(languageRangeList66, (java.util.Collection<java.lang.String>) strSet72);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList75 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.lang.String str78 = java.util.Locale.lookupTag(languageRangeList75, (java.util.Collection<java.lang.String>) strSet77);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList66, (java.util.Collection<java.lang.String>) strSet77);
        java.lang.String str80 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet77);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertEquals(locale20.toString(), "2022");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode30.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertEquals(locale50.toString(), "2022");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode60.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNull(dateTimeZone69);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(languageRangeList75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("0122-02-11T09:43:49.336");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0122-02-11t09:43:49.336");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime16.getDayOfYear();
        boolean boolean21 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusWeeks(42);
        boolean boolean24 = charSet1.remove((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        int int33 = localDateTime30.getMonthOfYear();
        int int34 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        boolean boolean35 = charSet1.remove((java.lang.Object) property28);
        long long36 = property28.remainder();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.lang.String str45 = localDateTime38.toString("2022", locale43);
        java.lang.String str48 = nameProvider37.getName(locale43, "2022-02-12T09:43:52.434", "+00:00");
        java.lang.String str49 = locale43.getDisplayCountry();
        java.lang.String str50 = property28.getAsShortText(locale43);
        org.joda.time.LocalDateTime localDateTime52 = property28.setCopy("3");
        java.lang.String str53 = property28.getName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 44 + "'", int20 == 44);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3764887457L + "'", long36 == 3764887457L);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022" + "'", str50, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "yearOfEra" + "'", str53, "yearOfEra");
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        java.lang.String str9 = localDateTime5.toString();
        int int10 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.weekyear();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = property11.equals((java.lang.Object) locale12);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale17.getDisplayVariant(locale18);
        java.lang.String str21 = locale17.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str24 = locale22.getCountry();
        java.util.Locale locale25 = locale22.stripExtensions();
        java.lang.String str26 = locale17.getDisplayVariant(locale25);
        java.lang.String str27 = locale16.getDisplayLanguage(locale25);
        java.util.Locale.Builder builder28 = builder15.setLocale(locale16);
        java.util.Locale locale29 = builder15.build();
        java.util.Locale locale30 = builder15.build();
        java.util.Locale locale31 = builder15.build();
        java.lang.String str32 = locale12.getDisplayCountry(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = locale12.getUnicodeLocaleType("0122-03-03T23:59:59.968Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 0122-03-03T23:59:59.968Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0122-02-13T13:48:07.518" + "'", str9, "0122-02-13T13:48:07.518");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587" + "'", str27, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u7fa9\u5927\u5229" + "'", str32, "\u7fa9\u5927\u5229");
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = property3.setCopy((int) 'u');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        java.lang.String str12 = property11.getAsString();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(489);
        int int16 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withDurationAdded(readableDuration17, 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        java.util.Locale locale7 = new java.util.Locale("0122-02-11T09:43:49.336", "2022");
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = dateTimeZone1.getShortName(283996800000L, locale7);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.lang.String str11 = timeZone10.getID();
        timeZone10.setID("millis");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = timeZone10.getDisplayName(false, 49583911);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 49583911");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals(locale7.toString(), "0122-02-11t09:43:49.336_2022");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+426:00" + "'", str9, "+426:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+Z6:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+426:00" + "'", str11, "+426:00");
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale5.getLanguage();
        java.lang.String str8 = property3.getAsText(locale5);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream11 = charSet10.parallelStream();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream14 = charSet13.parallelStream();
        boolean boolean15 = charSet10.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        boolean boolean16 = charSet10.isEmpty();
        java.lang.Object[] objArray17 = charSet10.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray23 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray18, dateTimeFieldArray19, dateTimeFieldArray20, dateTimeFieldArray21, dateTimeFieldArray22 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray24 = charSet10.toArray(dateTimeFieldArray23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator27 = charSet26.spliterator();
        boolean boolean28 = charSet10.removeAll((java.util.Collection<java.lang.Character>) charSet26);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.minuteOfHour();
        boolean boolean36 = property35.isLeap();
        java.lang.String str37 = property35.toString();
        boolean boolean38 = charSet10.equals((java.lang.Object) property35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int42 = dateTimeZone40.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        java.lang.String str48 = property47.getAsString();
        org.joda.time.LocalDateTime localDateTime49 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField50 = property47.getField();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = property47.getAsText(locale51);
        java.lang.String str53 = dateTimeZone40.getShortName((long) (byte) 1, locale51);
        java.lang.String str54 = locale51.getDisplayName();
        int int55 = property35.getMaximumTextLength(locale51);
        java.lang.String str56 = locale51.getCountry();
        java.lang.String str57 = locale5.getDisplayCountry(locale51);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.yearOfEra();
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.weekyear();
        org.joda.time.LocalDateTime localDateTime63 = property62.withMaximumValue();
        int int64 = localDateTime63.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        java.lang.String str73 = localDateTime66.toString("2022", locale71);
        int int74 = property65.getMaximumShortTextLength(locale71);
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet76 = locale75.getExtensionKeys();
        java.lang.String str77 = locale75.getCountry();
        java.lang.String str78 = property65.getAsText(locale75);
        java.lang.String str79 = locale75.getScript();
        java.util.Locale.Category category80 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.lang.String str82 = locale81.getScript();
        java.util.Set<java.lang.Character> charSet83 = locale81.getExtensionKeys();
        java.util.Locale.setDefault(category80, locale81);
        java.util.Locale locale85 = java.util.Locale.getDefault(category80);
        java.lang.String str86 = locale75.getDisplayName(locale85);
        java.lang.String str87 = locale51.getDisplayLanguage(locale75);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(charStream11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(charSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[minuteOfHour]" + "'", str37, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.100" + "'", str53, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2922789 + "'", int64 == 2922789);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u661f\u671f\u65e5" + "'", str78, "\u661f\u671f\u65e5");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category80.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u4e2d\u6587" + "'", str86, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u4e2d\u6587" + "'", str87, "\u4e2d\u6587");
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        int int5 = localDateTime4.getCenturyOfEra();
        java.lang.String str6 = localDateTime4.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:07.729" + "'", str6, "2022-02-11T09:48:07.729");
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(49628411);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        boolean boolean9 = localDateTime5.equals((java.lang.Object) "DurationField[years]");
        int int10 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = dateTimeZone23.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long31 = dateTimeZone29.convertUTCToLocal(0L);
        long long33 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, 1L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withWeekOfWeekyear((int) (short) 10);
        int int43 = localDateTime39.getDayOfYear();
        boolean boolean44 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        int int45 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        int int49 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.minusMillis(119);
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale54.getDisplayLanguage(locale55);
        java.lang.String str60 = nameProvider52.getShortName(locale54, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        org.joda.time.LocalDateTime localDateTime66 = property64.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime68 = property64.setCopy((int) 'u');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        org.joda.time.Chronology chronology70 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) str60, chronology70);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.yearOfEra();
        java.lang.String str77 = property76.getAsString();
        org.joda.time.LocalDateTime localDateTime78 = property76.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withCenturyOfEra((int) (short) 1);
        boolean boolean87 = localDateTime83.isBefore((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = localDateTime91.getFieldType((int) (short) 0);
        boolean boolean94 = localDateTime78.isSupported(dateTimeFieldType93);
        int int95 = localDateTime72.indexOf(dateTimeFieldType93);
        int int96 = localDateTime51.get(dateTimeFieldType93);
        org.joda.time.LocalDateTime.Property property97 = localDateTime5.property(dateTimeFieldType93);
        org.joda.time.LocalDateTime.Property property98 = localDateTime5.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 187200000L + "'", long31 == 187200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 44 + "'", int43 == 44);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u6cd5\u6587" + "'", str56, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "japonais" + "'", str57, "japonais");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022" + "'", str77, "2022");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 122 + "'", int96 == 122);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        long long4 = dateTimeZone1.convertLocalToUTC(9223371988911843765L, true);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = locale9.getCountry();
        java.util.Locale locale12 = locale9.stripExtensions();
        boolean boolean13 = locale9.hasExtensions();
        java.util.Locale.setDefault(category8, locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = timeZone5.getDisplayName(true, 49465330, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 49465330");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223371988911843733L + "'", long4 == 9223371988911843733L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long10 = dateTimeZone8.convertUTCToLocal(0L);
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, 1L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        java.lang.String str18 = dateTimeZone8.getShortName((long) 511);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 187200000L, dateTimeZone8);
        java.util.TimeZone timeZone20 = dateTimeZone8.toTimeZone();
        boolean boolean22 = dateTimeZone8.isStandardOffset((long) 366);
        java.lang.String str24 = dateTimeZone8.getNameKey((long) 291);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeField dateTimeField35 = property10.getField();
        org.joda.time.LocalDateTime localDateTime36 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        boolean boolean43 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTimeField dateTimeField45 = localDateTime42.getField(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.era();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        boolean boolean52 = dateTimeZone48.isLocalDateTimeGap(localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        boolean boolean59 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withWeekyear((int) (byte) -1);
        boolean boolean65 = localDateTime61.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra((int) (short) 1);
        boolean boolean72 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDateTime76.getFieldType((int) (short) 0);
        int int79 = localDateTime61.indexOf(dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime51.withField(dateTimeFieldType78, (int) ' ');
        boolean boolean82 = localDateTime42.isSupported(dateTimeFieldType78);
        org.joda.time.LocalDateTime.Property property83 = localDateTime42.yearOfEra();
        org.joda.time.DurationField durationField84 = property83.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime85 = property83.withMinimumValue();
        int int86 = localDateTime85.getHourOfDay();
        org.joda.time.LocalDateTime.Property property87 = localDateTime85.era();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.minusMonths(49476971);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.secondOfMinute();
        int int91 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNull(durationField84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 13 + "'", int86 == 13);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long16 = durationField10.getDifferenceAsLong((long) 3, 9223371988911832894L);
        long long19 = durationField10.getDifferenceAsLong((long) 736, 9223371988911842394L);
        long long22 = durationField10.subtract(10L, 936);
        long long24 = durationField10.getMillis(875);
        java.lang.String str25 = durationField10.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292277023L) + "'", long16 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-292277023L) + "'", long19 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-29537308799990L) + "'", long22 == (-29537308799990L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27612333000000L + "'", long24 == 27612333000000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[years]" + "'", str25, "DurationField[years]");
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("48");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=48");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 10);
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology15);
        java.lang.String str19 = localDateTime18.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922789 + "'", int11 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:08.334" + "'", str19, "2022-02-11T09:48:08.334");
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        boolean boolean12 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear((int) (byte) -1);
        boolean boolean18 = localDateTime14.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        int int32 = localDateTime14.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime4.withField(dateTimeFieldType31, (int) ' ');
        int int35 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusSeconds(49507132);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withTime(215, 875, 49475857, 49541102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 215 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 13 + "'", int35 == 13);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.removeUnicodeLocaleAttribute("jpn");
        java.lang.Class<?> wildcardClass6 = builder1.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField(46857854);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46857854");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (short) 100);
        int int23 = localDateTime20.getYearOfCentury();
        boolean boolean24 = localDateTime8.equals((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        int int36 = localDateTime35.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withWeekOfWeekyear((int) (short) 10);
        int int51 = localDateTime50.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        int int57 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        boolean boolean64 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = localDateTime68.getFieldType((int) (short) 0);
        boolean boolean71 = dateTime41.isSupported(dateTimeFieldType70);
        org.joda.time.DateTime dateTime72 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant73 = dateTime41.toInstant();
        java.lang.String str74 = instant73.toString();
        org.joda.time.Instant instant75 = instant73.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(instant73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0122-03-04T09:48:08.475Z" + "'", str74, "0122-03-04T09:48:08.475Z");
        org.junit.Assert.assertNotNull(instant75);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        java.util.Locale locale1 = new java.util.Locale("2022-02-13T13:47:35.668");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-13t13:47:35.668");
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(35035070);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 426, true, 94694400000L);
        long long7 = dateTimeZone1.previousTransition(31536000000L);
        boolean boolean8 = dateTimeZone1.isFixed();
        java.lang.String str10 = dateTimeZone1.getName(38171770L);
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        int int13 = timeZone11.getOffset((long) 376);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        boolean boolean19 = timeZone11.hasSameRules(timeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-35034644L) + "'", long5 == (-35034644L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31536000000L + "'", long7 == 31536000000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+09:43:55.070" + "'", str10, "+09:43:55.070");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+09:43");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35035070 + "'", int13 == 35035070);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor3 = charSet2.iterator();
        java.util.Iterator<java.lang.Character> charItor4 = charSet2.iterator();
        boolean boolean5 = charSet2.isEmpty();
        java.util.stream.Stream<java.lang.Character> charStream6 = charSet2.parallelStream();
        java.util.Iterator<java.lang.Character> charItor7 = charSet2.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charItor3);
        org.junit.Assert.assertNotNull(charItor4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charStream6);
        org.junit.Assert.assertNotNull(charItor7);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        int int4 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withDurationAdded(readableDuration7, 0);
        org.joda.time.DateTime dateTime10 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        java.lang.String str30 = property29.getAsString();
        int int31 = property29.getMinimumValueOverall();
        java.lang.String str32 = property29.toString();
        org.joda.time.LocalDateTime localDateTime33 = property29.getLocalDateTime();
        org.joda.time.DateTime dateTime34 = localDateTime33.toDateTime();
        boolean boolean35 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology37 = dateTime10.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 698 + "'", int4 == 698);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[yearOfEra]" + "'", str32, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguage("0117-02-13T13:47:55.225");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 0117-02-13T13:47:55.225 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(857, 2035, 49666893, 65, 126);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.lang.String str8 = nameProvider0.getShortName(locale2, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream14 = charSet13.parallelStream();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream17 = charSet16.parallelStream();
        boolean boolean18 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        boolean boolean19 = charSet13.isEmpty();
        java.lang.Object[] objArray20 = charSet13.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray26 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray21, dateTimeFieldArray22, dateTimeFieldArray23, dateTimeFieldArray24, dateTimeFieldArray25 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray27 = charSet13.toArray(dateTimeFieldArray26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator30 = charSet29.spliterator();
        boolean boolean31 = charSet13.removeAll((java.util.Collection<java.lang.Character>) charSet29);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property35.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        boolean boolean39 = property38.isLeap();
        java.lang.String str40 = property38.toString();
        boolean boolean41 = charSet13.equals((java.lang.Object) property38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int45 = dateTimeZone43.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        java.lang.String str51 = property50.getAsString();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField53 = property50.getField();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = property50.getAsText(locale54);
        java.lang.String str56 = dateTimeZone43.getShortName((long) (byte) 1, locale54);
        java.lang.String str57 = locale54.getDisplayName();
        int int58 = property38.getMaximumTextLength(locale54);
        java.lang.String str61 = nameProvider9.getShortName(locale54, "\u82f1\u6587", "49505167");
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.yearOfEra();
        java.lang.String str66 = property65.getAsString();
        org.joda.time.LocalDateTime localDateTime67 = property65.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField68 = property65.getField();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = property65.getAsText(locale69);
        java.lang.String str71 = locale69.getISO3Country();
        java.lang.String str72 = locale69.getISO3Country();
        java.util.Locale locale73 = locale69.stripExtensions();
        java.lang.String str76 = nameProvider9.getName(locale73, "-0001-03-12T13:44:20.983", "Greenwich Mean Time");
        java.lang.String str79 = nameProvider0.getShortName(locale73, "0117-02-11T10:38:07.923", "292278993-02-08T10:38:39.398");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        boolean boolean82 = locale81.hasExtensions();
        java.lang.String str83 = locale81.getCountry();
        java.util.Locale locale87 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str88 = locale81.getDisplayCountry(locale87);
        boolean boolean89 = locale87.hasExtensions();
        java.util.Set<java.lang.String> strSet90 = locale87.getUnicodeLocaleAttributes();
        java.lang.String str93 = nameProvider0.getName(locale87, "2022-02-11T19:31:19.868", "-0009-12-10T10:37:16.089");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u6cd5\u6587" + "'", str4, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charStream14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(charStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[minuteOfHour]" + "'", str40, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.100" + "'", str56, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u6587" + "'", str57, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022" + "'", str70, "2022");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals(locale87.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder2.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getSecondOfMinute();
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusDays(299);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        int int15 = localDateTime13.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(69);
        java.lang.String str18 = dateTimeZone17.toString();
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone17);
        java.lang.String str22 = dateTimeZone17.getShortName((long) 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) int15, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 122 + "'", int15 == 122);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+69:00" + "'", str18, "+69:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+69:00" + "'", str22, "+69:00");
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getCountry();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale5 = locale3.stripExtensions();
        boolean boolean6 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DurationField durationField35 = property10.getDurationField();
        org.joda.time.DateTimeField dateTimeField36 = property10.getField();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = dateTimeZone38.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long46 = dateTimeZone44.convertUTCToLocal(0L);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone44, 1L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        boolean boolean52 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        java.util.TimeZone timeZone53 = dateTimeZone44.toTimeZone();
        timeZone53.setRawOffset(1);
        java.lang.String str56 = timeZone53.getID();
        timeZone53.setID("Greenwich Mean Time");
        java.lang.String str59 = timeZone53.getID();
        boolean boolean60 = property10.equals((java.lang.Object) timeZone53);
        java.lang.String str61 = timeZone53.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Greenwich Mean Time' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 187200000L + "'", long46 == 187200000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GMT" + "'", str56, "GMT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Greenwich Mean Time" + "'", str59, "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Greenwich Mean Time" + "'", str61, "Greenwich Mean Time");
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(readableInstant21);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        java.lang.String str28 = property27.getAsString();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.Interval interval30 = property27.toInterval();
        boolean boolean31 = localDateTime7.equals((java.lang.Object) property27);
        int int32 = property27.getMaximumValueOverall();
        int int33 = property27.getMaximumValue();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        boolean boolean36 = locale35.hasExtensions();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getISO3Country();
        java.lang.String str39 = locale34.getDisplayName(locale35);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("0122-02-11T09:43:49.336");
        java.lang.String str42 = locale34.getDisplayVariant(locale41);
        java.lang.String str43 = property27.getAsText(locale41);
        java.lang.String str44 = locale41.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str39, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("37");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream8 = charSet7.parallelStream();
        boolean boolean9 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean10 = charSet4.isEmpty();
        java.lang.Object[] objArray11 = charSet4.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray17 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray12, dateTimeFieldArray13, dateTimeFieldArray14, dateTimeFieldArray15, dateTimeFieldArray16 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray18 = charSet4.toArray(dateTimeFieldArray17);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator21 = charSet20.spliterator();
        boolean boolean22 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet20);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = property26.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.minuteOfHour();
        boolean boolean30 = property29.isLeap();
        java.lang.String str31 = property29.toString();
        boolean boolean32 = charSet4.equals((java.lang.Object) property29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        java.lang.String str42 = property41.getAsString();
        org.joda.time.LocalDateTime localDateTime43 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = property41.getAsText(locale45);
        java.lang.String str47 = dateTimeZone34.getShortName((long) (byte) 1, locale45);
        java.lang.String str48 = locale45.getDisplayName();
        int int49 = property29.getMaximumTextLength(locale45);
        java.lang.String str52 = nameProvider0.getShortName(locale45, "\u82f1\u6587", "49505167");
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField59 = property56.getField();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = property56.getAsText(locale60);
        java.lang.String str62 = locale60.getISO3Country();
        java.lang.String str63 = locale60.getISO3Country();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.lang.String str67 = nameProvider0.getName(locale64, "-0001-03-12T13:44:20.983", "Greenwich Mean Time");
        java.util.Locale locale68 = locale64.stripExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(charSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[minuteOfHour]" + "'", str31, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.100" + "'", str47, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e2d\u6587" + "'", str48, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long16 = durationField10.subtract(9223371988911859509L, 2922789);
        int int19 = durationField10.getValue((long) 'u', 9223371988911870622L);
        long long22 = durationField10.getMillis((long) 49522517, (long) 532);
        int int24 = durationField10.getValue(9223371988911961874L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 9131137676588659509L + "'", long16 == 9131137676588659509L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1562779691942400000L + "'", long22 == 1562779691942400000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292277023 + "'", int24 == 292277023);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        boolean boolean12 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear((int) (byte) -1);
        boolean boolean18 = localDateTime14.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        int int32 = localDateTime14.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime4.withField(dateTimeFieldType31, (int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfDay(1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.minusWeeks(49527601);
        int int41 = localDateTime34.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 44 + "'", int41 == 44);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        boolean boolean30 = dateTimeZone26.isLocalDateTimeGap(localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long34 = dateTimeZone32.convertUTCToLocal(0L);
        long long36 = dateTimeZone26.getMillisKeepLocal(dateTimeZone32, 1L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        boolean boolean43 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withWeekOfWeekyear((int) (short) 10);
        int int46 = localDateTime42.getDayOfYear();
        boolean boolean47 = dateTimeZone32.isLocalDateTimeGap(localDateTime42);
        int int48 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.Chronology chronology56 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minusHours(187200000);
        int[] intArray59 = localDateTime58.getValues();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withCenturyOfEra((int) (short) 1);
        boolean boolean66 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withWeekOfWeekyear((int) (short) 10);
        int int69 = localDateTime68.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = property70.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property70.getFieldType();
        boolean boolean74 = localDateTime58.isSupported(dateTimeFieldType73);
        boolean boolean75 = localDateTime42.isSupported(dateTimeFieldType73);
        boolean boolean76 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTimeField dateTimeField78 = localDateTime42.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime42.withYearOfCentury(698);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 698 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 189 + "'", int13 == 189);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 187200000L + "'", long34 == 187200000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 44 + "'", int46 == 44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-21234, 6, 12, 49689189]");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime();
        int int15 = localDateTime10.getWeekyear();
        int int16 = localDateTime10.getDayOfMonth();
        int int17 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry(locale2);
        java.lang.String str5 = locale1.getDisplayScript();
        java.lang.String str8 = nameProvider0.getName(locale1, "0122-03-04T09:43:54.641Z", "\u516c\u5143");
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        java.lang.String str13 = property12.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = property12.getAsText(locale16);
        java.lang.String str18 = locale16.getISO3Country();
        java.util.Locale.setDefault(locale16);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = localDateTime20.toString("2022", locale25);
        java.lang.String str28 = locale25.getISO3Country();
        java.lang.String str30 = locale25.getExtension('u');
        java.lang.String str31 = locale16.getDisplayName(locale25);
        java.lang.String str34 = nameProvider0.getName(locale16, "Property[yearOfEra]", "0122-02-13T13:45:03.746");
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale36.getDisplayVariant(locale37);
        java.lang.String str40 = locale35.getDisplayLanguage(locale36);
        java.lang.String str43 = nameProvider0.getShortName(locale35, "\u4e09\u6708", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = locale35.getUnicodeLocaleType("135647-09-24T13:45:31.966");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 135647-09-24T13:45:31.966");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u6587" + "'", str31, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DurationField durationField35 = property10.getDurationField();
        long long38 = durationField35.subtract((long) 426, (int) 'a');
        long long41 = durationField35.add((long) 80, 13);
        long long44 = durationField35.getMillis(38168006, 9223371988911871894L);
        java.lang.String str45 = durationField35.toString();
        long long48 = durationField35.getMillis(895L, (long) 49497992);
        long long50 = durationField35.getMillis((long) 13);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-58665599574L) + "'", long38 == (-58665599574L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7862400080L + "'", long41 == 7862400080L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 23084010028800000L + "'", long44 == 23084010028800000L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DurationField[weeks]" + "'", str45, "DurationField[weeks]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 541296000000L + "'", long48 == 541296000000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 7862400000L + "'", long50 == 7862400000L);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getValueAsLong((-35034644L), (long) 312);
        int int15 = durationField10.getValue((-1560975044515199986L));
        boolean boolean16 = durationField10.isPrecise();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-49465330) + "'", int15 == (-49465330));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getScript();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet5);
        java.util.Spliterator<java.lang.Character> charSpliterator7 = charSet1.spliterator();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet9.parallelStream();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getScript();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        boolean boolean14 = charSet9.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        boolean boolean16 = charSet9.contains((java.lang.Object) 390);
        boolean boolean17 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet9);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear((int) (short) 10);
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(35035170L, chronology22);
        boolean boolean26 = charSet1.contains((java.lang.Object) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.lang.String str36 = localDateTime29.toString("2022", locale34);
        java.lang.String str39 = nameProvider28.getName(locale34, "2022-02-12T09:43:52.434", "+00:00");
        java.util.Locale locale42 = new java.util.Locale("GMT", "\u82f1\u6587");
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.lang.String str46 = nameProvider28.getName(locale42, "292278993-02-10T13:44:24.444", "hi!");
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        java.lang.String str51 = property50.getAsString();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField53 = property50.getField();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = property50.getAsText(locale54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale57.getCountry();
        java.lang.String str60 = locale56.getDisplayCountry(locale57);
        int int61 = property50.getMaximumShortTextLength(locale57);
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        boolean boolean65 = locale64.hasExtensions();
        java.lang.String str66 = locale63.getDisplayVariant(locale64);
        java.lang.String str67 = locale63.getDisplayCountry();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.String str70 = locale68.getCountry();
        java.util.Locale locale71 = locale68.stripExtensions();
        java.lang.String str72 = locale63.getDisplayVariant(locale71);
        java.lang.String str73 = locale62.getDisplayLanguage(locale71);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale74.getDisplayVariant(locale75);
        java.lang.String str78 = locale75.getLanguage();
        java.lang.String str79 = locale62.getDisplayName(locale75);
        java.util.Locale locale80 = locale62.stripExtensions();
        java.lang.String str81 = locale57.getDisplayScript(locale80);
        java.lang.String str82 = locale42.getDisplayScript(locale80);
        int int83 = property27.getMaximumTextLength(locale42);
        java.lang.String str84 = property27.getAsString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSpliterator7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(nameProvider28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gmt" + "'", str43, "gmt");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u4e2d\u6587" + "'", str73, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "zh" + "'", str78, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str79, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        boolean boolean7 = charSet1.isEmpty();
        java.lang.Object[] objArray8 = charSet1.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray14 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray9, dateTimeFieldArray10, dateTimeFieldArray11, dateTimeFieldArray12, dateTimeFieldArray13 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray15 = charSet1.toArray(dateTimeFieldArray14);
        boolean boolean16 = charSet1.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator17 = charSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSpliterator17);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra(0);
        int int14 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = localDateTime9.isAfter(readablePartial15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime35 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime36 = property10.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDateTime36.isSupported(dateTimeFieldType37);
        int int39 = localDateTime36.getYear();
        int int40 = localDateTime36.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 122 + "'", int39 == 122);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 61 + "'", int40 == 61);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("0117-02-11T10:36:11.713");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = dateTimeZone6.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long14 = dateTimeZone12.convertUTCToLocal(0L);
        long long16 = dateTimeZone6.getMillisKeepLocal(dateTimeZone12, 1L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = dateTimeZone12.isLocalDateTimeGap(localDateTime17);
        java.util.TimeZone timeZone21 = dateTimeZone12.toTimeZone();
        timeZone21.setRawOffset(1);
        boolean boolean24 = timeZone21.observesDaylightTime();
        timeZone21.setRawOffset(22);
        java.time.ZoneId zoneId27 = timeZone21.toZoneId();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone(zoneId27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone(zoneId27);
        boolean boolean30 = timeZone2.hasSameRules(timeZone29);
        java.lang.Object obj31 = timeZone2.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+Z6:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 187200000L + "'", long14 == 187200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "java.util.SimpleTimeZone[id=0117-02-11T10:36:11.713,offset=1533600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "java.util.SimpleTimeZone[id=0117-02-11T10:36:11.713,offset=1533600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "java.util.SimpleTimeZone[id=0117-02-11T10:36:11.713,offset=1533600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("28");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=28");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("GMT");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setScript("2022-02-11T10:38:49.299");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T10:38:49.299 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        boolean boolean7 = charSet1.isEmpty();
        java.lang.Object[] objArray8 = charSet1.toArray();
        java.lang.Character[] charArray11 = new java.lang.Character[] { '#', ' ' };
        java.util.ArrayList<java.lang.Character> charList12 = new java.util.ArrayList<java.lang.Character>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charList12, charArray11);
        boolean boolean14 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charList12);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DateTimeField dateTimeField23 = localDateTime20.getField(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.era();
        int int25 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.secondOfMinute();
        long long27 = property26.remainder();
        boolean boolean28 = charSet1.remove((java.lang.Object) long27);
        java.util.stream.Stream<java.lang.Character> charStream29 = charSet1.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 812L + "'", long27 == 812L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charStream29);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.lang.String str8 = nameProvider0.getShortName(locale2, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str14 = nameProvider0.getShortName(locale9, "0122-02-13T13:44:36.449+52:00", "");
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = nameProvider15.getShortName(locale16, "292278993-02-13T13:44:13.431", "2022-01-01T00:00:00.000");
        java.util.Locale locale22 = new java.util.Locale("0122-03-04T09:44:03.055Z");
        java.lang.String str25 = nameProvider15.getShortName(locale22, "0122-02-13T13:44:36.449+52:00", "0122-03-06T13:44:27.517+52:00");
        java.lang.String str28 = nameProvider0.getShortName(locale22, "0122-03-04T10:37:25.676+00:52", "0122-02-11T10:36:09.311");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.clearExtensions();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        java.lang.String str36 = property35.getAsString();
        int int37 = property35.getMinimumValueOverall();
        java.lang.String str38 = property35.toString();
        org.joda.time.LocalDateTime localDateTime39 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = property35.withMaximumValue();
        int int41 = localDateTime40.getCenturyOfEra();
        int int42 = localDateTime40.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        boolean boolean50 = dateTimeZone46.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long54 = dateTimeZone52.convertUTCToLocal(0L);
        long long56 = dateTimeZone46.getMillisKeepLocal(dateTimeZone52, 1L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        boolean boolean63 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekOfWeekyear((int) (short) 10);
        int int66 = localDateTime62.getDayOfYear();
        boolean boolean67 = dateTimeZone52.isLocalDateTimeGap(localDateTime62);
        int int69 = dateTimeZone52.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.DateTime dateTime71 = localDateTime44.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime72 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int76 = dateTimeZone74.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.yearOfEra();
        java.lang.String str82 = property81.getAsString();
        org.joda.time.LocalDateTime localDateTime83 = property81.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField84 = property81.getField();
        java.util.Locale locale85 = java.util.Locale.CHINESE;
        java.lang.String str86 = property81.getAsText(locale85);
        java.lang.String str87 = dateTimeZone74.getShortName((long) (byte) 1, locale85);
        java.lang.String str88 = locale85.getDisplayCountry();
        boolean boolean89 = dateTime71.equals((java.lang.Object) locale85);
        java.util.Locale.Builder builder90 = builder31.setLocale(locale85);
        java.lang.String str93 = nameProvider0.getName(locale85, "0122-02-13T13:45:39.016", "-21234-06-12T13:44:15.401");
        java.util.Locale locale95 = new java.util.Locale("292278993-02-13T13:44:25.959");
        java.lang.String str98 = nameProvider0.getShortName(locale95, "0122-03-06T13:46:23.251+52:00", "2022-02-02T03:09:24.485");
        java.lang.String str99 = locale95.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u6cd5\u6587" + "'", str4, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str11, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(locale22.toString(), "0122-03-04t09:44:03.055z");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[yearOfEra]" + "'", str38, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2922789 + "'", int41 == 2922789);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 187200000L + "'", long54 == 187200000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 44 + "'", int66 == 44);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 187200000 + "'", int69 == 187200000);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022" + "'", str82, "2022");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.100" + "'", str87, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals(locale95.toString(), "292278993-02-13t13:44:25.959");
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours((int) (short) 100);
        int[] intArray27 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears(49485722);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfDay(983);
        java.lang.String str32 = localDateTime29.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withYearOfEra((-35876));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -35876 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[122, 2, 13, 49930024]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "49485844-02-13T13:52:10.024" + "'", str32, "49485844-02-13T13:52:10.024");
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[dayofmonth]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = localDateTime11.toString("2022", locale16);
        java.util.Locale locale20 = new java.util.Locale("2022");
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale16, locale20, locale21, locale23, locale24, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet34, filteringMode35);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.lang.String str51 = localDateTime44.toString("2022", locale49);
        java.util.Locale locale53 = new java.util.Locale("2022");
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getScript();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale49, locale53, locale54, locale56, locale57, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Set<java.lang.String> strSet65 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet65);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList66);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList67);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertEquals(locale20.toString(), "2022");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode30.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertEquals(locale53.toString(), "2022");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode63.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = durationField10.getType();
        long long15 = durationField10.getMillis(3, (long) 10);
        java.lang.String str16 = durationField10.toString();
        long long19 = durationField10.subtract((long) 366, (long) (-49465330));
        // The following exception was thrown during execution in test generation
        try {
            long long21 = durationField10.getMillis(3321400213L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3321400213 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 94694400000L + "'", long15 == 94694400000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DurationField[years]" + "'", str16, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1560975044515200366L + "'", long19 == 1560975044515200366L);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-92234312150400000L));
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        int[] intArray3 = localDateTime1.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-2920819, 1, 3, 14400000]");
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0118-03-26T13:47:25.877", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0118-03-26t13:47:25.877");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeField dateTimeField15 = localDateTime12.getField(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = dateTimeZone18.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear((int) (byte) -1);
        boolean boolean35 = localDateTime31.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        int int49 = localDateTime31.indexOf(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.withField(dateTimeFieldType48, (int) ' ');
        boolean boolean52 = localDateTime12.isSupported(dateTimeFieldType48);
        boolean boolean53 = localDateTime5.isSupported(dateTimeFieldType48);
        int int54 = localDateTime5.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime5.withDate(70280361, 18, 49472846);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = property13.getAsText(locale17);
        java.lang.String str19 = dateTimeZone6.getShortName((long) (byte) 1, locale17);
        java.lang.String str20 = property4.getAsShortText(locale17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        boolean boolean22 = locale21.hasExtensions();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = property4.getAsText(locale21);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.100" + "'", str19, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = property3.setCopy((int) 'u');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(2037);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2037 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "6" + "'", str10, "6");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        int int45 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        boolean boolean68 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withWeekOfWeekyear((int) (short) 10);
        int int71 = localDateTime70.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        int int77 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime79, dateTimeZone80);
        java.lang.String str83 = localDateTime82.toString();
        org.joda.time.LocalDateTime.Property property84 = localDateTime82.minuteOfHour();
        java.util.Locale locale88 = new java.util.Locale("years", "0122-03-06T13:45:29.408+52:00");
        java.lang.String str89 = locale88.getDisplayLanguage();
        java.util.Locale locale90 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet91 = locale90.getExtensionKeys();
        java.lang.String str92 = locale90.getCountry();
        java.lang.String str93 = locale88.getDisplayCountry(locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = localDateTime82.toString("0122-03-06T13:44:23.740+52:00", locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-13T13:48:10.322" + "'", str83, "2022-02-13T13:48:10.322");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals(locale88.toString(), "years_0122-03-06T13:45:29.408+52:00");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "years" + "'", str89, "years");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0122-03-06T13:45:29.408+52:00" + "'", str93, "0122-03-06T13:45:29.408+52:00");
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.toString();
        org.joda.time.LocalDateTime localDateTime21 = property17.getLocalDateTime();
        java.lang.String str22 = property17.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property17.getFieldType();
        org.joda.time.DurationField durationField24 = property17.getDurationField();
        java.lang.String str25 = durationField24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = durationField24.getType();
        int int27 = durationField10.compareTo(durationField24);
        int int30 = durationField24.getDifference((long) 115, (-31622400000L));
        long long31 = durationField24.getUnitMillis();
        java.lang.String str32 = durationField24.getName();
        int int34 = durationField24.getValue((long) 2142);
        long long37 = durationField24.getValueAsLong(27047L, (long) 49632083);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[years]" + "'", str25, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 31556952000L + "'", long31 == 31556952000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "years" + "'", str32, "years");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("292278993-02-08T09:44:46.981", (double) 812L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=812.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(14);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusSeconds(38168736);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        int int27 = localDateTime25.getYear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.year();
        int int42 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withWeekyear((int) (byte) -1);
        boolean boolean55 = localDateTime51.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) (short) 1);
        boolean boolean62 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        int int69 = localDateTime51.indexOf(dateTimeFieldType68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime33.property(dateTimeFieldType68);
        int int71 = localDateTime25.get(dateTimeFieldType68);
        boolean boolean72 = localDateTime12.isSupported(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime6.withField(dateTimeFieldType68, 51);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withCenturyOfEra((int) (short) 1);
        boolean boolean81 = localDateTime77.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withWeekOfWeekyear((int) (short) 10);
        int int84 = localDateTime80.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime88 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.withCenturyOfEra((int) (short) 1);
        boolean boolean91 = localDateTime87.isBefore((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime90.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withWeekyear((int) (byte) -1);
        boolean boolean96 = localDateTime80.isBefore((org.joda.time.ReadablePartial) localDateTime95);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime74.withFields((org.joda.time.ReadablePartial) localDateTime95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime99 = localDateTime74.withSecondOfMinute(35111756);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35111756 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 122 + "'", int27 == 122);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 122 + "'", int71 == 122);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 44 + "'", int84 == 44);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.lang.String str8 = nameProvider0.getShortName(locale4, "38229748", "2022-02-13T13:44:07.018");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale11.getDisplayVariant(locale12);
        java.lang.String str15 = locale11.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = locale16.getCountry();
        java.util.Locale locale19 = locale16.stripExtensions();
        java.lang.String str20 = locale11.getDisplayVariant(locale19);
        java.lang.String str21 = locale10.getDisplayLanguage(locale19);
        java.util.Locale.Builder builder22 = builder9.setLocale(locale10);
        java.util.Locale.Builder builder25 = builder22.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale locale27 = builder25.build();
        java.util.Locale locale28 = builder25.build();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.String str37 = locale35.getCountry();
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale30.getDisplayVariant(locale38);
        java.lang.String str40 = locale29.getDisplayLanguage(locale38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale41.getDisplayVariant(locale42);
        java.lang.String str45 = locale42.getLanguage();
        java.lang.String str46 = locale29.getDisplayName(locale42);
        java.util.Locale.Builder builder47 = builder25.setLocale(locale42);
        java.lang.String str50 = nameProvider0.getShortName(locale42, "2022-02-13T10:38:45.614", "");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587" + "'", str21, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str46, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        long long4 = dateTimeZone0.convertLocalToUTC((long) ' ', false);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYearOfEra(49575008);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-187199968L) + "'", long4 == (-187199968L));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 42);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = dateTimeZone2.getShortName((long) 56, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        boolean boolean12 = timeZone8.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean14 = timeZone11.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfEra();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMaximumValue();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        java.lang.String str26 = property25.getAsString();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField28 = property25.getField();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = property25.getAsText(locale29);
        int int31 = property21.getMaximumShortTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime32 = property21.withMinimumValue();
        java.util.Date date33 = localDateTime32.toDate();
        boolean boolean34 = timeZone11.inDaylightTime(date33);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:10" + "'", str7, "+97:10");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Wed Jan 02 13:48:10 GMT+:0:00 292278993");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        long long15 = durationField10.getMillis(49435789);
        long long18 = durationField10.getValueAsLong((long) 2022, (long) 100);
        java.lang.String str19 = durationField10.getName();
        long long20 = durationField10.getUnitMillis();
        long long23 = durationField10.subtract((long) 14, 49465330);
        long long25 = durationField10.getMillis((int) ' ');
        long long28 = durationField10.getDifferenceAsLong(9223371988911963583L, (long) 656);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1560042820555128000L + "'", long15 == 1560042820555128000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 31556952000L + "'", long20 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1560975044515199986L) + "'", long23 == (-1560975044515199986L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1009822464000L + "'", long25 == 1009822464000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 292277023L + "'", long28 == 292277023L);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology3);
        int int6 = localDateTime5.getEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes(508);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusHours(1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) (short) 0);
        int int17 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime8.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withPeriodAdded(readablePeriod29, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withWeekOfWeekyear((int) (short) 10);
        int int44 = localDateTime43.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = property45.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        int int53 = localDateTime52.getYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        boolean boolean59 = dateTimeZone55.isLocalDateTimeGap(localDateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long63 = dateTimeZone61.convertUTCToLocal(0L);
        long long65 = dateTimeZone55.getMillisKeepLocal(dateTimeZone61, 1L);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime52, dateTimeZone55);
        boolean boolean67 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        boolean boolean68 = localDateTime34.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        boolean boolean69 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime70 = localDateTime31.toDateTime();
        org.joda.time.ReadableInstant readableInstant71 = null;
        boolean boolean72 = dateTime70.isEqual(readableInstant71);
        int int73 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime19.getZone();
        long long76 = dateTimeZone74.convertUTCToLocal((-137669964L));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 187200000L + "'", long63 == 187200000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 49530036L + "'", long76 == 49530036L);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale5.getDisplayVariant(locale6);
        java.lang.String str9 = locale4.getDisplayLanguage(locale5);
        java.lang.String str10 = locale4.getVariant();
        java.lang.String str11 = locale4.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder3.addUnicodeLocaleAttribute("0100-03-01T19:48:02.203");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0100-03-01T19:48:02.203 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = dateTimeZone9.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long17 = dateTimeZone15.convertUTCToLocal(0L);
        long long19 = dateTimeZone9.getMillisKeepLocal(dateTimeZone15, 1L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        int int29 = localDateTime25.getDayOfYear();
        boolean boolean30 = dateTimeZone15.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusMinutes(4);
        int int33 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime5.yearOfCentury();
        long long36 = property35.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = property35.setCopy(145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 145 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 187200000L + "'", long17 == 187200000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 44 + "'", int29 == 44);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3505690596L + "'", long36 == 3505690596L);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.DateTimeField dateTimeField14 = property10.getField();
        int int15 = property10.get();
        org.joda.time.LocalDateTime localDateTime16 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(49494192);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMinuteOfHour(767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 767 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922789 + "'", int11 == 2922789);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("UTC");
        java.lang.String str12 = property3.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.lang.String str14 = locale11.getDisplayLanguage(locale13);
        java.lang.String str15 = locale11.getDisplayVariant();
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "utc");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "utc" + "'", str14, "utc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime36 = property10.setCopy(24);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = property41.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readableDuration49);
        boolean boolean51 = property41.equals((java.lang.Object) localDateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minus(readablePeriod52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMinutes(12);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.weekyear();
        int int57 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = property10.roundHalfEvenCopy();
        int int59 = property10.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime61 = property10.addToCopy(38156753);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        int int65 = localDateTime62.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.plusDays((int) (byte) 1);
        java.lang.String str70 = localDateTime69.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray71 = localDateTime69.getFields();
        org.joda.time.DateTime dateTime72 = localDateTime69.toDateTime();
        org.joda.time.DateTime dateTime73 = localDateTime61.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.yearOfEra();
        java.lang.String str78 = property77.getAsString();
        org.joda.time.LocalDateTime localDateTime79 = property77.withMaximumValue();
        int[] intArray80 = localDateTime79.getValues();
        int int81 = localDateTime79.getDayOfMonth();
        int int82 = localDateTime79.getMillisOfSecond();
        int int83 = localDateTime79.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray84 = localDateTime79.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(dateTimeZone85);
        boolean boolean88 = dateTimeZone85.isStandardOffset(35035170L);
        int int90 = dateTimeZone85.getOffsetFromLocal((long) 390);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(dateTimeZone85);
        org.joda.time.DateTime dateTime92 = localDateTime79.toDateTime(dateTimeZone85);
        boolean boolean93 = dateTime72.isAfter((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Instant instant94 = dateTime92.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-14T13:48:10.813" + "'", str70, "2022-02-14T13:48:10.813");
        org.junit.Assert.assertNotNull(dateTimeFieldArray71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022" + "'", str78, "2022");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[292278993, 2, 13, 49690813]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 13 + "'", int81 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 813 + "'", int82 == 813);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(instant94);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-187199645L));
        int int2 = localDateTime1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withHourOfDay(49446508);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49446508 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale2.getVariant();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.lang.String str20 = localDateTime13.toString("2022", locale18);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale18.getDisplayCountry(locale21);
        java.util.Set<java.lang.String> strSet23 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale2.getDisplayName(locale18);
        java.lang.String str25 = locale0.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet26 = locale2.getUnicodeLocaleKeys();
        java.lang.String str27 = locale2.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "chinois" + "'", str27, "chinois");
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusMillis(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime17.withMillisOfDay(49469409);
        int int29 = localDateTime17.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(44);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra(49485493);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime5.minusMonths(563);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime5.withWeekOfWeekyear(4);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField59 = property56.getField();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.yearOfEra();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minus(readableDuration68);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (short) 1);
        boolean boolean76 = localDateTime72.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withWeekOfWeekyear((int) (short) 10);
        int int79 = localDateTime78.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime82 = property80.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = localDateTime69.toDateTime(readableInstant83);
        long long86 = dateTime85.getMillis();
        long long87 = property56.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        java.util.Locale locale91 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str92 = property56.getAsShortText(locale91);
        java.lang.String str93 = locale52.getDisplayCountry(locale91);
        java.util.Locale locale94 = locale52.stripExtensions();
        java.lang.String str95 = locale52.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = localDateTime50.toString("-21234-06-12T13:44:15.401", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 9223371988912091129L + "'", long86 == 9223371988912091129L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-292276970L) + "'", long87 == (-292276970L));
        org.junit.Assert.assertEquals(locale91.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022" + "'", str92, "2022");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "en");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        int int24 = dateTimeZone7.getOffset((long) (byte) 100);
        int int26 = dateTimeZone7.getOffset(9223371988911837281L);
        long long28 = dateTimeZone7.previousTransition((long) 4);
        java.util.TimeZone timeZone29 = dateTimeZone7.toTimeZone();
        java.util.Locale locale32 = new java.util.Locale("0117-02-13T13:46:40.539", "0122-02-13T13:44:13.019");
        java.lang.String str33 = timeZone29.getDisplayName(locale32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 187200000 + "'", int24 == 187200000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 187200000 + "'", int26 == 187200000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4L + "'", long28 == 4L);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals(locale32.toString(), "0117-02-13t13:46:40.539_0122-02-13T13:44:13.019");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Greenwich Mean Time" + "'", str33, "Greenwich Mean Time");
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long16 = durationField10.subtract((long) 49465330, 13666105);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-431260619422534670L) + "'", long16 == (-431260619422534670L));
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.getAsText();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = property3.getAsShortText(locale7);
        boolean boolean9 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime10 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 936);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusDays(46);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("ko-KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ko-KR\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = durationField10.getType();
        long long15 = durationField10.getMillis(3, (long) 10);
        java.lang.String str16 = durationField10.toString();
        int int18 = durationField10.getValue((long) 17);
        int int21 = durationField10.getDifference(9223371988911840773L, 9223371988911855892L);
        boolean boolean22 = durationField10.isSupported();
        long long25 = durationField10.getValueAsLong((long) 115, (long) 167);
        java.lang.String str26 = durationField10.getName();
        long long29 = durationField10.add((long) 483, 49558467);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 94694400000L + "'", long15 == 94694400000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DurationField[years]" + "'", str16, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "years" + "'", str26, "years");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1563914164377600483L + "'", long29 == 1563914164377600483L);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.lang.String str7 = locale3.getDisplayScript();
        java.lang.String str8 = dateTimeZone1.getShortName((long) 49453563, locale3);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 38199781);
        java.lang.String str11 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+426:00" + "'", str8, "+426:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+426:00" + "'", str11, "+426:00");
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2042-02-13T13:45:21.152");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2042-02-13t13:45:21.152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(808);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("cinese");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("+00:00:00.032");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: +00:00:00.032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "cinese");
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("CHN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setRegion("292278993-02-13t13:44:30.911");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 292278993-02-13t13:44:30.911 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(22);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = dateTimeZone20.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long28 = dateTimeZone26.convertUTCToLocal(0L);
        long long30 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, 1L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        int int40 = localDateTime36.getDayOfYear();
        boolean boolean41 = dateTimeZone26.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.plusMinutes(4);
        int int44 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        int int46 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minusDays(347);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 44 + "'", int40 == 44);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int[] intArray9 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.yearOfCentury();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property10.getLocalDateTime();
        java.lang.String str13 = property10.getName();
        org.joda.time.LocalDateTime localDateTime15 = property10.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(49484411);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        java.lang.String str19 = property18.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[122, 2, 13, 49691586]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22" + "'", str11, "22");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfCentury" + "'", str13, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withPeriodAdded(readablePeriod6, 2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(4);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusHours((int) (short) 100);
        boolean boolean25 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusMinutes(171);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.minusMinutes(189);
        boolean boolean30 = localDateTime10.equals((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime10.minusHours(49500521);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        boolean boolean7 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 1);
        int int14 = localDateTime11.getMillisOfSecond();
        int int15 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        int int25 = localDateTime24.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        int int40 = localDateTime39.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        int int46 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 49466800, chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYearOfCentury(688);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 688 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 623 + "'", int14 == 623);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 49691623 + "'", int15 == 49691623);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(9223371988911910689L);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("-21112-03-06T13:47:00.000", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-21112-03-06t13:47:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 49590296);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        int int32 = localDateTime31.getYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = dateTimeZone34.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone40.convertUTCToLocal(0L);
        long long44 = dateTimeZone34.getMillisKeepLocal(dateTimeZone40, 1L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, dateTimeZone34);
        boolean boolean46 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean47 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        boolean boolean48 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime10.minus(readableDuration49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localDateTime10.toString("2022-02-12T09:46:00.960");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 187200000L + "'", long42 == 187200000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology7 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusHours(187200000);
        int[] intArray10 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        boolean boolean25 = localDateTime9.isSupported(dateTimeFieldType24);
        int int26 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.dayOfWeek();
        java.lang.String str35 = property34.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime9.withField(dateTimeFieldType36, 368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 368 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-21234, 6, 10, 38411787]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2922789 + "'", int33 == 2922789);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dayOfWeek" + "'", str35, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long15 = durationField10.getValueAsLong(3629049480000L);
        java.lang.String str16 = durationField10.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115L + "'", long15 == 115L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DurationField[years]" + "'", str16, "DurationField[years]");
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(9223371988911865675L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(49507404);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeField dateTimeField12 = localDateTime9.getField(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.era();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = dateTimeZone15.isLocalDateTimeGap(localDateTime18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear((int) (byte) -1);
        boolean boolean32 = localDateTime28.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        boolean boolean39 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDateTime43.getFieldType((int) (short) 0);
        int int46 = localDateTime28.indexOf(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime18.withField(dateTimeFieldType45, (int) ' ');
        boolean boolean49 = localDateTime9.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property50 = localDateTime9.yearOfEra();
        org.joda.time.DurationField durationField51 = property50.getRangeDurationField();
        java.lang.String str52 = property50.getName();
        org.joda.time.LocalDateTime localDateTime53 = property50.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfDay(49515435);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plusSeconds(38247199);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.yearOfEra();
        java.lang.String str62 = property61.getAsString();
        int int63 = property61.getMinimumValueOverall();
        java.lang.String str64 = property61.toString();
        org.joda.time.LocalDateTime localDateTime65 = property61.getLocalDateTime();
        java.lang.String str66 = property61.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property61.getFieldType();
        org.joda.time.DurationField durationField68 = property61.getDurationField();
        java.lang.String str69 = durationField68.toString();
        org.joda.time.DurationFieldType durationFieldType70 = durationField68.getType();
        long long73 = durationField68.getMillis(3, (long) 10);
        java.lang.String str74 = durationField68.toString();
        int int76 = durationField68.getValue((long) 17);
        int int79 = durationField68.getDifference(9223371988911840773L, 9223371988911855892L);
        org.joda.time.DurationFieldType durationFieldType80 = durationField68.getType();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime53.withFieldAdded(durationFieldType80, 0);
        boolean boolean83 = localDateTime3.isSupported(durationFieldType80);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "yearOfEra" + "'", str52, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022" + "'", str62, "2022");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Property[yearOfEra]" + "'", str64, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DurationField[years]" + "'", str69, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 94694400000L + "'", long73 == 94694400000L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DurationField[years]" + "'", str74, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime18.getFieldType((int) (short) 0);
        boolean boolean21 = localDateTime5.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime5.dayOfMonth();
        int int23 = property22.getLeapAmount();
        java.lang.String str24 = property22.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withHourOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusWeeks(319);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0122-02-11T10:38:53.179", (double) 49559552);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.9559552E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.Locale locale8 = new java.util.Locale("GMT", "\u82f1\u6587");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = dateTimeZone1.getShortName(9223371988911941643L, locale8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.032" + "'", str10, "+00:00:00.032");
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        java.util.Locale locale3 = new java.util.Locale("de", "292278993-02-10T13:44:36.861+52:00", "-21234-06-12T13:44:15.401");
        java.lang.String str4 = locale3.getDisplayVariant();
        boolean boolean6 = locale3.equals((java.lang.Object) 9223371988911961084L);
        org.junit.Assert.assertEquals(locale3.toString(), "de_292278993-02-10T13:44:36.861+52:00_-21234-06-12T13:44:15.401");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-21234-06-12T13:44:15.401" + "'", str4, "-21234-06-12T13:44:15.401");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long10 = dateTimeZone8.convertUTCToLocal(0L);
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, 1L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        java.lang.String str18 = dateTimeZone8.getShortName((long) 511);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 187200000L, dateTimeZone8);
        java.util.TimeZone timeZone20 = dateTimeZone8.toTimeZone();
        java.util.TimeZone.setDefault(timeZone20);
        java.lang.String str22 = timeZone20.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT" + "'", str22, "GMT");
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setRawOffset(1);
        java.lang.String str4 = timeZone0.getID();
        java.lang.String str5 = timeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        timeZone0.setRawOffset(38287805);
        java.lang.String str11 = timeZone0.getDisplayName(false, 0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT" + "'", str11, "GMT");
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = localDateTime3.toString("2022", locale8);
        java.util.Locale locale12 = new java.util.Locale("2022");
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getScript();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale8, locale12, locale13, locale15, locale16, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str39 = localDateTime32.toString("2022", locale37);
        java.util.Locale locale41 = new java.util.Locale("2022");
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getScript();
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale37, locale41, locale42, locale44, locale45, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet53);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.lang.String str66 = localDateTime59.toString("2022", locale64);
        java.util.Locale locale68 = new java.util.Locale("2022");
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getScript();
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale64, locale68, locale69, locale71, locale72, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap82);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale locale86 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleKeys();
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList85, (java.util.Collection<java.lang.String>) strSet87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet87);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertEquals(locale12.toString(), "2022");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode22.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertEquals(locale41.toString(), "2022");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertEquals(locale68.toString(), "2022");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfDay();
        int int13 = property12.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-13T13:47:14.995", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        int int32 = localDateTime31.getYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = dateTimeZone34.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone40.convertUTCToLocal(0L);
        long long44 = dateTimeZone34.getMillisKeepLocal(dateTimeZone40, 1L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, dateTimeZone34);
        boolean boolean46 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean47 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        boolean boolean48 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime10.minus(readableDuration49);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = localDateTime50.getFields();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfDay(49485493);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        java.lang.String str56 = property55.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 187200000L + "'", long42 == 187200000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[millisOfDay]" + "'", str56, "Property[millisOfDay]");
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        charSet2.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = charSet2.contains(obj4);
        boolean boolean6 = charSet2.isEmpty();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream9 = charSet8.parallelStream();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getScript();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        boolean boolean13 = charSet8.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        boolean boolean14 = charSet2.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Set<java.lang.Character> charSet17 = locale15.getExtensionKeys();
        charSet17.clear();
        java.lang.Object obj19 = null;
        boolean boolean20 = charSet17.contains(obj19);
        boolean boolean21 = charSet17.isEmpty();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream24 = charSet23.parallelStream();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getScript();
        java.util.Set<java.lang.Character> charSet27 = locale25.getExtensionKeys();
        boolean boolean28 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet27);
        boolean boolean29 = charSet17.containsAll((java.util.Collection<java.lang.Character>) charSet27);
        boolean boolean30 = charSet2.addAll((java.util.Collection<java.lang.Character>) charSet27);
        java.util.Iterator<java.lang.Character> charItor31 = charSet27.iterator();
        java.util.stream.Stream<java.lang.Character> charStream32 = charSet27.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(charStream9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charItor31);
        org.junit.Assert.assertNotNull(charStream32);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(49661812);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-01-01T00:00:00.000+00:52");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-01t00:00:00.000+00:52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = locale5.getCountry();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.lang.String str10 = locale0.getVariant();
        boolean boolean11 = locale0.hasExtensions();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale12.getDisplayLanguage(locale14);
        java.lang.String str19 = locale14.getDisplayScript();
        java.lang.String str20 = locale14.getCountry();
        java.lang.String str21 = locale14.getDisplayVariant();
        java.lang.String str22 = locale0.getDisplayCountry(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u82f1\u6587" + "'", str18, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(286);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime(readableInstant28);
        long long31 = property3.getDifferenceAsLong(readableInstant28);
        long long32 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime34 = property3.setCopy(187200122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime34.getFieldType(915);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 915");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3764892289L + "'", long32 == 3764892289L);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayVariant(locale11);
        java.lang.String str14 = locale10.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale10.getDisplayVariant(locale18);
        java.lang.String str20 = locale9.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder21 = builder8.setLocale(locale9);
        boolean boolean22 = localDateTime5.equals((java.lang.Object) builder8);
        java.util.Locale.Builder builder23 = builder8.clear();
        java.util.Locale locale24 = builder8.build();
        java.util.Locale.Builder builder26 = builder8.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder8.setLanguageTag("2022-02-11T19:31:19.868");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        java.util.Locale locale3 = new java.util.Locale("\u4e8c\u6708", "0122-02-11T10:37:44.823", "0122-02-11T10:37:44.823");
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e8c\u6708_0122-02-11T10:37:44.823_0122-02-11T10:37:44.823");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e8c\u6708" + "'", str4, "\u4e8c\u6708");
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime8 = property4.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readableDuration18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = localDateTime19.toDateTime(readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = dateTimeZone37.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        boolean boolean48 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withWeekyear((int) (byte) -1);
        boolean boolean54 = localDateTime50.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType((int) (short) 0);
        int int68 = localDateTime50.indexOf(dateTimeFieldType67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime40.withField(dateTimeFieldType67, (int) ' ');
        boolean boolean71 = dateTime35.isSupported(dateTimeFieldType67);
        int int72 = localDateTime11.indexOf(dateTimeFieldType67);
        int int73 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime11.minusDays(49522885);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime11.plus(readablePeriod76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.dayOfWeek();
        long long79 = property78.remainder();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 49692353L + "'", long79 == 49692353L);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) 10);
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(35114213, 302, 46830811, 38306381, 723, 666, 655, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38306381 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 42);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = dateTimeZone2.getShortName((long) 56, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        boolean boolean12 = timeZone8.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean14 = timeZone11.observesDaylightTime();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = timeZone11.getDisplayName(locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:10" + "'", str7, "+97:10");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        boolean boolean19 = locale18.hasExtensions();
        java.lang.Object obj20 = locale18.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "zh_TW");
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        int int5 = localDateTime4.getYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long15 = dateTimeZone13.convertUTCToLocal(0L);
        long long17 = dateTimeZone7.getMillisKeepLocal(dateTimeZone13, 1L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone7);
        int int19 = localDateTime18.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks(35144215);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 187200000L + "'", long15 == 187200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(49690993);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getScript();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str12 = localDateTime5.toString("2022", locale10);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale14.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMillis(8);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusHours((-3600000));
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYearOfEra(167);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        java.lang.String str13 = dateTimeZone7.getNameKey((-187199989L));
        java.lang.String str14 = dateTimeZone7.toString();
        java.lang.String str15 = dateTimeZone7.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        timeZone16.setRawOffset(1);
        boolean boolean19 = timeZone16.observesDaylightTime();
        timeZone16.setRawOffset(42);
        boolean boolean22 = timeZone16.observesDaylightTime();
        java.time.ZoneId zoneId23 = timeZone16.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale1.getDisplayVariant(locale9);
        java.lang.String str11 = locale0.getDisplayLanguage(locale9);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        int int25 = localDateTime24.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        int int34 = localDateTime33.getYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = dateTimeZone36.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long44 = dateTimeZone42.convertUTCToLocal(0L);
        long long46 = dateTimeZone36.getMillisKeepLocal(dateTimeZone42, 1L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime33, dateTimeZone36);
        boolean boolean48 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        boolean boolean49 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean50 = charSet12.equals((java.lang.Object) localDateTime15);
        int int51 = localDateTime15.getEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 187200000L + "'", long44 == 187200000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusWeeks(42);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusHours(397);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = property23.compareTo(readablePartial24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        timeZone16.setRawOffset(1);
        java.lang.String str19 = timeZone16.getID();
        java.time.ZoneId zoneId20 = timeZone16.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone(zoneId20);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone(zoneId20);
        int int24 = timeZone23.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((long) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(22);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = dateTimeZone20.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long28 = dateTimeZone26.convertUTCToLocal(0L);
        long long30 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, 1L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        int int40 = localDateTime36.getDayOfYear();
        boolean boolean41 = dateTimeZone26.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.plusMinutes(4);
        int int44 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        int int46 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime8.minusMillis(49524018);
        int int49 = localDateTime8.getCenturyOfEra();
        int int50 = localDateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 44 + "'", int40 == 44);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 13 + "'", int50 == 13);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.lang.String str7 = locale3.getDisplayScript();
        java.lang.String str8 = dateTimeZone1.getShortName((long) 49453563, locale3);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 38199781);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = localDateTime12.toString("2022", locale17);
        java.lang.String str20 = locale17.getISO3Country();
        java.lang.String str22 = locale17.getExtension('u');
        java.lang.String str23 = locale17.getCountry();
        java.util.Locale locale24 = locale17.stripExtensions();
        java.lang.String str25 = dateTimeZone1.getShortName((-187199284L), locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+426:00" + "'", str8, "+426:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+426:00" + "'", str25, "+426:00");
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.toString();
        org.joda.time.LocalDateTime localDateTime21 = property17.getLocalDateTime();
        java.lang.String str22 = property17.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property17.getFieldType();
        org.joda.time.DurationField durationField24 = property17.getDurationField();
        java.lang.String str25 = durationField24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = durationField24.getType();
        int int27 = durationField10.compareTo(durationField24);
        int int30 = durationField24.getDifference((-92234312150400000L), (long) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        java.lang.String str35 = property34.getAsString();
        int int36 = property34.getMinimumValueOverall();
        java.lang.String str37 = property34.toString();
        org.joda.time.LocalDateTime localDateTime38 = property34.getLocalDateTime();
        java.lang.String str39 = property34.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property34.getFieldType();
        org.joda.time.DurationField durationField41 = property34.getDurationField();
        long long44 = durationField41.getMillis((long) (byte) -1, 9223371988911839815L);
        java.lang.String str45 = durationField41.toString();
        int int48 = durationField41.getValue((long) ' ', 94694400000L);
        int int49 = durationField24.compareTo(durationField41);
        long long52 = durationField41.getValueAsLong((long) 154, 0L);
        long long54 = durationField41.getValueAsLong(599428800000L);
        long long57 = durationField41.getMillis((long) 865, (long) 38272815);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[years]" + "'", str25, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2922789) + "'", int30 == (-2922789));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[yearOfEra]" + "'", str37, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-31622400000L) + "'", long44 == (-31622400000L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DurationField[years]" + "'", str45, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 18L + "'", long54 == 18L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 27296784000000L + "'", long57 == 27296784000000L);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        boolean boolean5 = localDateTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minusDays(199);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        int int15 = localDateTime13.getValue(3);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusWeeks(511);
        int int18 = localDateTime13.size();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMillis((int) (short) 0);
        int int23 = localDateTime20.size();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        boolean boolean30 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeField dateTimeField32 = localDateTime29.getField(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.era();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        boolean boolean39 = dateTimeZone35.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withWeekyear((int) (byte) -1);
        boolean boolean52 = localDateTime48.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        boolean boolean59 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = localDateTime63.getFieldType((int) (short) 0);
        int int66 = localDateTime48.indexOf(dateTimeFieldType65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime38.withField(dateTimeFieldType65, (int) ' ');
        boolean boolean69 = localDateTime29.isSupported(dateTimeFieldType65);
        int int70 = localDateTime20.get(dateTimeFieldType65);
        int int71 = localDateTime13.get(dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property72 = localDateTime0.property(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 49692827 + "'", int15 == 49692827);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.lang.String str24 = locale20.getDisplayCountry();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = locale25.getCountry();
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale20.getDisplayVariant(locale28);
        java.lang.String str30 = locale19.getDisplayLanguage(locale28);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale31.getDisplayVariant(locale32);
        java.lang.String str35 = locale32.getLanguage();
        java.lang.String str36 = locale19.getDisplayName(locale32);
        java.lang.String str37 = locale32.getDisplayCountry();
        java.lang.String str38 = locale32.getScript();
        java.util.Locale.Builder builder39 = builder16.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder16.setScript("2022-02-11T09:48:08.334");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:48:08.334 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str36, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(650);
        org.joda.time.LocalDateTime localDateTime19 = property15.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        boolean boolean24 = property23.isLeap();
        org.joda.time.LocalDateTime localDateTime25 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property30.withMaximumValue();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusDays(349800000);
        boolean boolean36 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.plusSeconds(38170779);
        boolean boolean40 = dateTimeZone7.isLocalDateTimeGap(localDateTime26);
        long long42 = dateTimeZone7.nextTransition((long) 49512725);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        java.lang.String str47 = property46.getAsString();
        org.joda.time.LocalDateTime localDateTime48 = property46.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = property46.getAsText(locale50);
        java.lang.String str52 = locale50.getISO3Country();
        java.lang.String str53 = locale50.getLanguage();
        java.lang.String str54 = locale50.toLanguageTag();
        java.util.Locale locale55 = locale50.stripExtensions();
        java.util.Locale locale56 = locale50.stripExtensions();
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = dateTimeZone7.equals((java.lang.Object) strSet57);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 49512725L + "'", long42 == 49512725L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("0122-02-11T10:37:53.499");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((-1511184139));
        int int4 = localDateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getID();
        java.lang.String str6 = dateTimeZone1.getShortName((long) 331);
        boolean boolean7 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+52:00" + "'", str6, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2021-12-31T21:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2021-12-31t21:00:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withCenturyOfEra(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime18.getFieldType(390);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 390");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        int int34 = localDateTime33.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        int int49 = localDateTime48.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        int int55 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        boolean boolean63 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekOfWeekyear((int) (short) 10);
        int int66 = localDateTime65.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = property67.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) (short) 1);
        boolean boolean78 = localDateTime74.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withWeekOfWeekyear((int) (short) 10);
        int int81 = localDateTime80.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime(readableInstant85);
        int int87 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime89 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime90 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        long long91 = dateTime90.getMillis();
        org.joda.time.DateTimeZone dateTimeZone94 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        boolean boolean96 = dateTimeZone94.isStandardOffset((long) 42);
        java.lang.String str97 = dateTimeZone94.getID();
        boolean boolean98 = dateTime90.equals((java.lang.Object) str97);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-59007881506961L) + "'", long91 == (-59007881506961L));
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+97:10" + "'", str97, "+97:10");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.lang.String str8 = nameProvider0.getShortName(locale2, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str14 = nameProvider0.getShortName(locale9, "0122-02-13T13:44:36.449+52:00", "");
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = nameProvider15.getShortName(locale16, "292278993-02-13T13:44:13.431", "2022-01-01T00:00:00.000");
        java.util.Locale locale22 = new java.util.Locale("0122-03-04T09:44:03.055Z");
        java.lang.String str25 = nameProvider15.getShortName(locale22, "0122-02-13T13:44:36.449+52:00", "0122-03-06T13:44:27.517+52:00");
        java.lang.String str28 = nameProvider0.getShortName(locale22, "0122-03-04T10:37:25.676+00:52", "0122-02-11T10:36:09.311");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.clearExtensions();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        java.lang.String str36 = property35.getAsString();
        int int37 = property35.getMinimumValueOverall();
        java.lang.String str38 = property35.toString();
        org.joda.time.LocalDateTime localDateTime39 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = property35.withMaximumValue();
        int int41 = localDateTime40.getCenturyOfEra();
        int int42 = localDateTime40.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        boolean boolean50 = dateTimeZone46.isLocalDateTimeGap(localDateTime49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long54 = dateTimeZone52.convertUTCToLocal(0L);
        long long56 = dateTimeZone46.getMillisKeepLocal(dateTimeZone52, 1L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        boolean boolean63 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekOfWeekyear((int) (short) 10);
        int int66 = localDateTime62.getDayOfYear();
        boolean boolean67 = dateTimeZone52.isLocalDateTimeGap(localDateTime62);
        int int69 = dateTimeZone52.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.DateTime dateTime71 = localDateTime44.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime72 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int76 = dateTimeZone74.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.yearOfEra();
        java.lang.String str82 = property81.getAsString();
        org.joda.time.LocalDateTime localDateTime83 = property81.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField84 = property81.getField();
        java.util.Locale locale85 = java.util.Locale.CHINESE;
        java.lang.String str86 = property81.getAsText(locale85);
        java.lang.String str87 = dateTimeZone74.getShortName((long) (byte) 1, locale85);
        java.lang.String str88 = locale85.getDisplayCountry();
        boolean boolean89 = dateTime71.equals((java.lang.Object) locale85);
        java.util.Locale.Builder builder90 = builder31.setLocale(locale85);
        java.lang.String str93 = nameProvider0.getName(locale85, "0122-02-13T13:45:39.016", "-21234-06-12T13:44:15.401");
        java.util.Locale locale95 = new java.util.Locale("292278993-02-13T13:44:25.959");
        java.lang.String str98 = nameProvider0.getShortName(locale95, "0122-03-06T13:46:23.251+52:00", "2022-02-02T03:09:24.485");
        java.lang.String str99 = locale95.toLanguageTag();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u6cd5\u6587" + "'", str4, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str11, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(locale22.toString(), "0122-03-04t09:44:03.055z");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[yearOfEra]" + "'", str38, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2922789 + "'", int41 == 2922789);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 187200000L + "'", long54 == 187200000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 44 + "'", int66 == 44);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 187200000 + "'", int69 == 187200000);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022" + "'", str82, "2022");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.100" + "'", str87, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals(locale95.toString(), "292278993-02-13t13:44:25.959");
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "und" + "'", str99, "und");
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        java.util.Locale locale2 = new java.util.Locale("292278993", "0122-02-13T13:46:00.371");
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        boolean boolean9 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withWeekOfWeekyear((int) (short) 10);
        int int12 = localDateTime11.size();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.DurationField durationField15 = property14.getDurationField();
        java.lang.String str16 = durationField15.toString();
        long long18 = durationField15.getValueAsLong((long) 49511426);
        boolean boolean19 = locale2.equals((java.lang.Object) long18);
        org.junit.Assert.assertEquals(locale2.toString(), "292278993_0122-02-13T13:46:00.371");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DurationField[years]" + "'", str16, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        int int30 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        int int34 = localDateTime31.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        boolean boolean46 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) (short) 1);
        boolean boolean57 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withWeekOfWeekyear((int) (short) 10);
        int int60 = localDateTime59.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra((int) (short) 1);
        boolean boolean72 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withWeekOfWeekyear((int) (short) 10);
        int int75 = localDateTime74.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = property76.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        int int81 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = localDateTime48.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        int int83 = property39.compareTo((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = dateTime14.equals((java.lang.Object) int83);
        org.joda.time.DateTimeZone dateTimeZone85 = dateTime14.getZone();
        org.joda.time.Instant instant86 = dateTime14.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("0117-02-13T13:48:02.318");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears(292278993);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDateTime7.toString("0117-02-13T13:45:54.855");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.lang.String str20 = localDateTime13.toString("2022", locale18);
        java.util.Locale locale22 = new java.util.Locale("2022");
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getScript();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale18, locale22, locale23, locale25, locale26, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet34);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.lang.String str47 = localDateTime40.toString("2022", locale45);
        java.util.Locale locale49 = new java.util.Locale("2022");
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale45, locale49, locale50, locale52, locale53, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        java.lang.String str73 = localDateTime66.toString("2022", locale71);
        java.util.Locale locale75 = new java.util.Locale("2022");
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getScript();
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet80 = locale79.getExtensionKeys();
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale71, locale75, locale76, locale78, locale79, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList86);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertEquals(locale22.toString(), "2022");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertEquals(locale49.toString(), "2022");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertEquals(locale75.toString(), "2022");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode85.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.subtract(0L, 2922789);
        boolean boolean14 = durationField10.isSupported();
        long long17 = durationField10.getMillis(38170779, (long) 35);
        long long20 = durationField10.add((-59007881711179L), (long) 390);
        boolean boolean21 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-92234312150400000L) + "'", long13 == (-92234312150400000L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1204553440713600000L + "'", long17 == 1204553440713600000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-46700633711179L) + "'", long20 == (-46700633711179L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(38287805);
        long long4 = dateTimeZone1.adjustOffset((long) 35035070, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 35035070L + "'", long4 == 35035070L);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusWeeks(42);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusWeeks(573);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusDays(49457119);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withCenturyOfEra(292278983);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278983 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(readableInstant21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.minusWeeks(49511083);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(698);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(195);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMillis(341);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        int int7 = timeZone3.getRawOffset();
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone3);
        java.lang.String str10 = timeZone3.getID();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        int int28 = localDateTime24.getDayOfYear();
        boolean boolean29 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        int int30 = localDateTime24.getEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        boolean boolean39 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeField dateTimeField41 = localDateTime38.getField(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.era();
        int int43 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        java.lang.String str48 = property47.getAsString();
        int int49 = property47.getMinimumValueOverall();
        java.lang.String str50 = property47.toString();
        org.joda.time.LocalDateTime localDateTime51 = property47.getLocalDateTime();
        java.lang.String str52 = property47.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property47.getFieldType();
        boolean boolean54 = localDateTime38.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime38.monthOfYear();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.lang.String str58 = property55.getAsText(locale56);
        java.lang.String str59 = localDateTime24.toString("292278993", locale56);
        java.lang.String str60 = locale56.getISO3Language();
        java.lang.String str61 = timeZone3.getDisplayName(locale56);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 42 + "'", int28 == 42);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Property[yearOfEra]" + "'", str50, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e8c\u6708" + "'", str58, "\u4e8c\u6708");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278993" + "'", str59, "292278993");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Greenwich Mean Time" + "'", str61, "Greenwich Mean Time");
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime();
        int int15 = localDateTime10.getWeekyear();
        int int16 = localDateTime10.getDayOfMonth();
        int int17 = localDateTime10.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDateTime10.toString("292278993-02-10T13:44:18.515");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withSecondOfMinute((int) (short) 0);
        int int8 = localDateTime6.getValue(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withWeekOfWeekyear((int) (short) 10);
        int int19 = localDateTime15.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear((int) (byte) -1);
        boolean boolean31 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime30.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMaximumValue();
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str48 = localDateTime41.toString("2022", locale46);
        int int49 = property40.getMaximumShortTextLength(locale46);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.lang.String str52 = locale50.getCountry();
        java.lang.String str53 = property40.getAsText(locale50);
        org.joda.time.Interval interval54 = property40.toInterval();
        boolean boolean55 = localDateTime30.equals((java.lang.Object) property40);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str58 = locale56.getDisplayLanguage();
        java.lang.String str59 = property40.getAsShortText(locale56);
        java.util.Locale locale60 = locale56.stripExtensions();
        int int61 = property9.getMaximumShortTextLength(locale56);
        java.util.Set<java.lang.String> strSet62 = locale56.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 42 + "'", int19 == 42);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2922789 + "'", int39 == 2922789);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u661f\u671f\u4e94" + "'", str53, "\u661f\u671f\u4e94");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u82f1\u6587" + "'", str58, "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Fri" + "'", str59, "Fri");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long5 = dateTimeZone1.convertLocalToUTC(0L, false, 0L);
        long long8 = dateTimeZone1.convertLocalToUTC((long) 292278993, true);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) (byte) 1);
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMillis(508);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime24.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.minuteOfHour();
        int int37 = property36.get();
        java.lang.String str38 = property36.getAsShortText();
        org.joda.time.LocalDateTime localDateTime39 = property36.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime40 = property36.roundHalfEvenCopy();
        int int41 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime24.withTime(38156803, 49480009, 2922789, 49625650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38156803 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-187200000L) + "'", long5 == (-187200000L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105078993L + "'", long8 == 105078993L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-0001-03-10T10:40:13.149" + "'", str26, "-0001-03-10T10:40:13.149");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "40" + "'", str38, "40");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        double double2 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        int int6 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withPeriodAdded(readablePeriod9, 2);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = dateTimeZone17.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long25 = dateTimeZone23.convertUTCToLocal(0L);
        long long27 = dateTimeZone17.getMillisKeepLocal(dateTimeZone23, 1L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        boolean boolean34 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withWeekOfWeekyear((int) (short) 10);
        int int37 = localDateTime33.getDayOfYear();
        boolean boolean38 = dateTimeZone23.isLocalDateTimeGap(localDateTime33);
        int int40 = dateTimeZone23.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.DateTime dateTime42 = localDateTime15.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime43 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime3.plusDays(49476657);
        boolean boolean46 = languageRange1.equals((java.lang.Object) localDateTime3);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187200000L + "'", long25 == 187200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 42 + "'", int37 == 42);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 187200000 + "'", int40 == 187200000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(38264676);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear((int) (byte) -1);
        boolean boolean21 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime5.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        int int26 = localDateTime24.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        boolean boolean44 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withWeekOfWeekyear((int) (short) 10);
        int int47 = localDateTime46.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        boolean boolean59 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withWeekOfWeekyear((int) (short) 10);
        int int62 = localDateTime61.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        int int68 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime.Property property70 = localDateTime35.era();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime35.minusYears(38254258);
        int int73 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = localDateTime24.toString("2022-02-02T03:09:24.485");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 44 + "'", int9 == 44);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 49693750 + "'", int22 == 49693750);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        int int13 = dateTimeZone1.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear((int) (byte) -1);
        int[] intArray25 = localDateTime22.getValues();
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        int int28 = localDateTime27.size();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = dateTimeZone38.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long46 = dateTimeZone44.convertUTCToLocal(0L);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone44, 1L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        int int58 = localDateTime54.getDayOfYear();
        boolean boolean59 = dateTimeZone44.isLocalDateTimeGap(localDateTime54);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.plusMinutes(4);
        int int62 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        boolean boolean63 = localDateTime27.isAfter((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime27.minusDays(2);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime27.withWeekyear(46857854);
        boolean boolean68 = dateTimeZone1.isLocalDateTimeGap(localDateTime27);
        java.lang.String str69 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        long long72 = dateTimeZone1.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[122, 3, 6, 49693864]");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 187200000L + "'", long46 == 187200000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 44 + "'", int58 == 44);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+52:00" + "'", str69, "+52:00");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = property8.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getCountry();
        java.lang.String str18 = locale14.getDisplayCountry(locale15);
        int int19 = property8.getMaximumShortTextLength(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        int int13 = property10.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.lang.String str21 = localDateTime14.toString("2022", locale19);
        java.lang.String str22 = property10.getAsText(locale19);
        java.util.Locale locale23 = locale19.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        boolean boolean25 = locale24.hasExtensions();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = property29.getAsText(locale33);
        org.joda.time.LocalDateTime localDateTime35 = property29.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField36 = property29.getField();
        boolean boolean37 = property29.isLeap();
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.lang.String str43 = locale39.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.lang.String str46 = locale44.getCountry();
        java.util.Locale locale47 = locale44.stripExtensions();
        java.lang.String str48 = locale39.getDisplayVariant(locale47);
        java.lang.String str49 = locale38.getDisplayLanguage(locale47);
        java.lang.String str50 = locale38.getDisplayCountry();
        java.lang.String str51 = property29.getAsShortText(locale38);
        java.lang.String str52 = locale24.getDisplayName(locale38);
        java.util.Locale locale56 = new java.util.Locale("de", "292278993-02-10T13:44:36.861+52:00", "-21234-06-12T13:44:15.401");
        java.lang.String str57 = locale38.getDisplayVariant(locale56);
        boolean boolean58 = locale19.equals((java.lang.Object) str57);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10" + "'", str22, "10");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587" + "'", str49, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str50, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587" + "'", str52, "\u4e2d\u6587");
        org.junit.Assert.assertEquals(locale56.toString(), "de_292278993-02-10T13:44:36.861+52:00_-21234-06-12T13:44:15.401");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        boolean boolean12 = localDateTime1.equals((java.lang.Object) localDateTime11);
        int[] intArray13 = localDateTime11.getValues();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.centuryOfEra();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[292278993, 2, 13, 49693991]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        int int13 = durationField10.getValue((long) (-738861));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        int int10 = localDateTime9.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDayOfYear(49461189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49461189 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = timeZone2.getID();
        java.lang.String str4 = timeZone2.getID();
        timeZone2.setID("38229748");
        java.util.TimeZone.setDefault(timeZone2);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone2.getOffset(673, 39, 38169615, 965, 240, 107);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 673");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+Z6:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+426:00" + "'", str3, "+426:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+426:00" + "'", str4, "+426:00");
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime35 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime36 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYear(484);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale.setDefault(category40, locale42);
        java.util.Locale locale45 = java.util.Locale.getDefault(category40);
        java.lang.String str46 = locale45.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = localDateTime38.toString("GMT+09:43", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CN" + "'", str46, "CN");
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime10.toString(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922789 + "'", int11 == 2922789);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "292278993-02-10T13:48:14.258" + "'", str14, "292278993-02-10T13:48:14.258");
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        int int17 = localDateTime16.getDayOfWeek();
        java.lang.String str18 = localDateTime16.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-0001-03-12T13:00:00.000" + "'", str18, "-0001-03-12T13:00:00.000");
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime7.getFields();
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withEra(49469409);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49469409 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-14T13:48:14.302" + "'", str8, "2022-02-14T13:48:14.302");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset(20);
        timeZone0.setID("\u4e2d\u6587");
        boolean boolean5 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getSecondOfMinute();
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusDays(299);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(308);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(49466316);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date19 = localDateTime16.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -665 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14 + "'", int10 == 14);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        int int10 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        java.lang.String str15 = property14.getAsString();
        int int16 = property14.getMinimumValueOverall();
        java.lang.String str17 = property14.toString();
        org.joda.time.LocalDateTime localDateTime18 = property14.getLocalDateTime();
        java.lang.String str19 = property14.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property14.getFieldType();
        boolean boolean21 = localDateTime5.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minusMinutes((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withSecondOfMinute(46836119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46836119 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long15 = durationField10.getValueAsLong(1560042820555128000L);
        long long17 = durationField10.getMillis(20L);
        long long20 = durationField10.getDifferenceAsLong((long) 49446508, (long) 6);
        long long23 = durationField10.getDifferenceAsLong(0L, (-58311843326832L));
        long long25 = durationField10.getValueAsLong(1562327737048024136L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 49435789L + "'", long15 == 49435789L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 631139040000L + "'", long17 == 631139040000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1847L + "'", long23 == 1847L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 49508195L + "'", long25 == 49508195L);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy(9223371988911844393L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9223371988911844393");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getScript();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale19);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.lang.String str25 = locale22.getDisplayScript(locale24);
        java.util.Locale.Builder builder26 = builder21.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder21.setLanguageTag("4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder1.build();
        java.util.Locale locale4 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setLanguageTag("0122-02-13T13:45:50.306");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 0122 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("\u683c\u6797\u5a01\u6cbb\u6642\u9593", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        int int9 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours(451);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear(49583845);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        boolean boolean28 = property18.equals((java.lang.Object) localDateTime27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minus(readablePeriod29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(12);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        java.lang.String str37 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.yearOfEra();
        java.lang.String str43 = property42.getAsString();
        org.joda.time.LocalDateTime localDateTime44 = property42.withMaximumValue();
        boolean boolean45 = property36.equals((java.lang.Object) property42);
        org.joda.time.LocalDateTime localDateTime47 = property42.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(49457693);
        boolean boolean50 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) (short) 1);
        boolean boolean57 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withWeekOfWeekyear((int) (short) 10);
        int int60 = localDateTime59.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra((int) (short) 1);
        boolean boolean72 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withWeekOfWeekyear((int) (short) 10);
        int int75 = localDateTime74.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = property76.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        int int81 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime80);
        java.lang.String str82 = dateTime80.toString();
        org.joda.time.DateTime dateTime83 = localDateTime32.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withCenturyOfEra((int) (short) 1);
        boolean boolean90 = localDateTime86.isBefore((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.DateTimeField dateTimeField92 = localDateTime89.getField(0);
        org.joda.time.LocalDateTime.Property property93 = localDateTime89.era();
        int int94 = localDateTime89.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property95 = localDateTime89.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = property95.getFieldType();
        int int97 = dateTime83.get(dateTimeFieldType96);
        int int98 = localDateTime13.get(dateTimeFieldType96);
        org.joda.time.LocalDateTime.Property property99 = localDateTime13.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0122-03-06T13:48:15.077+52:00" + "'", str82, "0122-03-06T13:48:15.077+52:00");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 7 + "'", int94 == 7);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 15 + "'", int97 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 15 + "'", int98 == 15);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        int int14 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMillis(0);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withPeriodAdded(readablePeriod32, 38158052);
        int int35 = localDateTime34.getWeekyear();
        boolean boolean36 = localDateTime10.equals((java.lang.Object) localDateTime34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime10.plus(readablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        boolean boolean44 = dateTimeZone40.isLocalDateTimeGap(localDateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long48 = dateTimeZone46.convertUTCToLocal(0L);
        long long50 = dateTimeZone40.getMillisKeepLocal(dateTimeZone46, 1L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) (short) 1);
        boolean boolean57 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withWeekOfWeekyear((int) (short) 10);
        int int60 = localDateTime56.getDayOfYear();
        boolean boolean61 = dateTimeZone46.isLocalDateTimeGap(localDateTime56);
        long long65 = dateTimeZone46.convertLocalToUTC(0L, false, (long) (short) 0);
        org.joda.time.DateTime dateTime66 = localDateTime38.toDateTime(dateTimeZone46);
        long long68 = dateTimeZone46.nextTransition((long) 214);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 122 + "'", int35 == 122);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 187200000L + "'", long48 == 187200000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 44 + "'", int60 == 44);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-187200000L) + "'", long65 == (-187200000L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 214L + "'", long68 == 214L);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.lang.Object[] objArray3 = charSet1.toArray();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream6 = charSet5.parallelStream();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getScript();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        boolean boolean10 = charSet5.containsAll((java.util.Collection<java.lang.Character>) charSet9);
        java.util.Spliterator<java.lang.Character> charSpliterator11 = charSet5.spliterator();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream14 = charSet13.parallelStream();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getScript();
        java.util.Set<java.lang.Character> charSet17 = locale15.getExtensionKeys();
        boolean boolean18 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet17);
        boolean boolean20 = charSet13.contains((java.lang.Object) 390);
        boolean boolean21 = charSet5.removeAll((java.util.Collection<java.lang.Character>) charSet13);
        boolean boolean22 = charSet13.isEmpty();
        boolean boolean23 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.stream.Stream<java.lang.Character> charStream24 = charSet1.parallelStream();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream27 = charSet26.parallelStream();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getScript();
        java.util.Set<java.lang.Character> charSet30 = locale28.getExtensionKeys();
        boolean boolean31 = charSet26.containsAll((java.util.Collection<java.lang.Character>) charSet30);
        java.util.Spliterator<java.lang.Character> charSpliterator32 = charSet26.spliterator();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream35 = charSet34.parallelStream();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getScript();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        boolean boolean39 = charSet34.containsAll((java.util.Collection<java.lang.Character>) charSet38);
        boolean boolean41 = charSet34.contains((java.lang.Object) 390);
        boolean boolean42 = charSet26.removeAll((java.util.Collection<java.lang.Character>) charSet34);
        boolean boolean43 = charSet34.isEmpty();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream46 = charSet45.parallelStream();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getScript();
        java.util.Set<java.lang.Character> charSet49 = locale47.getExtensionKeys();
        boolean boolean50 = charSet45.containsAll((java.util.Collection<java.lang.Character>) charSet49);
        boolean boolean52 = charSet45.contains((java.lang.Object) 390);
        java.lang.Object[] objArray53 = charSet45.toArray();
        boolean boolean54 = charSet34.removeAll((java.util.Collection<java.lang.Character>) charSet45);
        boolean boolean55 = charSet45.isEmpty();
        java.util.stream.Stream<java.lang.Character> charStream56 = charSet45.parallelStream();
        boolean boolean57 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet45);
        java.util.stream.Stream<java.lang.Character> charStream58 = charSet45.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(charStream6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSpliterator11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charStream14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charStream24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(charStream27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSpliterator32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(charStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(charStream46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(charStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charStream58);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(35035170L);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        boolean boolean8 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeField dateTimeField10 = localDateTime7.getField(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond(397);
        int int16 = localDateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int[] intArray9 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.secondOfMinute();
        java.lang.String str11 = property10.getName();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        int int15 = durationField12.getValue((long) 69, (long) 52);
        long long18 = durationField12.subtract((long) 38158052, 4);
        long long19 = durationField12.getUnitMillis();
        boolean boolean20 = durationField12.isSupported();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        int int26 = property24.getMinimumValueOverall();
        java.lang.String str27 = property24.toString();
        org.joda.time.LocalDateTime localDateTime28 = property24.getLocalDateTime();
        java.lang.String str29 = property24.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DurationField durationField31 = property24.getDurationField();
        long long34 = durationField31.getMillis((long) (byte) -1, 9223371988911839815L);
        java.lang.String str35 = durationField31.toString();
        int int38 = durationField31.getValue((long) ' ', 94694400000L);
        int int39 = durationField12.compareTo(durationField31);
        long long42 = durationField31.add((long) 122, (long) 38203102);
        long long45 = durationField31.getValueAsLong((long) 965, (long) 286);
        long long47 = durationField31.getMillis((long) 199);
        long long50 = durationField31.subtract((long) 49465344, 883);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[122, 2, 13, 49695333]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 38154052L + "'", long18 == 38154052L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1000L + "'", long19 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[yearOfEra]" + "'", str27, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-31622400000L) + "'", long34 == (-31622400000L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DurationField[years]" + "'", str35, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1205573456044800122L + "'", long42 == 1205573456044800122L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 6279833448000L + "'", long47 == 6279833448000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-27864728134656L) + "'", long50 == (-27864728134656L));
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMonths((int) (byte) 0);
        java.lang.String str6 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        java.lang.String str11 = property10.getAsString();
        int int12 = property10.getMinimumValueOverall();
        java.lang.String str13 = property10.toString();
        org.joda.time.LocalDateTime localDateTime14 = property10.getLocalDateTime();
        java.lang.String str15 = property10.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property10.getFieldType();
        org.joda.time.DurationField durationField17 = property10.getDurationField();
        long long20 = durationField17.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        int int26 = property24.getMinimumValueOverall();
        java.lang.String str27 = property24.toString();
        org.joda.time.LocalDateTime localDateTime28 = property24.getLocalDateTime();
        java.lang.String str29 = property24.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DurationField durationField31 = property24.getDurationField();
        java.lang.String str32 = durationField31.toString();
        org.joda.time.DurationFieldType durationFieldType33 = durationField31.getType();
        int int34 = durationField17.compareTo(durationField31);
        int int37 = durationField31.getDifference((-92234312150400000L), (long) 10);
        org.joda.time.DurationFieldType durationFieldType38 = durationField31.getType();
        boolean boolean39 = localDateTime0.isSupported(durationFieldType38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime0.plus(readableDuration40);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-13T13:48:15.356" + "'", str6, "2022-02-13T13:48:15.356");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[yearOfEra]" + "'", str13, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-31622400000L) + "'", long20 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[yearOfEra]" + "'", str27, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DurationField[years]" + "'", str32, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-2922789) + "'", int37 == (-2922789));
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.yearOfEra();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime48 = property46.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        int int52 = localDateTime49.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusSeconds(38168736);
        int int59 = property46.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        java.lang.String str60 = property46.getAsText();
        int int61 = property46.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField62 = property46.getField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "122" + "'", str60, "122");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguage("2022-02-13T13:47:08.056");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-13T13:47:08.056 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        java.util.Locale locale3 = new java.util.Locale("-0001-03-12T13:47:16.882", "+97:10", "+93:00");
        org.junit.Assert.assertEquals(locale3.toString(), "-0001-03-12t13:47:16.882_+97:10_+93:00");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str5 = localDateTime0.toString("+00:00:00.100");
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusYears(1);
        int int8 = localDateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        boolean boolean12 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear((int) (byte) -1);
        boolean boolean18 = localDateTime14.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        int int32 = localDateTime14.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime4.withField(dateTimeFieldType31, (int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(2022);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusHours(35114108);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        long long15 = durationField10.getMillis(49435789);
        long long17 = durationField10.getMillis(20);
        int int20 = durationField10.getValue((long) 38200137, 9223371989099037947L);
        long long22 = durationField10.getValueAsLong((long) 'u');
        long long25 = durationField10.getMillis(68, (-3119968L));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1560042820555128000L + "'", long15 == 1560042820555128000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 631139040000L + "'", long17 == 631139040000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2145916800000L + "'", long25 == 2145916800000L);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withWeekOfWeekyear((int) (short) 10);
        int int18 = localDateTime14.getDayOfYear();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = dateTimeZone21.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long29 = dateTimeZone27.convertUTCToLocal(0L);
        long long31 = dateTimeZone21.getMillisKeepLocal(dateTimeZone27, 1L);
        org.joda.time.DateTime dateTime32 = localDateTime14.toDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        boolean boolean39 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        boolean boolean50 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withWeekOfWeekyear((int) (short) 10);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        boolean boolean65 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withWeekOfWeekyear((int) (short) 10);
        int int68 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = property69.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDateTime71.toDateTime(readableInstant72);
        int int74 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        int int76 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime73.getZone();
        java.lang.String str79 = dateTimeZone77.getName(35035170L);
        java.lang.String str80 = dateTimeZone77.getID();
        long long83 = dateTimeZone77.adjustOffset((-35034644L), false);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 611, dateTimeZone77);
        java.lang.String str86 = dateTimeZone77.getName(9223371988911868690L);
        boolean boolean87 = dateTimeZone77.isFixed();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 44 + "'", int18 == 44);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 187200000L + "'", long29 == 187200000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+52:00" + "'", str79, "+52:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+52:00" + "'", str80, "+52:00");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-35034644L) + "'", long83 == (-35034644L));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+52:00" + "'", str86, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("292278993-02-11T09:48:00.397");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=292278993-02-11t09:48:00.397");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        boolean boolean7 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(349800000);
        boolean boolean19 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.hourOfDay();
        java.lang.String str21 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0100-02-13T13:59:15.685" + "'", str21, "0100-02-13T13:59:15.685");
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.setUnicodeLocaleKeyword("millisOfDay", "0122-03-06T13:48:07.189+52:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor3 = charSet2.iterator();
        java.util.stream.Stream<java.lang.Character> charStream4 = charSet2.stream();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet2.stream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getScript();
        java.util.Set<java.lang.Character> charSet8 = locale6.getExtensionKeys();
        charSet8.clear();
        java.lang.Character[] charArray16 = new java.lang.Character[] { 'x', '#', 'a', '#', 'u', ' ' };
        java.util.ArrayList<java.lang.Character> charList17 = new java.util.ArrayList<java.lang.Character>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charList17, charArray16);
        boolean boolean19 = charSet8.retainAll((java.util.Collection<java.lang.Character>) charList17);
        java.lang.Object[] objArray20 = charSet8.toArray();
        boolean boolean21 = charSet2.removeAll((java.util.Collection<java.lang.Character>) charSet8);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getScript();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        charSet24.clear();
        java.lang.Object obj26 = null;
        boolean boolean27 = charSet24.contains(obj26);
        boolean boolean28 = charSet24.isEmpty();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream31 = charSet30.parallelStream();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getScript();
        java.util.Set<java.lang.Character> charSet34 = locale32.getExtensionKeys();
        boolean boolean35 = charSet30.containsAll((java.util.Collection<java.lang.Character>) charSet34);
        boolean boolean36 = charSet24.containsAll((java.util.Collection<java.lang.Character>) charSet34);
        boolean boolean37 = charSet34.isEmpty();
        java.lang.Object[] objArray38 = charSet34.toArray();
        java.util.Spliterator<java.lang.Character> charSpliterator39 = charSet34.spliterator();
        boolean boolean40 = charSet2.removeAll((java.util.Collection<java.lang.Character>) charSet34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = charSet34.add((java.lang.Character) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charItor3);
        org.junit.Assert.assertNotNull(charStream4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(charStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(charSpliterator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getScript();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) builder21, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("0122-03-06T13:46:23.251+52:00", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 936);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        org.joda.time.DurationField durationField3 = property2.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = durationField3.subtract((long) 748, 9223371988912015437L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -9223371988912015437 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        long long15 = dateTimeZone1.convertLocalToUTC((long) (byte) 1, false, (-3119968L));
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        int int25 = localDateTime21.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        boolean boolean32 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekyear((int) (byte) -1);
        boolean boolean37 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) localDateTime36);
        long long41 = dateTimeZone1.adjustOffset(589L, false);
        long long43 = dateTimeZone1.nextTransition(23L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-187199999L) + "'", long15 == (-187199999L));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 44 + "'", int25 == 44);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 589L + "'", long41 == 589L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 23L + "'", long43 == 23L);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime9.getFieldTypes();
        int int12 = localDateTime9.getYear();
        boolean boolean13 = dateTimeZone2.equals((java.lang.Object) localDateTime9);
        long long15 = dateTimeZone2.previousTransition((long) 35114213);
        long long19 = dateTimeZone2.convertLocalToUTC(9223371988911989627L, false, (long) (-21234));
        java.lang.String str21 = dateTimeZone2.getNameKey((long) 298);
        java.lang.String str22 = dateTimeZone2.toString();
        boolean boolean24 = dateTimeZone2.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922789 + "'", int10 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35114213L + "'", long15 == 35114213L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9223371988908869627L + "'", long19 == 9223371988908869627L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:52" + "'", str22, "+00:52");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        boolean boolean8 = dateTimeZone4.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long12 = dateTimeZone10.convertUTCToLocal(0L);
        long long14 = dateTimeZone4.getMillisKeepLocal(dateTimeZone10, 1L);
        int int16 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone4.getName((long) 51);
        long long20 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) 61);
        java.util.TimeZone timeZone21 = dateTimeZone4.toTimeZone();
        java.lang.String str22 = timeZone21.getID();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.util.TimeZone.setDefault(timeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 187200000 + "'", int16 == 187200000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 162600061L + "'", long20 == 162600061L);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT" + "'", str22, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getDisplayCountry();
        boolean boolean6 = locale1.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(426);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.lang.String str14 = locale10.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 49453563, locale10);
        java.lang.String str16 = locale1.getDisplayScript(locale10);
        java.lang.String str17 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale1.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet20 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet21 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getCountry();
        java.util.Locale locale28 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str29 = locale22.getDisplayCountry(locale28);
        java.lang.String str30 = locale1.getDisplayVariant(locale28);
        java.lang.Object obj31 = locale1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+426:00" + "'", str15, "+426:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals(locale28.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "zh");
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.toString();
        org.joda.time.LocalDateTime localDateTime21 = property17.getLocalDateTime();
        java.lang.String str22 = property17.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property17.getFieldType();
        org.joda.time.DurationField durationField24 = property17.getDurationField();
        java.lang.String str25 = durationField24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = durationField24.getType();
        int int27 = durationField10.compareTo(durationField24);
        int int30 = durationField24.getDifference((long) 115, (-31622400000L));
        long long31 = durationField24.getUnitMillis();
        java.lang.String str32 = durationField24.getName();
        int int34 = durationField24.getValue((long) 2142);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = durationField24.add(31536000041L, 3061024344000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3061024344000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[years]" + "'", str25, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 31556952000L + "'", long31 == 31556952000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "years" + "'", str32, "years");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2022-01-01T00:00:00.000");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2022-02-13T13:00:55.730");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.yearOfEra();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime48 = property46.withMinimumValue();
        int int49 = localDateTime48.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 49513050);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime8.getFieldType(38229532);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 38229532");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withPeriodAdded(readablePeriod27, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfCentury(0);
        boolean boolean34 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        int int8 = localDateTime5.getYear();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime14.getField(0);
        java.lang.String str18 = localDateTime14.toString();
        int int19 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.minusDays(24);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.withPeriodAdded(readablePeriod22, 49682879);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0122-02-11T10:40:16.235" + "'", str18, "0122-02-11T10:40:16.235");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("49480009-12-31T16:48:00.000");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale.Builder builder18 = builder13.removeUnicodeLocaleAttribute("cinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder13.setLanguageTag("0117-02-13T13:46:58.375");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 0117 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2022-01-01T00:00:00.000");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("DurationField[days]");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.minuteOfHour();
        boolean boolean7 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        java.lang.String str10 = property6.toString();
        org.joda.time.LocalDateTime localDateTime11 = property6.roundFloorCopy();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream14 = charSet13.parallelStream();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream17 = charSet16.parallelStream();
        boolean boolean18 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        boolean boolean19 = charSet13.isEmpty();
        java.lang.Object[] objArray20 = charSet13.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray26 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray21, dateTimeFieldArray22, dateTimeFieldArray23, dateTimeFieldArray24, dateTimeFieldArray25 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray27 = charSet13.toArray(dateTimeFieldArray26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator30 = charSet29.spliterator();
        boolean boolean31 = charSet13.removeAll((java.util.Collection<java.lang.Character>) charSet29);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property35.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        boolean boolean39 = property38.isLeap();
        java.lang.String str40 = property38.toString();
        boolean boolean41 = charSet13.equals((java.lang.Object) property38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(426);
        boolean boolean45 = dateTimeZone43.isStandardOffset((long) 'a');
        java.util.Locale locale49 = new java.util.Locale("0122-02-11T09:43:49.336", "2022");
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = dateTimeZone43.getShortName(283996800000L, locale49);
        int int52 = property38.getMaximumTextLength(locale49);
        int int53 = property6.getMaximumShortTextLength(locale49);
        org.joda.time.LocalDateTime localDateTime54 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[minuteOfHour]" + "'", str10, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charStream14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(charStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[minuteOfHour]" + "'", str40, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals(locale49.toString(), "0122-02-11t09:43:49.336_2022");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "und" + "'", str50, "und");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+426:00" + "'", str51, "+426:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getSecondOfMinute();
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusDays(299);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(308);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(49466316);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDateTime18.getValue(49686126);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49686126");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayVariant(locale11);
        java.lang.String str14 = locale10.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale10.getDisplayVariant(locale18);
        java.lang.String str20 = locale9.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder21 = builder8.setLocale(locale9);
        boolean boolean22 = localDateTime5.equals((java.lang.Object) builder8);
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        java.lang.String str28 = locale24.getDisplayCountry();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.lang.String str31 = locale29.getCountry();
        java.util.Locale locale32 = locale29.stripExtensions();
        java.lang.String str33 = locale24.getDisplayVariant(locale32);
        java.lang.String str34 = locale23.getDisplayLanguage(locale32);
        java.util.Locale.Builder builder35 = builder8.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder8.setVariant("2022-02-13T13:47:06.665");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-13T13:47:06.665 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getMillisOfSecond();
        int int14 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = dateTimeZone18.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear((int) (byte) -1);
        boolean boolean35 = localDateTime31.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        int int49 = localDateTime31.indexOf(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.withField(dateTimeFieldType48, (int) ' ');
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property53 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMaximumValue();
        java.lang.String str61 = property59.getAsText();
        org.joda.time.DurationField durationField62 = property59.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime64 = property59.addWrapFieldToCopy(813);
        org.joda.time.DurationField durationField65 = property59.getDurationField();
        long long68 = durationField65.add(94694400000L, 49503629);
        org.joda.time.DurationFieldType durationFieldType69 = durationField65.getType();
        boolean boolean70 = localDateTime54.isSupported(durationFieldType69);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 506 + "'", int13 == 506);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 38416506 + "'", int14 == 38416506);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertNull(durationField62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1562183738784000000L + "'", long68 == 1562183738784000000L);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream8 = charSet7.parallelStream();
        boolean boolean9 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean10 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getScript();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        boolean boolean14 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear((int) (byte) -1);
        int[] intArray26 = localDateTime23.getValues();
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(35035070);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.plusMinutes(38190195);
        boolean boolean32 = charSet13.remove((java.lang.Object) 38190195);
        int int33 = charSet13.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = charSet13.add((java.lang.Character) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[122, 3, 4, 38416571]");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 44);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 10, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime0.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime0.era();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        boolean boolean8 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekOfWeekyear((int) (short) 10);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = dateTimeZone14.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long22 = dateTimeZone20.convertUTCToLocal(0L);
        long long24 = dateTimeZone14.getMillisKeepLocal(dateTimeZone20, 1L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        int int34 = localDateTime30.getDayOfYear();
        boolean boolean35 = dateTimeZone20.isLocalDateTimeGap(localDateTime30);
        int int36 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime37 = property12.withMaximumValue();
        boolean boolean38 = dateTimeZone1.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone1.isLocalDateTimeGap(localDateTime40);
        long long44 = dateTimeZone1.adjustOffset((long) 656, false);
        java.util.TimeZone timeZone45 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        java.lang.String str52 = property51.getAsString();
        org.joda.time.LocalDateTime localDateTime53 = property51.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField54 = property51.getField();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = property51.getAsText(locale55);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.weekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withCenturyOfEra((int) (short) 1);
        boolean boolean71 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withWeekOfWeekyear((int) (short) 10);
        int int74 = localDateTime73.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = property75.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        org.joda.time.DateTime dateTime80 = localDateTime64.toDateTime(readableInstant78);
        long long81 = dateTime80.getMillis();
        long long82 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Interval interval83 = property51.toInterval();
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.yearOfEra();
        java.util.Locale locale89 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet90 = locale89.getExtensionKeys();
        java.lang.String str91 = localDateTime84.toString("2022", locale89);
        java.util.Locale locale92 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str93 = locale89.getDisplayCountry(locale92);
        java.lang.String str94 = locale89.getLanguage();
        int int95 = property51.getMaximumShortTextLength(locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = timeZone45.getDisplayName(false, 38306673, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 38306673");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200000L + "'", long22 == 187200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 656L + "'", long44 == 656L);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 9223371988912096621L + "'", long81 == 9223371988912096621L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-292276970L) + "'", long82 == (-292276970L));
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022" + "'", str91, "2022");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "zh" + "'", str94, "zh");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = localDateTime10.toString("2022", locale15);
        java.util.Locale locale19 = new java.util.Locale("2022");
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getScript();
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale15, locale19, locale20, locale22, locale23, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode29);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = java.util.Locale.lookupTag(languageRangeList33, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList33, strMap37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        boolean boolean45 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withWeekOfWeekyear((int) (short) 10);
        int int48 = localDateTime47.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = property49.addToCopy(0L);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        boolean boolean54 = locale53.hasExtensions();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        java.lang.String str59 = property58.getAsString();
        org.joda.time.LocalDateTime localDateTime60 = property58.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField61 = property58.getField();
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = property58.getAsText(locale62);
        org.joda.time.LocalDateTime localDateTime64 = property58.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField65 = property58.getField();
        boolean boolean66 = property58.isLeap();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale68.getDisplayVariant(locale69);
        java.lang.String str72 = locale68.getDisplayCountry();
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        java.lang.String str75 = locale73.getCountry();
        java.util.Locale locale76 = locale73.stripExtensions();
        java.lang.String str77 = locale68.getDisplayVariant(locale76);
        java.lang.String str78 = locale67.getDisplayLanguage(locale76);
        java.lang.String str79 = locale67.getDisplayCountry();
        java.lang.String str80 = property58.getAsShortText(locale67);
        java.lang.String str81 = locale53.getDisplayName(locale67);
        java.lang.String str82 = property52.getAsShortText(locale53);
        java.util.Set<java.lang.String> strSet83 = locale53.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strSet83, filteringMode84);
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap87);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.year();
        java.util.Locale locale92 = java.util.Locale.CHINESE;
        boolean boolean93 = locale92.hasExtensions();
        boolean boolean94 = locale92.hasExtensions();
        java.lang.String str95 = locale92.getISO3Country();
        java.lang.String str96 = property91.getAsText(locale92);
        java.util.Set<java.lang.String> strSet97 = locale92.getUnicodeLocaleAttributes();
        java.lang.String str98 = java.util.Locale.lookupTag(languageRangeList88, (java.util.Collection<java.lang.String>) strSet97);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertEquals(locale19.toString(), "2022");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode29.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022" + "'", str63, "2022");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u4e2d\u6587" + "'", str78, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str79, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022" + "'", str80, "2022");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u4e2d\u6587" + "'", str81, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "122" + "'", str82, "122");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(languageRangeList88);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1970" + "'", str96, "1970");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = localDateTime0.toString("2022", locale5);
        int int8 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withHourOfDay(46854483);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46854483 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours((int) (short) 100);
        int[] intArray27 = localDateTime24.getValues();
        int int28 = localDateTime24.getEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withYearOfEra(32420964);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField(49587403);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49587403");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[122, 2, 11, 38656759]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(580, 38333273, 0, 49465330, 524, 46832986, 982);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49465330 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.DateTimeField dateTimeField14 = property10.getField();
        int int15 = property10.get();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = dateTimeZone17.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long25 = dateTimeZone23.convertUTCToLocal(0L);
        long long27 = dateTimeZone17.getMillisKeepLocal(dateTimeZone23, 1L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = dateTimeZone23.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.LocalDateTime localDateTime40 = property36.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = property45.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        int int58 = localDateTime57.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = localDateTime48.toDateTime(readableInstant62);
        long long65 = dateTime64.getMillis();
        int int66 = property36.compareTo((org.joda.time.ReadableInstant) dateTime64);
        int int67 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime64);
        int int68 = property10.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property10.getFieldType();
        org.joda.time.DateTimeField dateTimeField70 = property10.getField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187200000L + "'", long25 == 187200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 9223371988912096880L + "'", long65 == 9223371988912096880L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 187200000 + "'", int67 == 187200000);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        int[] intArray11 = localDateTime8.getValues();
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        int int14 = localDateTime13.size();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = property15.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property15.addToCopy(35067704);
        java.lang.String str22 = property15.toString();
        java.lang.String str23 = property15.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[122, 3, 4, 38416959]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[year]" + "'", str22, "Property[year]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime16.getDayOfYear();
        boolean boolean21 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusWeeks(42);
        boolean boolean24 = charSet1.remove((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        int int33 = localDateTime30.getMonthOfYear();
        int int34 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        boolean boolean35 = charSet1.remove((java.lang.Object) property28);
        org.joda.time.LocalDateTime localDateTime36 = property28.getLocalDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        int int45 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        boolean boolean68 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withWeekOfWeekyear((int) (short) 10);
        int int71 = localDateTime70.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        int int77 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime79, dateTimeZone80);
        java.lang.String str83 = localDateTime82.toString();
        int int84 = localDateTime82.getDayOfYear();
        int int85 = localDateTime82.getMonthOfYear();
        int int86 = localDateTime82.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-11T10:40:17.096" + "'", str83, "2022-02-11T10:40:17.096");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 42 + "'", int84 == 42);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        int int7 = timeZone3.getRawOffset();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.lang.String str16 = locale12.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = locale17.getCountry();
        java.util.Locale locale20 = locale17.stripExtensions();
        java.lang.String str21 = locale12.getDisplayVariant(locale20);
        java.lang.String str22 = locale11.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder23 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale locale28 = builder26.build();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale30.getDisplayVariant(locale31);
        java.lang.String str34 = locale30.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.String str37 = locale35.getCountry();
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale30.getDisplayVariant(locale38);
        java.lang.String str40 = locale29.getDisplayLanguage(locale38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale41.getDisplayVariant(locale42);
        java.lang.String str45 = locale42.getLanguage();
        java.lang.String str46 = locale29.getDisplayName(locale42);
        java.lang.String str47 = locale42.getDisplayCountry();
        java.lang.String str48 = locale42.getScript();
        java.util.Locale.Builder builder49 = builder26.setLocale(locale42);
        java.util.Locale locale51 = new java.util.Locale("2022-02-12T09:43:52.434");
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale42.getDisplayVariant(locale51);
        java.lang.String str54 = locale42.getDisplayVariant();
        java.util.Locale.setDefault(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = timeZone3.getDisplayName(true, 298, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 298");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str46, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals(locale51.toString(), "2022-02-12t09:43:52.434");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("0117-02-13T13:45:54.855", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getMillisOfSecond();
        int int14 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = dateTimeZone18.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear((int) (byte) -1);
        boolean boolean35 = localDateTime31.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime46.getFieldType((int) (short) 0);
        int int49 = localDateTime31.indexOf(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.withField(dateTimeFieldType48, (int) ' ');
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.LocalDateTime localDateTime54 = property52.roundCeilingCopy();
        java.util.Locale locale55 = null;
        int int56 = property52.getMaximumShortTextLength(locale55);
        java.lang.String str57 = property52.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 224 + "'", int13 == 224);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49697224 + "'", int14 == 49697224);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Property[year]" + "'", str57, "Property[year]");
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusWeeks(42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime20.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusHours(38158052);
        int int24 = localDateTime23.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusYears((int) '4');
        int int28 = localDateTime27.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime27.getFieldType(35132341);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35132341");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        boolean boolean4 = timeZone3.observesDaylightTime();
        int int6 = timeZone3.getOffset((long) 22);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        timeZone7.setID("0122-02-11T10:35:57.632");
        int int11 = timeZone7.getRawOffset();
        java.util.TimeZone.setDefault(timeZone7);
        boolean boolean13 = timeZone3.hasSameRules(timeZone7);
        java.lang.String str14 = timeZone7.getID();
        int int15 = timeZone7.getRawOffset();
        int int16 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0122-02-11T10:35:57.632" + "'", str14, "0122-02-11T10:35:57.632");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekOfWeekyear((int) (short) 10);
        int int16 = localDateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        boolean boolean28 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withWeekOfWeekyear((int) (short) 10);
        int int31 = localDateTime30.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        int int37 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        int int41 = localDateTime38.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        boolean boolean64 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withWeekOfWeekyear((int) (short) 10);
        int int67 = localDateTime66.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = property68.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withCenturyOfEra((int) (short) 1);
        boolean boolean79 = localDateTime75.isBefore((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withWeekOfWeekyear((int) (short) 10);
        int int82 = localDateTime81.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime85 = property83.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(readableInstant86);
        int int88 = dateTime72.compareTo((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = localDateTime55.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int int90 = property46.compareTo((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean91 = dateTime21.equals((java.lang.Object) int90);
        org.joda.time.Chronology chronology92 = dateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime(70279636, 49511083, 948, 46804041, 49672228, 49488625, 1970, chronology92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46804041 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(14);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(49465330);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra(49692827);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49692827 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("0122-03-06T13:47:21.777+52:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '0122-03-06T13:47:21.777+52:00' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(49566600);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("zh");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.lang.String str24 = locale19.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale20);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getScript();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale.setDefault(category26, locale27);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.lang.String str38 = localDateTime31.toString("2022", locale36);
        java.util.Locale.setDefault(category26, locale36);
        java.util.Locale locale40 = java.util.Locale.getDefault(category26);
        java.util.Locale.Builder builder41 = builder18.setLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder18.setVariant("0100-02-13T13:59:24.368");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0100-02-13T13:59:24.368 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        java.util.TimeZone.setDefault(timeZone16);
        timeZone16.setID("38307080");
        // The following exception was thrown during execution in test generation
        try {
            int int26 = timeZone16.getOffset(49646475, 242, 447, 38354218, 813, 46854483);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        java.util.Locale locale38 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.lang.String str39 = property3.getAsShortText(locale38);
        org.joda.time.DateTimeField dateTimeField40 = property3.getField();
        org.joda.time.LocalDateTime localDateTime41 = property3.roundHalfFloorCopy();
        java.lang.Object obj42 = null;
        boolean boolean43 = property3.equals(obj42);
        org.joda.time.LocalDateTime localDateTime44 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.minuteOfHour();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912097527L + "'", long33 == 9223371988912097527L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertEquals(locale38.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        long long19 = durationField16.add((long) 49500521, 23);
        long long22 = durationField16.getValueAsLong((long) 49607271, (long) 349800000);
        long long25 = durationField16.add((long) 35220026, (long) 53);
        long long28 = durationField16.getDifferenceAsLong(9223371988911996755L, 9223371988912012770L);
        boolean boolean29 = durationField16.isPrecise();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = durationField16.getDifference((long) 276, 9223371988912001579L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -9223371988912001303");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 49500544L + "'", long19 == 49500544L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 49607271L + "'", long22 == 49607271L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35220079L + "'", long25 == 35220079L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-16015L) + "'", long28 == (-16015L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long16 = durationField10.getDifferenceAsLong((long) 3, 9223371988911832894L);
        long long19 = durationField10.getDifferenceAsLong((long) 736, 9223371988911842394L);
        long long21 = durationField10.getValueAsLong((-49466L));
        long long23 = durationField10.getMillis(312);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        boolean boolean30 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withWeekOfWeekyear((int) (short) 10);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = dateTimeZone36.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long44 = dateTimeZone42.convertUTCToLocal(0L);
        long long46 = dateTimeZone36.getMillisKeepLocal(dateTimeZone42, 1L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int int56 = localDateTime52.getDayOfYear();
        boolean boolean57 = dateTimeZone42.isLocalDateTimeGap(localDateTime52);
        int int58 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.DurationField durationField59 = property34.getDurationField();
        long long62 = durationField59.subtract((long) 426, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType63 = durationField59.getType();
        long long66 = durationField59.add(0L, (long) 17);
        org.joda.time.DurationFieldType durationFieldType67 = durationField59.getType();
        int int68 = durationField10.compareTo(durationField59);
        long long71 = durationField10.getMillis(104400000, (long) 14400790);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292277023L) + "'", long16 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-292277023L) + "'", long19 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9845769024000L + "'", long23 == 9845769024000L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 187200000L + "'", long44 == 187200000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 42 + "'", int56 == 42);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-58665599574L) + "'", long62 == (-58665599574L));
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10281600000L + "'", long66 == 10281600000L);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3294545788800000000L + "'", long71 == 3294545788800000000L);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale1.getDisplayVariant(locale9);
        java.lang.String str11 = locale0.getDisplayLanguage(locale9);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.year();
        int int26 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.minusHours(3);
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.centuryOfEra();
        boolean boolean30 = locale0.equals((java.lang.Object) localDateTime22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withDate(49660525, 38245819, (-3119));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38245819 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        long long15 = durationField10.getMillis(49435789);
        long long18 = durationField10.getValueAsLong((long) 2022, (long) 100);
        java.lang.String str19 = durationField10.getName();
        boolean boolean20 = durationField10.isPrecise();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1560042820555128000L + "'", long15 == 1560042820555128000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(742, 748, 38382375, 107, 49541191, 46812669);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 107 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        int int9 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours(451);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) (short) 100);
        int int29 = localDateTime26.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) (short) 100);
        int int41 = localDateTime38.getYearOfCentury();
        boolean boolean42 = localDateTime26.equals((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withWeekOfWeekyear((int) (short) 10);
        int int54 = localDateTime53.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = property55.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withCenturyOfEra((int) (short) 1);
        boolean boolean66 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withWeekOfWeekyear((int) (short) 10);
        int int69 = localDateTime68.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = property70.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(readableInstant73);
        int int75 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withCenturyOfEra((int) (short) 1);
        boolean boolean82 = localDateTime78.isBefore((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = localDateTime86.getFieldType((int) (short) 0);
        boolean boolean89 = dateTime59.isSupported(dateTimeFieldType88);
        org.joda.time.DateTime dateTime90 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime91 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        long long92 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime93 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str94 = dateTime59.toString();
        long long95 = dateTime59.getMillis();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-58311843102247L) + "'", long92 == (-58311843102247L));
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0122-03-06T13:48:17.753+52:00" + "'", str94, "0122-03-06T13:48:17.753+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-58311843102247L) + "'", long95 == (-58311843102247L));
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusWeeks(42);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusHours(397);
        int int23 = localDateTime13.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withSecondOfMinute(770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 770 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 48 + "'", int23 == 48);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        java.util.Locale locale3 = new java.util.Locale("", "Property[minuteOfHour]", "0122-03-04T10:37:25.676+00:52");
        java.lang.String str4 = locale3.getISO3Language();
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_PROPERTY[MINUTEOFHOUR]_0122-03-04T10:37:25.676+00:52");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "_PROPERTY[MINUTEOFHOUR]_0122-03-04T10:37:25.676+00:52");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "_PROPERTY[MINUTEOFHOUR]_0122-03-04T10:37:25.676+00:52");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "_PROPERTY[MINUTEOFHOUR]_0122-03-04T10:37:25.676+00:52");
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale locale19 = builder16.build();
        java.util.Locale.Builder builder20 = builder16.clearExtensions();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = property24.getAsText(locale28);
        java.lang.String str30 = locale28.getISO3Country();
        java.lang.String str31 = locale28.getISO3Country();
        java.util.Locale.Builder builder32 = builder16.setLocale(locale28);
        java.util.Locale locale33 = builder16.build();
        java.util.Locale.Builder builder35 = builder16.setLanguage("de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder16.setExtension('x', "292278993-02-08T10:38:32.563+00:52");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 292278993 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(44);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMillis(3);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        java.lang.Class<?> wildcardClass16 = property15.getClass();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        int int18 = localDateTime17.getYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = dateTimeZone20.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long28 = dateTimeZone26.convertUTCToLocal(0L);
        long long30 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, 1L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, dateTimeZone20);
        boolean boolean32 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = dateTimeZone34.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone40.convertUTCToLocal(0L);
        long long44 = dateTimeZone34.getMillisKeepLocal(dateTimeZone40, 1L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withWeekOfWeekyear((int) (short) 10);
        int int54 = localDateTime50.getDayOfYear();
        boolean boolean55 = dateTimeZone40.isLocalDateTimeGap(localDateTime50);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.minusMillis(100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusMonths(20);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.centuryOfEra();
        int int63 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property64 = localDateTime12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 187200000L + "'", long42 == 187200000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 44 + "'", int54 == 44);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0060-05-11T10:38:17.479+00:52", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0060-05-11t10:38:17.479+00:52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        boolean boolean12 = localDateTime8.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((int) (short) 0);
        int int26 = localDateTime8.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        int int36 = localDateTime35.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = property37.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfFloorCopy();
        int int45 = localDateTime44.getYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = dateTimeZone47.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long55 = dateTimeZone53.convertUTCToLocal(0L);
        long long57 = dateTimeZone47.getMillisKeepLocal(dateTimeZone53, 1L);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime44, dateTimeZone47);
        boolean boolean59 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.centuryOfEra();
        int int62 = localDateTime60.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 187200000L + "'", long55 == 187200000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 65 + "'", int62 == 65);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale locale17 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder13.setExtension('4', "2022-02-13T13:48:07.283");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW_#u-44-chn");
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime18.getFieldType((int) (short) 0);
        boolean boolean21 = localDateTime5.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = dateTimeZone23.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long31 = dateTimeZone29.convertUTCToLocal(0L);
        long long33 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, 1L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withWeekOfWeekyear((int) (short) 10);
        int int43 = localDateTime39.getDayOfYear();
        boolean boolean44 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        long long48 = dateTimeZone29.convertLocalToUTC(0L, false, (long) (short) 0);
        boolean boolean50 = dateTimeZone29.isStandardOffset((long) (short) 1);
        org.joda.time.DateTime dateTime51 = localDateTime5.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime5.plusWeeks(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = localDateTime53.indexOf(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 187200000L + "'", long31 == 187200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 44 + "'", int43 == 44);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-187200000L) + "'", long48 == (-187200000L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = dateTimeZone9.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long17 = dateTimeZone15.convertUTCToLocal(0L);
        long long19 = dateTimeZone9.getMillisKeepLocal(dateTimeZone15, 1L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        int int29 = localDateTime25.getDayOfYear();
        boolean boolean30 = dateTimeZone15.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusMinutes(4);
        int int33 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        java.lang.String str35 = localDateTime5.toString("+426:00");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime5.withCenturyOfEra(49652562);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49652562 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 187200000L + "'", long17 == 187200000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 44 + "'", int29 == 44);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+426:00" + "'", str35, "+426:00");
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.lang.String str17 = dateTimeZone7.getShortName((long) 511);
        java.lang.String str19 = dateTimeZone7.getShortName(9223371988911990549L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+52:00" + "'", str19, "+52:00");
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = locale5.getCountry();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.lang.String str10 = locale0.getLanguage();
        boolean boolean11 = locale0.hasExtensions();
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale0.getDisplayVariant(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime19.getField(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.era();
        int int24 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        java.lang.String str29 = property28.getAsString();
        int int30 = property28.getMinimumValueOverall();
        java.lang.String str31 = property28.toString();
        org.joda.time.LocalDateTime localDateTime32 = property28.getLocalDateTime();
        java.lang.String str33 = property28.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property28.getFieldType();
        boolean boolean35 = localDateTime19.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime19.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = localDateTime19.toDateTime(dateTimeZone38);
        boolean boolean42 = locale0.equals((java.lang.Object) dateTimeZone38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[yearOfEra]" + "'", str31, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay(49517177);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusSeconds(49477685);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = durationField10.getType();
        long long15 = durationField10.getMillis((-292276970L), 38170778L);
        long long17 = durationField10.getMillis(874);
        long long20 = durationField10.add((-1562269037270399939L), (long) 351);
        java.lang.String str21 = durationField10.getName();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-9223370312976000000L) + "'", long15 == (-9223370312976000000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 27580776048000L + "'", long17 == 27580776048000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1562257960790399939L) + "'", long20 == (-1562257960790399939L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "years" + "'", str21, "years");
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusHours(93);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        boolean boolean37 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withWeekOfWeekyear((int) (short) 10);
        int int40 = localDateTime39.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = localDateTime30.toDateTime(readableInstant44);
        boolean boolean47 = dateTime22.isBefore(readableInstant44);
        org.joda.time.DateTime dateTime48 = localDateTime0.toDateTime(readableInstant44);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMaximumValue();
        org.joda.time.Interval interval55 = property53.toInterval();
        org.joda.time.LocalDateTime localDateTime57 = property53.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.yearOfEra();
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.weekyear();
        org.joda.time.LocalDateTime localDateTime63 = property62.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra((int) (short) 1);
        boolean boolean72 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withWeekOfWeekyear((int) (short) 10);
        int int75 = localDateTime74.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime78 = property76.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime81 = localDateTime65.toDateTime(readableInstant79);
        long long82 = dateTime81.getMillis();
        int int83 = property53.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.yearOfEra();
        java.lang.String str88 = property87.getAsString();
        org.joda.time.LocalDateTime localDateTime89 = property87.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.LocalDateTime localDateTime94 = localDateTime89.withDurationAdded(readableDuration92, (int) (short) 0);
        boolean boolean95 = dateTime81.equals((java.lang.Object) localDateTime89);
        org.joda.time.DateTimeZone dateTimeZone96 = dateTime81.getZone();
        org.joda.time.Instant instant97 = dateTime81.toInstant();
        int int98 = dateTime48.compareTo((org.joda.time.ReadableInstant) instant97);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 9223371988912098335L + "'", long82 == 9223371988912098335L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022" + "'", str88, "2022");
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(instant97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus(readableDuration5);
        int int7 = localDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekOfWeekyear(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond(8952669);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8952669 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DurationField durationField35 = property10.getDurationField();
        org.joda.time.DateTimeField dateTimeField36 = property10.getField();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        boolean boolean42 = dateTimeZone38.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long46 = dateTimeZone44.convertUTCToLocal(0L);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone44, 1L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        boolean boolean52 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        java.util.TimeZone timeZone53 = dateTimeZone44.toTimeZone();
        timeZone53.setRawOffset(1);
        java.lang.String str56 = timeZone53.getID();
        timeZone53.setID("Greenwich Mean Time");
        java.lang.String str59 = timeZone53.getID();
        boolean boolean60 = property10.equals((java.lang.Object) timeZone53);
        java.lang.String str61 = timeZone53.getID();
        int int62 = timeZone53.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId63 = timeZone53.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: Greenwich Mean Time");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 187200000L + "'", long46 == 187200000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GMT" + "'", str56, "GMT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Greenwich Mean Time" + "'", str59, "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Greenwich Mean Time" + "'", str61, "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        java.lang.String[] strArray26 = java.util.TimeZone.getAvailableIDs((int) (byte) -1);
        boolean boolean27 = dateTimeZone24.equals((java.lang.Object) strArray26);
        java.lang.String str29 = dateTimeZone24.getShortName(1644385560L);
        int int31 = dateTimeZone24.getOffset(1204516708444800000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 187200000 + "'", int31 == 187200000);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(458);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        int[] intArray11 = localDateTime8.getValues();
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        int int14 = localDateTime13.size();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, 51);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[122, 3, 6, 49698700]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.lang.String str15 = localDateTime8.toString("2022", locale13);
        int int16 = property7.getMaximumShortTextLength(locale13);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = locale17.getCountry();
        java.lang.String str20 = property7.getAsText(locale17);
        org.joda.time.DurationField durationField21 = property7.getLeapDurationField();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getScript();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Locale.setDefault(category22, locale23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.lang.String str34 = localDateTime27.toString("2022", locale32);
        java.util.Locale.setDefault(category22, locale32);
        java.util.Locale locale36 = java.util.Locale.getDefault(category22);
        int int37 = property7.getMaximumShortTextLength(locale36);
        org.joda.time.DurationField durationField38 = property7.getRangeDurationField();
        java.lang.String str39 = property7.getAsString();
        java.lang.String str40 = property7.getAsText();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u661f\u671f\u65e5" + "'", str20, "\u661f\u671f\u65e5");
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u661f\u671f\u65e5" + "'", str40, "\u661f\u671f\u65e5");
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = dateTimeZone20.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long28 = dateTimeZone26.convertUTCToLocal(0L);
        long long30 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, 1L);
        org.joda.time.DateTime dateTime31 = localDateTime13.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withWeekOfWeekyear((int) (short) 10);
        int int52 = localDateTime51.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        boolean boolean64 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withWeekOfWeekyear((int) (short) 10);
        int int67 = localDateTime66.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = property68.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        int int73 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int int75 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(chronology77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime78.withDate(0, 1, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withWeekyear((int) '4');
        boolean boolean89 = dateTimeZone76.equals((java.lang.Object) localDateTime86);
        long long93 = dateTimeZone76.convertLocalToUTC(3764714886L, false, (long) 46849324);
        java.util.TimeZone timeZone94 = dateTimeZone76.toTimeZone();
        java.util.Locale locale96 = java.util.Locale.forLanguageTag("0122-02-11T09:43:49.336");
        java.lang.String str97 = timeZone94.getDisplayName(locale96);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 3577514886L + "'", long93 == 3577514886L);
        org.junit.Assert.assertNotNull(timeZone94);
// flaky:         org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Greenwich Mean Time" + "'", str97, "Greenwich Mean Time");
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '#', ' ' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeField dateTimeField20 = localDateTime17.getField(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.era();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = dateTimeZone23.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        boolean boolean34 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withWeekyear((int) (byte) -1);
        boolean boolean40 = localDateTime36.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        boolean boolean47 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType((int) (short) 0);
        int int54 = localDateTime36.indexOf(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime26.withField(dateTimeFieldType53, (int) ' ');
        boolean boolean57 = localDateTime17.isSupported(dateTimeFieldType53);
        boolean boolean58 = localDateTime10.isSupported(dateTimeFieldType53);
        int int59 = localDateTime10.getMinuteOfHour();
        boolean boolean60 = charSet3.remove((java.lang.Object) localDateTime10);
        charSet3.clear();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2922789 + "'", int11 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 48 + "'", int59 == 48);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        int int38 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.minusMillis(119);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime28.getFieldType(49605751);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49605751");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale5.getDisplayVariant(locale6);
        java.lang.String str9 = locale4.getDisplayLanguage(locale5);
        java.lang.String str10 = locale4.getVariant();
        java.lang.String str11 = locale4.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(69);
        java.lang.String str15 = dateTimeZone14.toString();
        boolean boolean16 = dateTimeZone14.isFixed();
        long long20 = dateTimeZone14.convertLocalToUTC((long) 38171489, false, (long) 349800000);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str24 = locale22.getCountry();
        java.util.Locale locale25 = locale22.stripExtensions();
        boolean boolean26 = locale22.hasExtensions();
        java.lang.String str27 = locale22.getCountry();
        java.lang.String str28 = locale22.getCountry();
        java.lang.String str29 = dateTimeZone14.getShortName((long) 35083841, locale22);
        java.util.Locale.Builder builder30 = builder3.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder3.setRegion("0122-03-06T13:47:17.888+52:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 0122-03-06T13:47:17.888+52:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+69:00" + "'", str15, "+69:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-210228511L) + "'", long20 == (-210228511L));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+69:00" + "'", str29, "+69:00");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        long long7 = dateTimeZone2.adjustOffset((long) 983, false);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(284012568000L, dateTimeZone2);
        java.lang.String str9 = dateTimeZone2.toString();
        java.lang.String str10 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+Z6:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 983L + "'", long7 == 983L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+426:00" + "'", str9, "+426:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+426:00" + "'", str10, "+426:00");
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        charSet2.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = charSet2.contains(obj4);
        int int6 = charSet2.size();
        java.util.stream.Stream<java.lang.Character> charStream7 = charSet2.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(charStream7);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) (short) 1);
        boolean boolean9 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withWeekOfWeekyear((int) (short) 10);
        int int12 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        int int21 = localDateTime20.getYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = dateTimeZone23.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long31 = dateTimeZone29.convertUTCToLocal(0L);
        long long33 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, 1L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone23);
        boolean boolean35 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        boolean boolean36 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        boolean boolean43 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withYearOfEra((int) '4');
        int int50 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.minusDays(49446508);
        int int53 = localDateTime45.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withDayOfWeek(857);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 857 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 187200000L + "'", long31 == 187200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 13 + "'", int53 == 13);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(14);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusSeconds(38168736);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        int int27 = localDateTime25.getYear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.year();
        int int42 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withWeekyear((int) (byte) -1);
        boolean boolean55 = localDateTime51.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) (short) 1);
        boolean boolean62 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        int int69 = localDateTime51.indexOf(dateTimeFieldType68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime33.property(dateTimeFieldType68);
        int int71 = localDateTime25.get(dateTimeFieldType68);
        boolean boolean72 = localDateTime12.isSupported(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime6.withField(dateTimeFieldType68, 51);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField76 = property75.getField();
        boolean boolean77 = dateTimeField76.isLenient();
        boolean boolean78 = dateTimeField76.isLenient();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 122 + "'", int27 == 122);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 122 + "'", int71 == 122);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(299);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 13666595, true, 9223371988724660874L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1062733405L) + "'", long5 == (-1062733405L));
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        boolean boolean32 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withWeekOfWeekyear((int) (short) 10);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        int int41 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime.Property property43 = localDateTime8.era();
        org.joda.time.LocalDateTime.Property property44 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        boolean boolean51 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withWeekOfWeekyear((int) (short) 10);
        int int54 = localDateTime53.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime57 = property55.addToCopy(0L);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.year();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        boolean boolean60 = locale59.hasExtensions();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        java.lang.String str65 = property64.getAsString();
        org.joda.time.LocalDateTime localDateTime66 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField67 = property64.getField();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = property64.getAsText(locale68);
        org.joda.time.LocalDateTime localDateTime70 = property64.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField71 = property64.getField();
        boolean boolean72 = property64.isLeap();
        java.util.Locale locale73 = java.util.Locale.TAIWAN;
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale74.getDisplayVariant(locale75);
        java.lang.String str78 = locale74.getDisplayCountry();
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet80 = locale79.getExtensionKeys();
        java.lang.String str81 = locale79.getCountry();
        java.util.Locale locale82 = locale79.stripExtensions();
        java.lang.String str83 = locale74.getDisplayVariant(locale82);
        java.lang.String str84 = locale73.getDisplayLanguage(locale82);
        java.lang.String str85 = locale73.getDisplayCountry();
        java.lang.String str86 = property64.getAsShortText(locale73);
        java.lang.String str87 = locale59.getDisplayName(locale73);
        java.lang.String str88 = property58.getAsShortText(locale59);
        java.util.Set<java.lang.String> strSet89 = locale59.getUnicodeLocaleKeys();
        java.lang.String str90 = property44.getAsText(locale59);
        java.util.Locale locale92 = java.util.Locale.forLanguageTag("140");
        java.lang.String str93 = property44.getAsShortText(locale92);
        org.joda.time.LocalDateTime localDateTime94 = property44.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime96 = property44.setCopy(49604717);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49604717 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022" + "'", str69, "2022");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u4e2d\u6587" + "'", str84, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str85, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u4e2d\u6587" + "'", str87, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "122" + "'", str88, "122");
        org.junit.Assert.assertNotNull(strSet89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "13" + "'", str90, "13");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "13" + "'", str93, "13");
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = localDateTime0.toString("2022", locale5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.plus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(3);
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis((int) (short) 0);
        int int18 = localDateTime15.size();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) (short) 1);
        boolean boolean25 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeField dateTimeField27 = localDateTime24.getField(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.era();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        boolean boolean34 = dateTimeZone30.isLocalDateTimeGap(localDateTime33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withWeekyear((int) (byte) -1);
        boolean boolean47 = localDateTime43.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        boolean boolean54 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDateTime58.getFieldType((int) (short) 0);
        int int61 = localDateTime43.indexOf(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime33.withField(dateTimeFieldType60, (int) ' ');
        boolean boolean64 = localDateTime24.isSupported(dateTimeFieldType60);
        int int65 = localDateTime15.get(dateTimeFieldType60);
        boolean boolean66 = localDateTime11.isSupported(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime11.minusMinutes(22);
        int int69 = localDateTime68.getWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear((int) (short) 10);
        org.joda.time.Chronology chronology73 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime68, chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = localDateTime68.withHourOfDay(49530036);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49530036 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 5, 13, 49699169]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = durationField10.getType();
        long long14 = durationField10.getValueAsLong((-3119900L));
        long long17 = durationField10.subtract(9223371988911985173L, (long) 195);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = durationField10.add(9223371988911875605L, 9223371985513896000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 9223371985513896000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 9223365835244785173L + "'", long17 == 9223365835244785173L);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getMillisOfSecond();
        int int14 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        int int45 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime55 = property54.withMaximumValue();
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        int int59 = localDateTime58.size();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (short) 1);
        boolean boolean67 = dateTimeZone63.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long71 = dateTimeZone69.convertUTCToLocal(0L);
        long long73 = dateTimeZone63.getMillisKeepLocal(dateTimeZone69, 1L);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withCenturyOfEra((int) (short) 1);
        boolean boolean80 = localDateTime76.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withWeekOfWeekyear((int) (short) 10);
        int int83 = localDateTime79.getDayOfYear();
        boolean boolean84 = dateTimeZone69.isLocalDateTimeGap(localDateTime79);
        int int86 = dateTimeZone69.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.joda.time.DateTime dateTime88 = localDateTime61.toDateTime(dateTimeZone69);
        long long89 = dateTime88.getMillis();
        org.joda.time.DateTime dateTime90 = localDateTime58.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        int int91 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime88);
        int int92 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 271 + "'", int13 == 271);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49699271 + "'", int14 == 49699271);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2922789 + "'", int56 == 2922789);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 187200000L + "'", long71 == 187200000L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 44 + "'", int83 == 44);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 187200000 + "'", int86 == 187200000);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1644385699271L + "'", long89 == 1644385699271L);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 187200000 + "'", int91 == 187200000);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays(7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(36);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(154);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMinutes(49594623);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withPeriodAdded(readablePeriod6, 2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime0.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime0.toString(dateTimeFormatter12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minusDays((-1));
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-13T13:48:19.356" + "'", str13, "2022-02-13T13:48:19.356");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.size();
        int int10 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusHours(1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) (short) 0);
        int int17 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusDays(35121875);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsString();
        int int25 = property23.getMinimumValueOverall();
        java.lang.String str26 = property23.toString();
        org.joda.time.LocalDateTime localDateTime27 = property23.getLocalDateTime();
        java.lang.String str28 = property23.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property23.getFieldType();
        org.joda.time.DurationField durationField30 = property23.getDurationField();
        long long33 = durationField30.getMillis(9, (long) 42);
        long long35 = durationField30.getValueAsLong(1560042820555128000L);
        long long37 = durationField30.getMillis(20L);
        long long40 = durationField30.getDifferenceAsLong((long) 171, (long) 124);
        org.joda.time.DurationFieldType durationFieldType41 = durationField30.getType();
        boolean boolean42 = localDateTime19.isSupported(durationFieldType41);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[yearOfEra]" + "'", str26, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 283996800000L + "'", long33 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 49435789L + "'", long35 == 49435789L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 631139040000L + "'", long37 == 631139040000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = property3.toInterval();
        int int36 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int40 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusMinutes(625);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYear(35121875);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withCenturyOfEra(764);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minusHours(46857854);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra(38156803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38156803 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912099401L + "'", long33 == 9223371988912099401L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays(7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfCentury(49494536);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49494536 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        double double9 = languageRange1.getWeight();
        double double10 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = localDateTime0.toString("2022", locale5);
        int int8 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime14.getField(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.era();
        int int19 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale22.getDisplayLanguage(locale23);
        java.lang.String str28 = nameProvider20.getShortName(locale22, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = property32.setCopy((int) 'u');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekOfWeekyear();
        org.joda.time.Chronology chronology38 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) str28, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        java.lang.String str45 = property44.getAsString();
        org.joda.time.LocalDateTime localDateTime46 = property44.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDateTime59.getFieldType((int) (short) 0);
        boolean boolean62 = localDateTime46.isSupported(dateTimeFieldType61);
        int int63 = localDateTime40.indexOf(dateTimeFieldType61);
        int int64 = localDateTime14.indexOf(dateTimeFieldType61);
        int int65 = localDateTime0.indexOf(dateTimeFieldType61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime0.withMillisOfSecond(104);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u6cd5\u6587" + "'", str24, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "japonais" + "'", str25, "japonais");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = property8.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getCountry();
        java.lang.String str18 = locale14.getDisplayCountry(locale15);
        int int19 = property8.getMaximumShortTextLength(locale15);
        java.util.Locale.setDefault(category0, locale15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = property29.getAsText(locale33);
        java.lang.String str35 = dateTimeZone22.getShortName((long) (byte) 1, locale33);
        java.lang.String str36 = locale33.getDisplayVariant();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.yearOfEra();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.lang.String str46 = localDateTime39.toString("2022", locale44);
        java.util.Locale.Builder builder47 = builder38.setLocale(locale44);
        java.util.Locale locale48 = locale44.stripExtensions();
        java.lang.String str49 = locale33.getDisplayVariant(locale48);
        java.util.Locale.setDefault(category0, locale48);
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        boolean boolean58 = locale57.hasExtensions();
        java.lang.String str59 = locale56.getDisplayVariant(locale57);
        java.lang.String str60 = locale56.getDisplayCountry();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.lang.String str63 = locale61.getCountry();
        java.util.Locale locale64 = locale61.stripExtensions();
        java.lang.String str65 = locale56.getDisplayVariant(locale64);
        java.lang.String str66 = locale55.getDisplayLanguage(locale64);
        java.util.Locale.Builder builder67 = builder54.setLocale(locale55);
        java.util.Locale.Builder builder70 = builder67.setUnicodeLocaleKeyword("44", "CHN");
        java.util.Locale locale71 = builder67.build();
        java.lang.String str74 = nameProvider51.getShortName(locale71, "2022-02-12T09:46:00.960", "2022-02-13T13:45:30.772");
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone79 = dateTimeZone78.toTimeZone();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(38154052L, dateTimeZone78);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.dayOfYear();
        java.util.Locale locale82 = java.util.Locale.ITALIAN;
        java.util.Locale locale83 = java.util.Locale.CHINESE;
        boolean boolean84 = locale83.hasExtensions();
        boolean boolean85 = locale83.hasExtensions();
        java.lang.String str86 = locale83.getISO3Country();
        java.lang.String str87 = locale82.getDisplayName(locale83);
        int int88 = property81.getMaximumTextLength(locale83);
        java.lang.String str89 = locale83.getVariant();
        java.lang.String str92 = nameProvider51.getShortName(locale83, "0122-02-13T13:44:26.891", "2667-02-13T13:46:48.497");
        java.lang.String str93 = locale83.getDisplayLanguage();
        java.lang.String str94 = locale48.getDisplayName(locale83);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.100" + "'", str35, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(nameProvider51);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u6587" + "'", str66, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW_#u-44-chn");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str87, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u4e2d\u6587" + "'", str93, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u4e2d\u6587" + "'", str94, "\u4e2d\u6587");
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        boolean boolean12 = localDateTime8.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((int) (short) 0);
        int int26 = localDateTime8.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        boolean boolean34 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime33.getField(0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.era();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        boolean boolean43 = dateTimeZone39.isLocalDateTimeGap(localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        boolean boolean50 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear((int) (byte) -1);
        boolean boolean56 = localDateTime52.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        boolean boolean63 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime67.getFieldType((int) (short) 0);
        int int70 = localDateTime52.indexOf(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime42.withField(dateTimeFieldType69, (int) ' ');
        boolean boolean73 = localDateTime33.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property74 = localDateTime33.yearOfEra();
        boolean boolean75 = property27.equals((java.lang.Object) localDateTime33);
        boolean boolean76 = property27.isLeap();
        org.joda.time.LocalDateTime localDateTime77 = property27.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField78 = property27.getField();
        java.lang.String str79 = property27.getAsShortText();
        org.joda.time.Interval interval80 = property27.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime82 = property27.setCopy("292278993-02-13T13:44:49.711");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"292278993-02-13T13:44:49.711\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "49699630" + "'", str79, "49699630");
        org.junit.Assert.assertNotNull(interval80);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = locale5.getCountry();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.lang.String str9 = locale0.getDisplayVariant(locale8);
        java.lang.String str10 = locale0.getVariant();
        boolean boolean11 = locale0.hasExtensions();
        java.lang.String str12 = locale0.getVariant();
        java.util.Locale locale13 = locale0.stripExtensions();
        java.lang.String str14 = locale0.getDisplayLanguage();
        java.lang.String str15 = locale0.getDisplayVariant();
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category16);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category16, locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        boolean boolean27 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeField dateTimeField29 = localDateTime26.getField(0);
        java.lang.String str30 = localDateTime26.toString();
        int int31 = localDateTime26.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = property32.equals((java.lang.Object) locale33);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale38.getDisplayVariant(locale39);
        java.lang.String str42 = locale38.getDisplayCountry();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.lang.String str45 = locale43.getCountry();
        java.util.Locale locale46 = locale43.stripExtensions();
        java.lang.String str47 = locale38.getDisplayVariant(locale46);
        java.lang.String str48 = locale37.getDisplayLanguage(locale46);
        java.util.Locale.Builder builder49 = builder36.setLocale(locale37);
        java.util.Locale locale50 = builder36.build();
        java.util.Locale locale51 = builder36.build();
        java.util.Locale locale52 = builder36.build();
        java.lang.String str53 = locale33.getDisplayCountry(locale52);
        java.util.Locale.setDefault(category16, locale33);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.lang.String str62 = localDateTime55.toString("2022", locale60);
        java.util.Locale.setDefault(category16, locale60);
        java.lang.String str64 = locale0.getDisplayVariant(locale60);
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale66 = java.util.Locale.UK;
        java.lang.String str67 = locale0.getDisplayCountry(locale66);
        java.lang.String str68 = locale66.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0122-02-13T13:48:19.649" + "'", str30, "0122-02-13T13:48:19.649");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e2d\u6587" + "'", str48, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u7fa9\u5927\u5229" + "'", str53, "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022" + "'", str62, "2022");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en-GB" + "'", str68, "en-GB");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0122-02-13T13:45:33.289", (double) 262);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=262.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(38156803);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusDays(35151617);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-14T13:46:59.578");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale7.getDisplayVariant(locale8);
        java.lang.String str11 = locale3.getDisplayName(locale8);
        java.util.Set<java.lang.Character> charSet12 = locale3.getExtensionKeys();
        java.lang.String str13 = locale3.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime1.toString("0122-02-13T13:46:50.312", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587" + "'", str11, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(38154052L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(38190573);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38190573 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        int int4 = property3.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        java.lang.String[] strArray26 = java.util.TimeZone.getAvailableIDs((int) (byte) -1);
        boolean boolean27 = dateTimeZone24.equals((java.lang.Object) strArray26);
        java.lang.String str29 = dateTimeZone24.getShortName(1644385560L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("JPN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: minuteOfHour [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(38156803);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("0122-02-11T09:43:49.336");
        int int15 = property11.getMaximumShortTextLength(locale14);
        java.lang.String str16 = property11.getAsShortText();
        boolean boolean17 = property11.isLeap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Feb" + "'", str16, "Feb");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusSeconds(511);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMonths(10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withTime(125, 436, 49649066, 685);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 125 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder0.setLanguageTag("years");
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("zh");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.lang.String str24 = locale19.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale20);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getScript();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale.setDefault(category26, locale27);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.lang.String str38 = localDateTime31.toString("2022", locale36);
        java.util.Locale.setDefault(category26, locale36);
        java.util.Locale locale40 = java.util.Locale.getDefault(category26);
        java.util.Locale.Builder builder41 = builder18.setLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder18.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property10.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMaximumValue();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = property24.getAsText(locale28);
        int int30 = property20.getMaximumShortTextLength(locale28);
        int int31 = property13.getMaximumShortTextLength(locale28);
        java.lang.String str32 = locale28.getDisplayName();
        java.util.Locale.setDefault(category0, locale28);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundCeilingCopy();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        boolean boolean43 = locale42.hasExtensions();
        java.lang.String str44 = locale41.getDisplayVariant(locale42);
        java.lang.String str45 = locale41.getDisplayCountry();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str48 = locale46.getCountry();
        java.util.Locale locale49 = locale46.stripExtensions();
        java.lang.String str50 = locale41.getDisplayVariant(locale49);
        java.lang.String str51 = locale40.getDisplayLanguage(locale49);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.lang.String str54 = locale52.getCountry();
        java.lang.String str55 = locale40.getDisplayLanguage(locale52);
        java.util.Locale locale56 = locale52.stripExtensions();
        java.lang.String str57 = property38.getAsText(locale56);
        java.util.Locale.setDefault(category0, locale56);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "chinois" + "'", str32, "chinois");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587" + "'", str51, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("CHN");
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("utc");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setScript("2022-01-02T19:59:59.283");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-01-02T19:59:59.283 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = property3.toInterval();
        int int36 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int40 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime41 = property3.roundHalfEvenCopy();
        int int42 = localDateTime41.getMonthOfYear();
        int int43 = localDateTime41.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912100276L + "'", long33 == 9223371988912100276L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(9223371988911865675L);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime10 = property6.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = property6.addToCopy((long) (byte) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfEra();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = property18.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime24 = property18.withMaximumValue();
        boolean boolean25 = localDateTime14.equals((java.lang.Object) localDateTime24);
        boolean boolean26 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withWeekOfWeekyear((int) (short) 10);
        int int44 = localDateTime43.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = property45.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        boolean boolean56 = dateTimeZone52.isLocalDateTimeGap(localDateTime55);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra((int) (short) 1);
        boolean boolean63 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withWeekyear((int) (byte) -1);
        boolean boolean69 = localDateTime65.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (short) 1);
        boolean boolean76 = localDateTime72.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = localDateTime80.getFieldType((int) (short) 0);
        int int83 = localDateTime65.indexOf(dateTimeFieldType82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime55.withField(dateTimeFieldType82, (int) ' ');
        boolean boolean86 = dateTime50.isSupported(dateTimeFieldType82);
        int int87 = localDateTime12.get(dateTimeFieldType82);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime1.withField(dateTimeFieldType82, 125);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.LocalDateTime localDateTime91 = localDateTime1.minus(readableDuration90);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayVariant(locale11);
        java.lang.String str14 = locale10.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale10.getDisplayVariant(locale18);
        java.lang.String str20 = locale9.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder21 = builder8.setLocale(locale9);
        boolean boolean22 = localDateTime5.equals((java.lang.Object) builder8);
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String str27 = locale24.getDisplayVariant(locale25);
        java.lang.String str28 = locale24.getDisplayCountry();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.lang.String str31 = locale29.getCountry();
        java.util.Locale locale32 = locale29.stripExtensions();
        java.lang.String str33 = locale24.getDisplayVariant(locale32);
        java.lang.String str34 = locale23.getDisplayLanguage(locale32);
        java.util.Locale.Builder builder35 = builder8.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder35.setRegion("jpn");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: jpn [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        int int38 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        java.lang.String str39 = localDateTime37.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusSeconds(49475936);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond(49497363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49497363 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 44 + "'", int32 == 44);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0122-02-13T13:48:20.578" + "'", str39, "0122-02-13T13:48:20.578");
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        int int11 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        int int14 = property10.getMinimumValue();
        java.lang.String str15 = property10.getAsShortText();
        org.joda.time.LocalDateTime localDateTime17 = property10.addWrapFieldToCopy(49526562);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readableDuration18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusSeconds(15);
        int int22 = localDateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 122 + "'", int22 == 122);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = dateTimeZone9.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long17 = dateTimeZone15.convertUTCToLocal(0L);
        long long19 = dateTimeZone9.getMillisKeepLocal(dateTimeZone15, 1L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        int int29 = localDateTime25.getDayOfYear();
        boolean boolean30 = dateTimeZone15.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusMinutes(4);
        int int33 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusDays(49500309);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 187200000L + "'", long17 == 187200000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 44 + "'", int29 == 44);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.lang.String str20 = localDateTime13.toString("2022", locale18);
        java.util.Locale locale22 = new java.util.Locale("2022");
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getScript();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale18, locale22, locale23, locale25, locale26, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet34);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.lang.String str47 = localDateTime40.toString("2022", locale45);
        java.util.Locale locale49 = new java.util.Locale("2022");
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale45, locale49, locale50, locale52, locale53, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList57);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone65 = provider63.getZone("2022-02-12T09:43:52.434");
        java.util.Set<java.lang.String> strSet66 = provider63.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        org.joda.time.DateTimeZone.setProvider(provider63);
        java.util.Set<java.lang.String> strSet70 = provider63.getAvailableIDs();
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet70);
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        boolean boolean75 = locale74.hasExtensions();
        java.lang.String str76 = locale73.getDisplayVariant(locale74);
        java.lang.String str77 = locale73.getDisplayCountry();
        java.util.Locale locale78 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        java.lang.String str80 = locale78.getCountry();
        java.util.Locale locale81 = locale78.stripExtensions();
        java.lang.String str82 = locale73.getDisplayVariant(locale81);
        java.lang.String str83 = locale72.getDisplayLanguage(locale81);
        java.util.Set<java.lang.Character> charSet84 = locale81.getExtensionKeys();
        java.util.Set<java.lang.String> strSet85 = locale81.getUnicodeLocaleKeys();
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertEquals(locale22.toString(), "2022");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertEquals(locale49.toString(), "2022");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u4e2d\u6587" + "'", str83, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 44);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 10, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime0.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime0.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        boolean boolean24 = property23.isLeap();
        org.joda.time.LocalDateTime localDateTime25 = property23.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property23.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        java.lang.String str31 = property30.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property30.withMaximumValue();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusDays(349800000);
        boolean boolean36 = localDateTime26.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.plusSeconds(38170779);
        boolean boolean40 = dateTimeZone7.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalDateTime.Property property41 = localDateTime26.weekOfWeekyear();
        java.lang.String str42 = property41.getAsText();
        org.joda.time.LocalDateTime localDateTime44 = property41.addToCopy(49550396);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "6" + "'", str42, "6");
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = localDateTime1.toString("2022", locale6);
        java.lang.String str11 = nameProvider0.getName(locale6, "2022-02-12T09:43:52.434", "+00:00");
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        boolean boolean26 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        int int29 = localDateTime25.getDayOfYear();
        boolean boolean30 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minusWeeks(42);
        org.joda.time.LocalDateTime.Property property33 = localDateTime25.era();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        boolean boolean40 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) (byte) 1);
        int int47 = localDateTime44.getMillisOfSecond();
        int int48 = localDateTime44.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        int int58 = localDateTime57.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = property59.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) (short) 1);
        boolean boolean70 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withWeekOfWeekyear((int) (short) 10);
        int int73 = localDateTime72.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = property74.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        int int79 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime80 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        java.util.Locale locale83 = new java.util.Locale("Property[yearOfEra]");
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        boolean boolean85 = locale84.hasExtensions();
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str87 = locale84.getISO3Country();
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale83.getDisplayVariant(locale84);
        boolean boolean90 = dateTime80.equals((java.lang.Object) locale83);
        int int91 = property33.getMaximumTextLength(locale83);
        java.lang.String str94 = nameProvider0.getName(locale83, "2022-02-13T13:47:35.668", "2022-02-12T10:39:49.688");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 44 + "'", int29 == 44);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 891 + "'", int47 == 891);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 49700891 + "'", int48 == 49700891);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertEquals(locale83.toString(), "property[yearofera]");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        int int11 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusDays(948);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readableDuration15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfSecond();
        int int18 = localDateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 1);
        boolean boolean8 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekOfWeekyear((int) (short) 10);
        int int11 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = dateTimeZone14.isLocalDateTimeGap(localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long22 = dateTimeZone20.convertUTCToLocal(0L);
        long long24 = dateTimeZone14.getMillisKeepLocal(dateTimeZone20, 1L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        boolean boolean31 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withWeekOfWeekyear((int) (short) 10);
        int int34 = localDateTime30.getDayOfYear();
        boolean boolean35 = dateTimeZone20.isLocalDateTimeGap(localDateTime30);
        int int36 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime37 = property12.withMaximumValue();
        boolean boolean38 = dateTimeZone1.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        long long41 = dateTimeZone1.previousTransition(0L);
        java.lang.String str43 = dateTimeZone1.getShortName((-59007881700971L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200000L + "'", long22 == 187200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 44 + "'", int34 == 44);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis(9, (long) 42);
        long long16 = durationField10.getDifferenceAsLong((long) 3, 9223371988911832894L);
        long long19 = durationField10.getDifferenceAsLong((long) 736, 9223371988911842394L);
        long long21 = durationField10.getValueAsLong((-49466L));
        long long23 = durationField10.getMillis(312);
        long long26 = durationField10.add((long) 69, 0L);
        int int28 = durationField10.getValue(3580697084L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 283996800000L + "'", long13 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292277023L) + "'", long16 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-292277023L) + "'", long19 == (-292277023L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9845769024000L + "'", long23 == 9845769024000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 69L + "'", long26 == 69L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("-21112-03-08T03:48:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-21112-03-08t03:48:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 42);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = dateTimeZone2.getShortName((long) 56, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        boolean boolean12 = timeZone8.hasSameRules(timeZone11);
        timeZone8.setRawOffset(49461189);
        timeZone8.setRawOffset(122);
        int int17 = timeZone8.getRawOffset();
        boolean boolean18 = timeZone8.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+97:10" + "'", str7, "+97:10");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 122 + "'", int17 == 122);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int[] intArray9 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minus(readablePeriod11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.LocalDateTime localDateTime17 = property14.addWrapFieldToCopy(49535525);
        int int18 = property14.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[122, 2, 13, 49701010]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = property3.setCopy((int) 'u');
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withPeriodAdded(readablePeriod9, 736);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.toString();
        org.joda.time.LocalDateTime localDateTime21 = property17.getLocalDateTime();
        java.lang.String str22 = property17.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property17.getFieldType();
        org.joda.time.DurationField durationField24 = property17.getDurationField();
        long long27 = durationField24.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        java.lang.String str32 = property31.getAsString();
        int int33 = property31.getMinimumValueOverall();
        java.lang.String str34 = property31.toString();
        org.joda.time.LocalDateTime localDateTime35 = property31.getLocalDateTime();
        java.lang.String str36 = property31.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property31.getFieldType();
        org.joda.time.DurationField durationField38 = property31.getDurationField();
        java.lang.String str39 = durationField38.toString();
        org.joda.time.DurationFieldType durationFieldType40 = durationField38.getType();
        int int41 = durationField24.compareTo(durationField38);
        int int44 = durationField38.getDifference((-92234312150400000L), (long) 10);
        org.joda.time.DurationFieldType durationFieldType45 = durationField38.getType();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime11.withFieldAdded(durationFieldType45, 35118727);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(49534834);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0117-02-13T13:48:21.023" + "'", str8, "0117-02-13T13:48:21.023");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-31622400000L) + "'", long27 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[yearOfEra]" + "'", str34, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DurationField[years]" + "'", str39, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-2922789) + "'", int44 == (-2922789));
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        int int5 = property3.getMinimumValueOverall();
        java.lang.String str6 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.getLocalDateTime();
        java.lang.String str8 = property3.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property3.getFieldType();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        long long13 = durationField10.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        java.lang.String str18 = property17.getAsString();
        int int19 = property17.getMinimumValueOverall();
        java.lang.String str20 = property17.toString();
        org.joda.time.LocalDateTime localDateTime21 = property17.getLocalDateTime();
        java.lang.String str22 = property17.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property17.getFieldType();
        org.joda.time.DurationField durationField24 = property17.getDurationField();
        java.lang.String str25 = durationField24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = durationField24.getType();
        int int27 = durationField10.compareTo(durationField24);
        java.lang.String str28 = durationField10.toString();
        long long29 = durationField10.getUnitMillis();
        long long31 = durationField10.getMillis(0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[yearOfEra]" + "'", str6, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31622400000L) + "'", long13 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[yearOfEra]" + "'", str20, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[years]" + "'", str25, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DurationField[years]" + "'", str28, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 31556952000L + "'", long29 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        java.util.Locale locale1 = new java.util.Locale("dayOfWeek");
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "dayofweek");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        charSet2.clear();
        java.lang.Object obj4 = null;
        boolean boolean5 = charSet2.contains(obj4);
        int int6 = charSet2.size();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream9 = charSet8.parallelStream();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        boolean boolean24 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withWeekOfWeekyear((int) (short) 10);
        int int27 = localDateTime23.getDayOfYear();
        boolean boolean28 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusWeeks(42);
        boolean boolean31 = charSet8.remove((java.lang.Object) localDateTime30);
        boolean boolean33 = charSet8.contains((java.lang.Object) 100);
        boolean boolean34 = charSet8.isEmpty();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream37 = charSet36.parallelStream();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getScript();
        java.util.Set<java.lang.Character> charSet40 = locale38.getExtensionKeys();
        boolean boolean41 = charSet36.containsAll((java.util.Collection<java.lang.Character>) charSet40);
        java.util.Spliterator<java.lang.Character> charSpliterator42 = charSet36.spliterator();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream45 = charSet44.parallelStream();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getScript();
        java.util.Set<java.lang.Character> charSet48 = locale46.getExtensionKeys();
        boolean boolean49 = charSet44.containsAll((java.util.Collection<java.lang.Character>) charSet48);
        boolean boolean51 = charSet44.contains((java.lang.Object) 390);
        boolean boolean52 = charSet36.removeAll((java.util.Collection<java.lang.Character>) charSet44);
        boolean boolean53 = charSet44.isEmpty();
        boolean boolean54 = charSet8.addAll((java.util.Collection<java.lang.Character>) charSet44);
        boolean boolean55 = charSet44.isEmpty();
        boolean boolean56 = charSet2.retainAll((java.util.Collection<java.lang.Character>) charSet44);
        java.util.stream.Stream<java.lang.Character> charStream57 = charSet44.stream();
        int int58 = charSet44.size();
        java.lang.Object[] objArray59 = charSet44.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(charStream9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 44 + "'", int27 == 44);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(charStream37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charSpliterator42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(charStream45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("0122-03-06T13:46:56.943+52:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0122-03-06T13:46:56.943+52:00\" is malformed at \"+52:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int[] intArray56 = localDateTime52.getValues();
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.secondOfMinute();
        java.lang.String str58 = property57.getName();
        boolean boolean59 = property46.equals((java.lang.Object) property57);
        org.joda.time.LocalDateTime localDateTime60 = property57.roundHalfFloorCopy();
        boolean boolean61 = property57.isLeap();
        org.joda.time.DurationField durationField62 = property57.getRangeDurationField();
        int int64 = durationField62.getValue(1000L);
        long long67 = durationField62.getMillis((long) 195, (long) 1533600000);
        long long70 = durationField62.getValueAsLong(9223371989099102586L, (-29537308799990L));
        // The following exception was thrown during execution in test generation
        try {
            long long73 = durationField62.add(9223371988911926004L, 9223371988912028136L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 9223371988912028136 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[122, 2, 13, 49701191]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "secondOfMinute" + "'", str58, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 11700000L + "'", long67 == 11700000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 153722866484985L + "'", long70 == 153722866484985L);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        java.util.Locale locale1 = new java.util.Locale("0122-02-13T13:45:50.306");
        org.junit.Assert.assertEquals(locale1.toString(), "0122-02-13t13:45:50.306");
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = property3.setCopy((int) 'u');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.year();
        int int25 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        boolean boolean32 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekyear((int) (byte) -1);
        boolean boolean38 = localDateTime34.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        boolean boolean45 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime49.getFieldType((int) (short) 0);
        int int52 = localDateTime34.indexOf(dateTimeFieldType51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime16.property(dateTimeFieldType51);
        org.joda.time.LocalDateTime.Property property54 = localDateTime10.property(dateTimeFieldType51);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withCenturyOfEra((int) (short) 1);
        boolean boolean61 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks((int) (byte) 1);
        int int68 = localDateTime65.getMillisOfSecond();
        int int69 = localDateTime65.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.minusSeconds((int) (short) -1);
        int int72 = property54.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime74 = property54.addWrapFieldToCopy(4);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withDayOfYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusDays(49475936);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 258 + "'", int68 == 258);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 49701258 + "'", int69 == 49701258);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(417);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(4);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(426);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        int int32 = localDateTime31.getYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = dateTimeZone34.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long42 = dateTimeZone40.convertUTCToLocal(0L);
        long long44 = dateTimeZone34.getMillisKeepLocal(dateTimeZone40, 1L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, dateTimeZone34);
        boolean boolean46 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        boolean boolean47 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        boolean boolean48 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime10.minus(readableDuration49);
        int int51 = localDateTime10.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime10.minus(readableDuration52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime10.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 187200000L + "'", long42 == 187200000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 49701423 + "'", int51 == 49701423);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds(35035070);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        boolean boolean13 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusDays((-1));
        int int20 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        java.lang.String str21 = localDateTime6.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0121-01-04T01:50:42.452" + "'", str21, "0121-01-04T01:50:42.452");
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(661);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.661" + "'", str2, "+00:00:00.661");
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        boolean boolean17 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekOfWeekyear((int) (short) 10);
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        boolean boolean32 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withWeekOfWeekyear((int) (short) 10);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        int int41 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology43 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime8.hourOfDay();
        java.lang.String str45 = property44.getAsText();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        boolean boolean48 = locale47.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry(locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale47.getVariant();
        java.lang.String str52 = property44.getAsShortText(locale47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = property44.setCopy("2021-07-29T13:48:20.563");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2021-07-29T13:48:20.563\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "13" + "'", str45, "13");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "13" + "'", str52, "13");
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("GMT");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setScript("\u7f8e\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(38156803);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withCenturyOfEra(56);
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromDateFields(date13);
        int int16 = localDateTime15.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime15.toString(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 14 13:48:22 GMT+00:00 5622");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 556 + "'", int16 == 556);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "5622-02-14T13:48:22.556" + "'", str19, "5622-02-14T13:48:22.556");
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(57, 369, 38191357, 49531691, 0, 49523375, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49531691 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        java.util.Locale locale3 = new java.util.Locale("", "-946859-03-24T13:45:55.813", "14031723");
        org.junit.Assert.assertEquals(locale3.toString(), "_-946859-03-24T13:45:55.813_14031723");
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream5 = charSet4.parallelStream();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream8 = charSet7.parallelStream();
        boolean boolean9 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean10 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getScript();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        charSet13.clear();
        java.lang.Object obj15 = null;
        boolean boolean16 = charSet13.contains(obj15);
        boolean boolean17 = charSet13.isEmpty();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream20 = charSet19.parallelStream();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getScript();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        boolean boolean24 = charSet19.containsAll((java.util.Collection<java.lang.Character>) charSet23);
        boolean boolean25 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet23);
        boolean boolean26 = charSet23.isEmpty();
        boolean boolean27 = charSet7.addAll((java.util.Collection<java.lang.Character>) charSet23);
        java.util.Spliterator<java.lang.Character> charSpliterator28 = charSet7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = charSet7.add((java.lang.Character) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charStream5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(charStream20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSpliterator28);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayLanguage(locale3);
        java.lang.String str8 = nameProvider0.getShortName(locale2, "-0009-12-10T10:36:01.486", "40005-02-09T10:36:05.183");
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str14 = nameProvider0.getShortName(locale9, "0122-02-13T13:44:36.449+52:00", "");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        java.lang.String str24 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = property23.getAsText(locale27);
        java.lang.String str29 = dateTimeZone16.getShortName((long) (byte) 1, locale27);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeField dateTimeField38 = localDateTime35.getField(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.era();
        boolean boolean40 = dateTimeZone16.equals((java.lang.Object) property39);
        long long43 = dateTimeZone16.convertLocalToUTC((long) 'x', true);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.lang.String str52 = localDateTime45.toString("2022", locale50);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = locale50.getDisplayCountry(locale53);
        java.lang.String str55 = dateTimeZone16.getName((long) (-1010871120), locale53);
        java.lang.String str58 = nameProvider0.getShortName(locale53, "secondOfMinute", "UTC");
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        boolean boolean62 = locale61.hasExtensions();
        java.lang.String str63 = locale60.getDisplayCountry(locale61);
        java.lang.String str64 = locale60.getDisplayScript();
        java.lang.String str67 = nameProvider59.getName(locale60, "0122-03-04T09:43:54.641Z", "\u516c\u5143");
        java.util.Locale locale70 = new java.util.Locale("0122-02-11T09:45:13.400", "");
        java.lang.String str73 = nameProvider59.getShortName(locale70, "Property[dayOfYear]", "292278993-02-13T13:44:30.911");
        java.lang.String str76 = nameProvider0.getShortName(locale70, "zho", "UTC");
        java.util.Locale locale79 = new java.util.Locale("+426:00", "0122-02-11T10:35:57.632");
        java.lang.String str82 = nameProvider0.getName(locale79, "\uc911\uad6d\uc5b4", "millis");
        java.util.Locale locale84 = new java.util.Locale("Sun");
        java.lang.String str85 = locale84.getScript();
        java.lang.String str88 = nameProvider0.getName(locale84, "2022-02-14T13:46:59.578", "2022-02-11T09:48:08.334");
        java.lang.String str89 = locale84.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str4, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "japonais" + "'", str5, "japonais");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "0122-02-13t13:44:13.019_+00:00:00.100");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (Taiwan)" + "'", str11, "Chinese (Taiwan)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.100" + "'", str29, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 20L + "'", long43 == 20L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.100" + "'", str55, "+00:00:00.100");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals(locale70.toString(), "0122-02-11t09:45:13.400");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals(locale79.toString(), "+426:00_0122-02-11T10:35:57.632");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals(locale84.toString(), "sun");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = property3.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        long long33 = dateTime32.getMillis();
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = property3.toInterval();
        int int36 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int40 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.dayOfYear();
        boolean boolean42 = property41.isLeap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9223371988912101749L + "'", long33 == 9223371988912101749L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-292276970L) + "'", long34 == (-292276970L));
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withHourOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        boolean boolean20 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear((int) (short) 10);
        int[] intArray23 = localDateTime19.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.yearOfCentury();
        int int25 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) (short) 10);
        org.joda.time.Chronology chronology29 = localDateTime26.getChronology();
        boolean boolean30 = localDateTime19.equals((java.lang.Object) localDateTime26);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.plus(readableDuration31);
        int int33 = localDateTime19.getEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[122, 2, 13, 49701776]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology7 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.plusMinutes(0);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 22);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMinutes(35114213);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minus(readablePeriod16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusSeconds(49672864);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 122 + "'", int13 == 122);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 48 + "'", int20 == 48);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(38154052L, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        boolean boolean30 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withWeekOfWeekyear((int) (short) 10);
        int int33 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = localDateTime23.toDateTime(readableInstant37);
        long long40 = dateTime39.getMillis();
        long long41 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Interval interval42 = property10.toInterval();
        int int43 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int int47 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = property6.equals((java.lang.Object) property10);
        org.joda.time.LocalDateTime localDateTime50 = property10.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime51 = property10.withMaximumValue();
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.dayOfWeek();
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = locale54.getDisplayName(locale55);
        int int57 = property53.getMaximumTextLength(locale54);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223371988912102021L + "'", long40 == 9223371988912102021L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-292276970L) + "'", long41 == (-292276970L));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "0122-02-13t13:44:13.019_+00:00:00.100");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (Taiwan)" + "'", str56, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale11.getDisplayVariant(locale12);
        java.lang.String str15 = locale11.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = locale16.getCountry();
        java.util.Locale locale19 = locale16.stripExtensions();
        java.lang.String str20 = locale11.getDisplayVariant(locale19);
        java.lang.String str21 = locale10.getDisplayLanguage(locale19);
        java.util.Locale.Builder builder22 = builder9.setLocale(locale10);
        java.util.Locale.Builder builder24 = builder9.setLanguageTag("years");
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder25.clearExtensions();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getScript();
        java.util.Locale.Builder builder30 = builder25.setLocale(locale28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale35.getDisplayVariant(locale36);
        java.lang.String str39 = locale31.getDisplayName(locale36);
        java.lang.String str40 = locale28.getDisplayVariant(locale36);
        java.lang.String str41 = locale36.getLanguage();
        int int42 = property6.getMaximumShortTextLength(locale36);
        boolean boolean43 = locale36.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587" + "'", str21, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u82f1\u6587" + "'", str39, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) (short) 100);
        int int11 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusSeconds(390);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withYearOfEra(51);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        int int27 = localDateTime26.getDayOfWeek();
        int int28 = localDateTime26.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        int int38 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        java.lang.String str46 = property45.getAsString();
        int int47 = property45.getMinimumValueOverall();
        java.lang.String str48 = property45.toString();
        org.joda.time.LocalDateTime localDateTime49 = property45.getLocalDateTime();
        java.lang.String str50 = property45.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property45.getFieldType();
        org.joda.time.DurationField durationField52 = property45.getDurationField();
        long long55 = durationField52.getMillis((long) (byte) -1, 9223371988911839815L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.yearOfEra();
        java.lang.String str60 = property59.getAsString();
        int int61 = property59.getMinimumValueOverall();
        java.lang.String str62 = property59.toString();
        org.joda.time.LocalDateTime localDateTime63 = property59.getLocalDateTime();
        java.lang.String str64 = property59.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property59.getFieldType();
        org.joda.time.DurationField durationField66 = property59.getDurationField();
        java.lang.String str67 = durationField66.toString();
        org.joda.time.DurationFieldType durationFieldType68 = durationField66.getType();
        int int69 = durationField52.compareTo(durationField66);
        java.lang.String str70 = durationField52.toString();
        org.joda.time.DurationFieldType durationFieldType71 = durationField52.getType();
        boolean boolean72 = localDateTime41.isSupported(durationFieldType71);
        boolean boolean73 = localDateTime26.isSupported(durationFieldType71);
        boolean boolean74 = localDateTime15.isSupported(durationFieldType71);
        int int75 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[yearOfEra]" + "'", str48, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022" + "'", str50, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-31622400000L) + "'", long55 == (-31622400000L));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Property[yearOfEra]" + "'", str62, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022" + "'", str64, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DurationField[years]" + "'", str67, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DurationField[years]" + "'", str70, "DurationField[years]");
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int[] intArray9 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.secondOfMinute();
        java.lang.String str11 = property10.getName();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        int int15 = durationField12.getValue((long) 69, (long) 52);
        long long18 = durationField12.subtract((long) 38158052, 4);
        long long19 = durationField12.getUnitMillis();
        boolean boolean20 = durationField12.isSupported();
        java.lang.String str21 = durationField12.toString();
        int int24 = durationField12.getValue((-13879298L), 187200713L);
        long long26 = durationField12.getMillis(38254258);
        long long28 = durationField12.getMillis(25845215771717L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[122, 2, 13, 49702264]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 38154052L + "'", long18 == 38154052L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1000L + "'", long19 == 1000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DurationField[seconds]" + "'", str21, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-13879) + "'", int24 == (-13879));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 38254258000L + "'", long26 == 38254258000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 25845215771717000L + "'", long28 == 25845215771717000L);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        java.util.Locale locale3 = new java.util.Locale("0122-03-06T13:46:52.008+52:00", "0122-02-13T13:46:58.957", "292278993-02-11T09:46:00.576");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale6.getDisplayVariant(locale7);
        java.lang.String str10 = locale6.getDisplayCountry();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale11.getCountry();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale6.getDisplayVariant(locale14);
        java.lang.String str16 = locale5.getDisplayLanguage(locale14);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale5.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getDisplayScript();
        java.util.Locale locale22 = new java.util.Locale("0122-02-11T10:36:09.548");
        java.lang.String str23 = locale17.getDisplayCountry(locale22);
        java.lang.String str24 = locale3.getDisplayLanguage(locale22);
        org.junit.Assert.assertEquals(locale3.toString(), "0122-03-06t13:46:52.008+52:00_0122-02-13T13:46:58.957_292278993-02-11T09:46:00.576");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587" + "'", str16, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale22.toString(), "0122-02-11t10:36:09.548");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "China" + "'", str23, "China");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0122-03-06t13:46:52.008+52:00" + "'", str24, "0122-03-06t13:46:52.008+52:00");
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withCenturyOfEra((int) (short) 1);
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long9 = dateTimeZone7.convertUTCToLocal(0L);
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 1L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime17.getDayOfYear();
        boolean boolean22 = dateTimeZone7.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plusMinutes(4);
        java.lang.String str25 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187200000L + "'", long9 == 187200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0122-02-13T13:48:22.446" + "'", str25, "0122-02-13T13:48:22.446");
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        boolean boolean10 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (short) 1);
        boolean boolean21 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withWeekOfWeekyear((int) (short) 10);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        boolean boolean36 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withWeekOfWeekyear((int) (short) 10);
        int int39 = localDateTime38.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        int int45 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra((int) (short) 1);
        boolean boolean53 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withWeekOfWeekyear((int) (short) 10);
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = property57.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) (short) 1);
        boolean boolean68 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withWeekOfWeekyear((int) (short) 10);
        int int71 = localDateTime70.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = property72.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        int int77 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDateTime.Property property80 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property81 = localDateTime0.hourOfDay();
        int[] intArray82 = localDateTime0.getValues();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[2022, 2, 13, 49702484]");
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        int[] intArray11 = localDateTime8.getValues();
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        int int14 = localDateTime13.size();
        int int15 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays(49466800);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        java.lang.String str21 = property20.getAsString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[122, 3, 6, 49702579]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8" + "'", str21, "8");
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder3 = builder1.setLocale(locale2);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale5.getDisplayVariant(locale6);
        java.lang.String str9 = locale4.getDisplayLanguage(locale5);
        java.lang.String str10 = locale4.getVariant();
        java.lang.String str11 = locale4.getVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale4);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(69);
        java.lang.String str15 = dateTimeZone14.toString();
        boolean boolean16 = dateTimeZone14.isFixed();
        long long20 = dateTimeZone14.convertLocalToUTC((long) 38171489, false, (long) 349800000);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str24 = locale22.getCountry();
        java.util.Locale locale25 = locale22.stripExtensions();
        boolean boolean26 = locale22.hasExtensions();
        java.lang.String str27 = locale22.getCountry();
        java.lang.String str28 = locale22.getCountry();
        java.lang.String str29 = dateTimeZone14.getShortName((long) 35083841, locale22);
        java.util.Locale.Builder builder30 = builder3.setLocale(locale22);
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        java.lang.String str36 = property35.getAsString();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField38 = property35.getField();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = property35.getAsText(locale39);
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = locale39.getISO3Country();
        java.util.Locale locale43 = locale39.stripExtensions();
        java.util.Locale.Builder builder44 = builder30.setLocale(locale43);
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = new java.util.Locale("0122-02-11T09:43:49.336", "Greenwich Mean Time", "0122-02-11T09:43:51.772");
        java.util.Locale.setDefault(category45, locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = locale51.getDisplayCountry();
        java.util.Locale.setDefault(category45, locale51);
        java.util.Locale locale55 = java.util.Locale.getDefault(category45);
        java.util.Locale.Builder builder56 = builder30.setLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder30.setUnicodeLocaleKeyword("\u516c\u5143", "2022-02-14T13:48:08.877");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+69:00" + "'", str15, "+69:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-210228511L) + "'", long20 == (-210228511L));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+69:00" + "'", str29, "+69:00");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale49.toString(), "0122-02-11t09:43:49.336_GREENWICH MEAN TIME_0122-02-11T09:43:51.772");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear((int) (short) 10);
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(14);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusSeconds(38168736);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        int int27 = localDateTime25.getYear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.year();
        int int42 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) (short) 1);
        boolean boolean49 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withWeekyear((int) (byte) -1);
        boolean boolean55 = localDateTime51.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) (short) 1);
        boolean boolean62 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        int int69 = localDateTime51.indexOf(dateTimeFieldType68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime33.property(dateTimeFieldType68);
        int int71 = localDateTime25.get(dateTimeFieldType68);
        boolean boolean72 = localDateTime12.isSupported(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime6.withField(dateTimeFieldType68, 51);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDateTime74.getFieldType(36053522);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36053522");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 122 + "'", int27 == 122);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 122 + "'", int71 == 122);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.lang.String str6 = locale2.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale2.getDisplayVariant(locale10);
        java.lang.String str12 = locale1.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder13 = builder0.setLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        boolean boolean19 = dateTimeZone15.isLocalDateTimeGap(localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.lang.String str28 = localDateTime21.toString("2022", locale26);
        java.lang.String str29 = dateTimeZone15.getShortName((-58665599574L), locale26);
        java.util.Locale.Builder builder30 = builder0.setLocale(locale26);
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale locale32 = builder31.build();
        java.util.Locale.Builder builder33 = builder31.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder31.setExtension(' ', "2022-02-11T10:40:17.096");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587" + "'", str12, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+52:00" + "'", str29, "+52:00");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        int int3 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withPeriodAdded(readablePeriod6, 2);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 1);
        boolean boolean23 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = localDateTime16.toDateTime(readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        boolean boolean38 = dateTimeZone34.isLocalDateTimeGap(localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) (short) 1);
        boolean boolean45 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withWeekyear((int) (byte) -1);
        boolean boolean51 = localDateTime47.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) (short) 1);
        boolean boolean58 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime62.getFieldType((int) (short) 0);
        int int65 = localDateTime47.indexOf(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime37.withField(dateTimeFieldType64, (int) ' ');
        boolean boolean68 = dateTime32.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime0.property(dateTimeFieldType64);
        java.lang.String str70 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime0.minusWeeks(49494536);
        java.lang.String str73 = localDateTime0.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-13T13:48:22.694" + "'", str70, "2022-02-13T13:48:22.694");
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-13T13:48:22.694" + "'", str73, "2022-02-13T13:48:22.694");
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = property3.setCopy((int) 'u');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        int int9 = localDateTime7.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) (short) 1);
        boolean boolean18 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear((int) (short) 10);
        int int21 = localDateTime20.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 1);
        boolean boolean28 = dateTimeZone24.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long32 = dateTimeZone30.convertUTCToLocal(0L);
        long long34 = dateTimeZone24.getMillisKeepLocal(dateTimeZone30, 1L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        boolean boolean41 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withWeekOfWeekyear((int) (short) 10);
        int int44 = localDateTime40.getDayOfYear();
        boolean boolean45 = dateTimeZone30.isLocalDateTimeGap(localDateTime40);
        int int46 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime47 = property22.withMaximumValue();
        boolean boolean48 = dateTimeZone11.isLocalDateTimeGap(localDateTime47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) (short) 1);
        boolean boolean55 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withWeekOfWeekyear((int) (short) 10);
        int[] intArray58 = localDateTime54.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = localDateTime54.getFieldTypes();
        org.joda.time.Chronology chronology60 = localDateTime54.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime54.minus(readablePeriod61);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime54);
        int int64 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property65 = localDateTime7.year();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 187200000L + "'", long32 == 187200000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 44 + "'", int44 == 44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[122, 2, 13, 49702739]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = property10.getAsText(locale14);
        int int16 = property6.getMaximumShortTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property6.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.lang.String str22 = property21.getAsString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "49702777" + "'", str22, "49702777");
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = locale6.getCountry();
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale1.getDisplayVariant(locale9);
        java.lang.String str11 = locale0.getDisplayLanguage(locale9);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream15 = charSet14.parallelStream();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream18 = charSet17.parallelStream();
        boolean boolean19 = charSet14.containsAll((java.util.Collection<java.lang.Character>) charSet17);
        boolean boolean20 = charSet14.isEmpty();
        java.lang.Object[] objArray21 = charSet14.toArray();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = new org.joda.time.DateTimeField[] {};
        org.joda.time.DateTimeField[][] dateTimeFieldArray27 = new org.joda.time.DateTimeField[][] { dateTimeFieldArray22, dateTimeFieldArray23, dateTimeFieldArray24, dateTimeFieldArray25, dateTimeFieldArray26 };
        org.joda.time.DateTimeField[][] dateTimeFieldArray28 = charSet14.toArray(dateTimeFieldArray27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator31 = charSet30.spliterator();
        boolean boolean32 = charSet14.removeAll((java.util.Collection<java.lang.Character>) charSet30);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property36.setCopy((int) (short) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.minuteOfHour();
        boolean boolean40 = property39.isLeap();
        java.lang.String str41 = property39.toString();
        boolean boolean42 = charSet14.equals((java.lang.Object) property39);
        boolean boolean43 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet14);
        java.util.Collection<java.lang.Character> charCollection44 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = charSet14.containsAll(charCollection44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(charStream15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(charStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(charSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[minuteOfHour]" + "'", str41, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale10.getDisplayVariant(locale11);
        java.lang.String str14 = locale10.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = locale15.getCountry();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale10.getDisplayVariant(locale18);
        java.lang.String str20 = locale9.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder21 = builder8.setLocale(locale9);
        boolean boolean22 = localDateTime5.equals((java.lang.Object) builder8);
        java.util.Locale.Builder builder23 = builder8.clear();
        java.util.Locale locale24 = builder23.build();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder23.setScript("dayOfWeek");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: dayOfWeek [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear((int) (byte) -1);
        boolean boolean21 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime5.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime5.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        int int26 = localDateTime24.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) (short) 1);
        boolean boolean33 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (short) 1);
        boolean boolean44 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withWeekOfWeekyear((int) (short) 10);
        int int47 = localDateTime46.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra((int) (short) 1);
        boolean boolean59 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withWeekOfWeekyear((int) (short) 10);
        int int62 = localDateTime61.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy(0L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        int int68 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime.Property property70 = localDateTime35.era();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime35.minusYears(38254258);
        int int73 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        java.util.Locale locale75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = localDateTime24.toString("292278993-02-10T13:47:08.271+52:00", locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 42 + "'", int9 == 42);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35302947 + "'", int22 == 35302947);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(49666801);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 1);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMinutes(650);
        int int16 = localDateTime15.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 68 + "'", int16 == 68);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long20 = dateTimeZone18.convertUTCToLocal(0L);
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, 1L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (short) 1);
        boolean boolean29 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withWeekOfWeekyear((int) (short) 10);
        int int32 = localDateTime28.getDayOfYear();
        boolean boolean33 = dateTimeZone18.isLocalDateTimeGap(localDateTime28);
        int int34 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime36 = property10.setCopy(24);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = property41.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readableDuration49);
        boolean boolean51 = property41.equals((java.lang.Object) localDateTime50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minus(readablePeriod52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMinutes(12);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.weekyear();
        int int57 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime58 = property10.roundHalfEvenCopy();
        int int59 = property10.getMaximumValue();
        int int60 = property10.getLeapAmount();
        org.joda.time.Interval interval61 = property10.toInterval();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) (short) 1);
        boolean boolean14 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withWeekOfWeekyear((int) (short) 10);
        int int17 = localDateTime13.getDayOfYear();
        boolean boolean18 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withCenturyOfEra(645);
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.minuteOfHour();
        int int22 = localDateTime13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 42 + "'", int17 == 42);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime5.getField(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.era();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 1);
        boolean boolean15 = dateTimeZone11.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 1);
        boolean boolean22 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((int) (byte) -1);
        boolean boolean28 = localDateTime24.equals((java.lang.Object) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) (short) 1);
        boolean boolean35 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        int int42 = localDateTime24.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime14.withField(dateTimeFieldType41, (int) ' ');
        boolean boolean45 = localDateTime5.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property46 = localDateTime5.yearOfEra();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime48 = property46.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) (short) 1);
        boolean boolean54 = dateTimeZone50.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long58 = dateTimeZone56.convertUTCToLocal(0L);
        long long60 = dateTimeZone50.getMillisKeepLocal(dateTimeZone56, 1L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (short) 1);
        boolean boolean67 = localDateTime63.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withWeekOfWeekyear((int) (short) 10);
        int int70 = localDateTime66.getDayOfYear();
        boolean boolean71 = dateTimeZone56.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = dateTimeZone56.getShortName((long) (byte) 10, locale74);
        int int76 = property46.getMaximumShortTextLength(locale74);
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder77.clearExtensions();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.yearOfEra();
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet85 = locale84.getExtensionKeys();
        java.lang.String str86 = localDateTime79.toString("2022", locale84);
        java.util.Locale.Builder builder87 = builder78.setLocale(locale84);
        java.util.Locale locale88 = locale84.stripExtensions();
        java.lang.String str89 = locale74.getDisplayCountry(locale84);
        java.lang.String str91 = locale84.getExtension('x');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 187200000L + "'", long58 == 187200000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 42 + "'", int70 == 42);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+52:00" + "'", str75, "+52:00");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 790);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours(14);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localDateTime1.getFields();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusHours(35035070);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date7 = localDateTime6.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -230 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra((int) (short) 1);
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        long long10 = dateTimeZone8.convertUTCToLocal(0L);
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, 1L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) (short) 1);
        boolean boolean16 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        java.lang.String str18 = dateTimeZone8.getShortName((long) 511);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 187200000L, dateTimeZone8);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfCentury(38349476);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38349476 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        int[] intArray6 = localDateTime5.getValues();
        int int7 = localDateTime5.getDayOfMonth();
        int int8 = localDateTime5.getMillisOfSecond();
        int int9 = localDateTime5.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset(35035170L);
        int int16 = dateTimeZone11.getOffsetFromLocal((long) 390);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime18 = localDateTime5.toDateTime(dateTimeZone11);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[292278993, 2, 13, 49703114]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 114 + "'", int8 == 114);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }
}

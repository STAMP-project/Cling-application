import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("YearWeekDayNoWeeks");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearWeekDayNoWeeks\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("und", 0.0d);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) (-1));
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        java.util.Date date11 = dateTime7.toDate();
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withDayOfMonth(5);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval24.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Period period27 = interval24.toPeriod();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        org.joda.time.Hours hours34 = period33.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period37 = period33.withFieldAdded(durationFieldType35, 100);
        org.joda.time.Period period39 = period27.withFieldAdded(durationFieldType35, (int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime16.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = dateTime16.toDateTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay12.toDateMidnight(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone41);
        boolean boolean47 = languageRange2.equals((java.lang.Object) dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(hours34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis(100);
        org.joda.time.Period period9 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime12.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMonthOfYear(11);
        org.joda.time.Duration duration16 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime5.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType25 = periodType24.withWeeksRemoved();
        java.lang.String str26 = periodType25.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateMidnight21, periodType25);
        org.joda.time.Instant instant28 = instant1.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology31);
        long long33 = interval32.getEndMillis();
        java.lang.String str34 = interval32.toString();
        org.joda.time.MutableInterval mutableInterval35 = interval32.toMutableInterval();
        org.joda.time.Period period36 = interval32.toPeriod();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        org.joda.time.Period period39 = interval32.toPeriod(periodType37);
        org.joda.time.Duration duration40 = interval32.toDuration();
        org.joda.time.Instant instant42 = instant28.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) (short) 10);
        org.joda.time.Instant instant44 = instant28.plus((long) (byte) -1);
        org.joda.time.Instant instant47 = instant44.withDurationAdded(0L, 1977);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 35, chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "YearWeekDayNoWeeks" + "'", str26, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str34, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 4, chronology1);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        java.lang.String str6 = periodType5.getName();
        org.joda.time.Period period7 = new org.joda.time.Period(1L, periodType5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime31.copy();
        mutableDateTime31.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime39 = localTime37.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.millis();
        boolean boolean41 = localTime37.isSupported(durationFieldType40);
        mutableDateTime31.add(durationFieldType40, (-1));
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        mutableDateTime31.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime31.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMillis((int) (short) 0);
        boolean boolean55 = mutableDateTime31.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration56, (org.joda.time.ReadableInstant) dateMidnight59, periodType60);
        int int62 = dateMidnight59.getYear();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight59.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight64.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfYear();
        mutableDateTime31.setDate((org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(100L, dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime79 = dateTime77.plus((long) (-1));
        org.joda.time.DateTime dateTime81 = dateTime79.minusYears((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int83 = dateTime79.get(dateTimeFieldType82);
        boolean boolean84 = dateMidnight70.isSupported(dateTimeFieldType82);
        boolean boolean85 = dateMidnight17.isSupported(dateTimeFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = timeOfDay2.get(dateTimeFieldType82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "YearWeekDayNoWeeks" + "'", str6, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str8 = timeZone6.getID();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:20" + "'", str8, "GMT+00:20");
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        int int2 = monthDay0.size();
        int int3 = monthDay0.size();
        int int4 = monthDay0.getDayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Interval interval10 = interval8.withDurationBeforeEnd(readableDuration9);
        org.joda.time.Period period11 = interval8.toPeriod();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        org.joda.time.Hours hours18 = period17.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period21 = period17.withFieldAdded(durationFieldType19, 100);
        org.joda.time.Period period23 = period11.withFieldAdded(durationFieldType19, (int) (byte) 10);
        org.joda.time.MonthDay monthDay24 = monthDay0.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusMonths(12960);
        java.util.Locale locale28 = null;
        java.lang.String str29 = monthDay24.toString("+100:00", locale28);
        org.joda.time.MonthDay monthDay31 = monthDay24.plusDays(1200200);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.property(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property47 = monthDay31.property(dateTimeFieldType44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:00" + "'", str29, "+100:00");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfDay" + "'", str45, "minuteOfDay");
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 30, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period3.minusSeconds((int) (byte) 0);
        org.joda.time.Period period7 = period5.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod8 = period5.toMutablePeriod();
        org.joda.time.Period period19 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period21 = period19.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusDays((int) 'a');
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        mutablePeriod8.setPeriod(0L, (long) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.era();
        java.lang.String str32 = chronology28.toString();
        org.joda.time.DurationField durationField33 = chronology28.millis();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField35 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.clockhourOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:20]" + "'", str32, "ISOChronology[+00:20]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval3.withDurationBeforeEnd(readableDuration4);
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Interval interval8 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Minutes minutes9 = period7.toStandardMinutes();
        org.joda.time.Period period11 = period7.withDays(8);
        org.joda.time.Period period13 = period7.withSeconds(1978);
        org.joda.time.Period period15 = period7.minusWeeks(50);
        int int16 = period15.getHours();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        long long12 = dateTimeField8.add(8380800000L, 11L);
        int int14 = dateTimeField8.getMaximumValue(0L);
        java.lang.String str15 = dateTimeField8.toString();
        long long17 = dateTimeField8.remainder(43201918L);
        long long19 = dateTimeField8.roundCeiling(1613918830804L);
        java.lang.String str20 = dateTimeField8.getName();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 355536000000L + "'", long12 == 355536000000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[year]" + "'", str15, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43201918L + "'", long17 == 43201918L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1640995200000L + "'", long19 == 1640995200000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "year" + "'", str20, "year");
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.Period period11 = period9.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod12 = period9.toMutablePeriod();
        mutablePeriod12.setPeriod((long) 100);
        mutablePeriod12.setMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, 59);
        org.joda.time.LocalDateTime.Property property19 = localDateTime3.hourOfDay();
        int int20 = localDateTime3.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime3.withDate((-15993), (int) 'u', 2765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) localTime22, 10L);
        org.joda.time.DurationField durationField25 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.dayOfYear();
        boolean boolean27 = dateTimeField26.isLenient();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27661000L + "'", long24 == 27661000L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        boolean boolean5 = interval3.isAfter(1645454833806L);
        long long6 = interval3.getEndMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval8 = interval3.withStartMillis(4288025015000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("70", "fra");
        java.util.Locale.Builder builder4 = builder3.clear();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime8 = localTime6.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod14.setMinutes(11);
        org.joda.time.Period period17 = mutablePeriod14.toPeriod();
        org.joda.time.LocalTime localTime18 = localTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        int int35 = dateMidnight32.getYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withDayOfMonth((int) (byte) 10);
        boolean boolean38 = dateMidnight23.isBefore((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight37.monthOfYear();
        java.util.Locale locale40 = java.util.Locale.JAPAN;
        int int41 = property39.getMaximumShortTextLength(locale40);
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayName();
        int int44 = property19.getMaximumTextLength(locale40);
        boolean boolean45 = locale40.hasExtensions();
        java.util.Locale.Builder builder46 = builder3.setLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder46.setLanguageTag("T14:48:20.328");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: T14:48:20.328 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "japonais (Japon)" + "'", str43, "japonais (Japon)");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        int[] intArray8 = yearMonthDay6.getValues();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455012195,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=12,MILLISECOND=195,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 2, 21]");
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusMonths(570);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime18, readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfMonth();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (byte) 0);
        org.joda.time.Period period26 = period24.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod27 = period24.toMutablePeriod();
        mutablePeriod27.setPeriod((long) 100);
        org.joda.time.DateTime dateTime31 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, 8);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, 47);
        int int34 = yearMonthDay9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMillis((int) (short) 0);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (byte) 0);
        org.joda.time.Period period46 = period44.minusSeconds(100);
        org.joda.time.DateTime dateTime48 = dateTime39.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 20);
        org.joda.time.DateTime dateTime49 = dateTime39.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfWeek();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime49, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight56, readableDuration57, periodType58);
        int int60 = dateMidnight56.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight56.getZone();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone61);
        long long66 = dateTimeZone61.convertLocalToUTC((long) 9, false);
        java.lang.String str68 = dateTimeZone61.getName(0L);
        org.joda.time.DateTime dateTime69 = dateTime49.toDateTime(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay9.toDateMidnight(dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay9.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateMidnight62);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1199991L) + "'", long66 == (-1199991L));
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:20" + "'", str68, "+00:20");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight70);
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateMidnight8, periodType9);
        int int11 = dateMidnight8.getYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = dateMidnight19.toDateTime(dateTimeZone21);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (byte) 0);
        boolean boolean27 = dateTimeZone21.equals((java.lang.Object) period26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(31, (-292275054), 41, (int) (short) -1, 1952, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.withYear(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = interval11.withDurationBeforeEnd(readableDuration12);
        org.joda.time.Period period14 = interval11.toPeriod();
        int int15 = period14.getMillis();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime17 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay16.year();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime26 = dateTime24.plus((long) (-1));
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded(readableDuration28, 1970);
        int int31 = property19.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime32 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime32.minusWeeks(24);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDate localDate38 = localDate7.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate localDate40 = localDate7.withEra(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str2 = property1.getName();
        org.joda.time.MonthDay monthDay3 = property1.getMonthDay();
        org.joda.time.MonthDay monthDay5 = property1.addToCopy((int) ' ');
        org.joda.time.MonthDay monthDay7 = property1.addWrapFieldToCopy(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay9 = monthDay7.withMonthOfYear(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfMonth" + "'", str2, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.add((long) (byte) 10, (long) '4');
        java.util.Locale locale10 = java.util.Locale.US;
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        int int14 = dateTimeField6.getDifference(8380800000L, 0L);
        java.lang.String str15 = dateTimeField6.toString();
        long long17 = dateTimeField6.remainder(1645454801986L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100L, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        long long47 = chronology42.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(chronology42);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (byte) 0);
        org.joda.time.Period period54 = period52.minusSeconds((int) '#');
        int[] intArray57 = chronology42.get((org.joda.time.ReadablePeriod) period52, (long) 48, 768616901452833198L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField6.add((org.joda.time.ReadablePartial) localTime23, 70, intArray57, 32470000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1640995200010L + "'", long9 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[year]" + "'", str15, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4459601986L + "'", long17 == 4459601986L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[24356500, 0, 0, 0, 0, 0, 33, 150]");
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        java.util.Date date2 = dateTime1.toDate();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date2);
        date2.setYear((int) 'a');
        java.lang.Object obj6 = date2.clone();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Feb 20 23:40:00 GMT+00:20 1997");
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "Thu Feb 20 23:40:00 GMT+00:20 1997");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "Thu Feb 20 23:40:00 GMT+00:20 1997");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "Thu Feb 20 23:40:00 GMT+00:20 1997");
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        long long24 = durationField22.getValueAsLong((long) ' ');
        long long27 = durationField22.subtract((long) 11, (long) 2);
        long long30 = durationField22.subtract(31536000000L, (int) (byte) -1);
        int int33 = durationField22.getValue((long) 23, (long) 625);
        int int36 = durationField22.getDifference(255139200000L, (long) 2170);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-5270399989L) + "'", long27 == (-5270399989L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 34214400000L + "'", long30 == 34214400000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 96 + "'", int36 == 96);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = dateTimeFormatter4.parseLocalDate("P-1Y");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        int int12 = dateMidnight8.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight8.getZone();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone13);
        mutableDateTime4.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology19);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.util.GregorianCalendar gregorianCalendar22 = mutableDateTime4.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar22.set(21, 253);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.Period period11 = period9.minusSeconds(100);
        org.joda.time.DateTime dateTime13 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 20);
        org.joda.time.DateTime dateTime14 = dateTime4.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = yearMonthDay15.getFieldType(710);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 710");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-21T14:47:05.423Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:47:05.423Z\" is malformed at \"T14:47:05.423Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        mutableDateTime9.add((long) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        mutableDateTime9.setZone(dateTimeZone14);
        boolean boolean19 = dateTimeZone14.isStandardOffset((long) 49);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        int int7 = dateTimeFormatter4.getDefaultYear();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withLocale(locale8);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay10.year();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = property13.getAsText(locale14);
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        long long19 = dateTimeField16.add((long) (byte) 10, (long) '4');
        java.util.Locale locale20 = java.util.Locale.US;
        int int21 = dateTimeField16.getMaximumTextLength(locale20);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("DurationField[months]");
        java.lang.String str24 = locale20.getDisplayScript(locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter4.withLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTimeFormatter4.parseDateTime("Heure de Greenwich");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1640995200010L + "'", long19 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property44 = dateMidnight20.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int46 = dateMidnight20.get(dateTimeFieldType45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight49 = property47.addWrapFieldToCopy(0);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType52 = periodType51.withWeeksRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withMonthsRemoved();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableDuration55, (org.joda.time.ReadableInstant) dateMidnight58, periodType59);
        int int61 = dateMidnight58.getYear();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight58.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTime();
        org.joda.time.Period period77 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period79 = period77.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.plusDays((int) 'a');
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period77, (org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.Chronology chronology86 = interval85.getChronology();
        org.joda.time.DateMidnight dateMidnight87 = org.joda.time.DateMidnight.now(chronology86);
        long long91 = chronology86.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight92 = org.joda.time.DateMidnight.now(chronology86);
        org.joda.time.DateMidnight dateMidnight93 = org.joda.time.DateMidnight.now(chronology86);
        org.joda.time.YearMonthDay yearMonthDay94 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime67, chronology86);
        org.joda.time.DateTime dateTime95 = new org.joda.time.DateTime((long) (short) 1, chronology86);
        org.joda.time.Period period96 = new org.joda.time.Period((long) 32769, periodType53, chronology86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime97 = new org.joda.time.LocalTime((java.lang.Object) property47, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        java.util.Date date6 = new java.util.Date((int) ' ', 12, (int) (short) 1, (int) (short) 10, 52, (int) (byte) 0);
        int int7 = date6.getSeconds();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        long long30 = chronology25.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DurationField durationField33 = chronology25.minutes();
        org.joda.time.DurationField durationField34 = chronology25.millis();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) date6, chronology25);
        org.joda.time.Chronology chronology36 = chronology25.withUTC();
        org.joda.time.DurationField durationField37 = chronology25.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology25.getDateTimeMillis(0, 6, 200, 520, 1200120, 1620100, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 520 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 01 10:52:00 GMT+00:20 1933");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(2629746000L, (long) (-15993));
        mutablePeriod2.setWeeks(9);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period14 = period12.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusDays((int) 'a');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26, periodType27);
        org.joda.time.Chronology chronology30 = null;
        mutablePeriod28.setPeriod(1L, chronology30);
        long long34 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod28, (long) (short) 0, 32769);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology21);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 1970, dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = localDate38.isSupported(dateTimeFieldType39);
        org.joda.time.LocalDate localDate42 = localDate38.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46, periodType47);
        int int49 = dateMidnight46.getYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52);
        boolean boolean54 = localDate42.equals((java.lang.Object) readableDuration52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.plusDays((int) 'a');
        int int60 = dateMidnight57.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime61 = localDate42.toDateTime((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.YearMonthDay yearMonthDay62 = dateMidnight57.toYearMonthDay();
        boolean boolean63 = periodType3.equals((java.lang.Object) yearMonthDay62);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.MutablePeriod mutablePeriod65 = mutablePeriod64.toMutablePeriod();
        int int66 = mutablePeriod64.getYears();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32769L + "'", long34 == 32769L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        int int7 = localDateTime5.size();
        org.joda.time.Period period17 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period19 = period17.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusDays((int) 'a');
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period17, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology26);
        long long31 = chronology26.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology26);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology26);
        org.joda.time.DurationField durationField34 = chronology26.minutes();
        org.joda.time.DurationField durationField35 = chronology26.millis();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0L, chronology26);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMillis((-15993));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = localDateTime5.isAfter((org.joda.time.ReadablePartial) timeOfDay36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(5);
        org.joda.time.Period period18 = new org.joda.time.Period(31536000000L, 1640995200010L);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = yearMonthDay10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24, periodType25);
        int int27 = dateMidnight24.getYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime33.withMillisOfSecond(2);
        org.joda.time.DateTime.Property property36 = dateTime33.dayOfMonth();
        java.lang.String str37 = dateTime33.toString();
        org.joda.time.DateTime dateTime39 = dateTime33.plusMillis((int) (short) 0);
        boolean boolean40 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime42 = dateTime20.plusYears(883);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-10T00:00:00.000+00:20" + "'", str37, "1970-01-10T00:00:00.000+00:20");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfDay();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 33198, chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.year();
        int int25 = dateTimeField22.getDifference(1645401600000L, 3061065600120L);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-44) + "'", int25 == (-44));
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getLanguage();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str12 = nameProvider6.getName(locale7, "YearWeekDayNoWeeks", "T00:00:00.100");
        int int13 = property5.getMaximumTextLength(locale7);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = builder15.build();
        int int18 = property5.getMaximumTextLength(locale17);
        org.joda.time.TimeOfDay timeOfDay20 = property5.addToCopy(32);
        int int21 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1, 200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 200 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.setMillis((long) (byte) 0);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (byte) 0);
        org.joda.time.Period period16 = period14.minusSeconds(100);
        org.joda.time.Period period17 = period16.negated();
        org.joda.time.Minutes minutes18 = period16.toStandardMinutes();
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (byte) 0);
        org.joda.time.Period period24 = period22.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod25 = period22.toMutablePeriod();
        org.joda.time.Period period36 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period38 = period36.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plusDays((int) 'a');
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period36, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        mutablePeriod25.setPeriod(0L, (long) 0, chronology45);
        boolean boolean48 = period16.equals((java.lang.Object) mutablePeriod25);
        org.joda.time.Period period59 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period61 = period59.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plusDays((int) 'a');
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now(chronology68);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(chronology68);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(chronology68);
        org.joda.time.Interval interval74 = new org.joda.time.Interval(1970L, 34214400000L, chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay((java.lang.Object) boolean48, chronology68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) '#', 887, 6, 49, (-292275054), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("janvier");
        int int22 = property19.getMaximumTextLength(locale21);
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        int int25 = dateTimeField23.getMaximumValue(0L);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        int int29 = dateTimeField23.getMaximumTextLength(locale26);
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField23.getMinimumValue(readablePartial30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period9 = period5.withFieldAdded(durationFieldType7, 100);
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DurationField durationField30 = durationFieldType7.getField(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.centuries();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime41.copy();
        int int44 = mutableDateTime41.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.weekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51, periodType52);
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod53.setPeriod(1L, chronology55);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) mutablePeriod53);
        int[] intArray60 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod53, (long) (byte) 10, (-13219199999L));
        org.joda.time.DateTimeField dateTimeField61 = chronology27.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.DateTimeField dateTimeField63 = chronology27.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial64 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology27.set(readablePartial64, (long) 2000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, -5, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        long long4 = instant3.getMillis();
        org.joda.time.DateTime dateTime5 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        boolean boolean7 = instant3.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property15.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, readableDuration17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        long long23 = dateTimeZone21.nextTransition(379987200000L);
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(dateTimeZone21);
        int int25 = dateTime16.getYearOfCentury();
        boolean boolean26 = instant3.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455013168L + "'", long4 == 1645455013168L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 379987200000L + "'", long23 == 379987200000L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.Period period11 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period13 = period11.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusDays((int) 'a');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology20);
        long long25 = chronology20.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.DurationField durationField28 = chronology20.minutes();
        boolean boolean29 = durationFieldType1.isSupported(chronology20);
        org.joda.time.Chronology chronology30 = chronology20.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "centuries" + "'", str2, "centuries");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((-55852380081286L));
        int int2 = monthDay1.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        boolean boolean6 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.parse("70", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = dateTime4.toLocalDate();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Interval interval9 = localDate2.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((-292275054));
        org.joda.time.LocalDate localDate13 = localDate2.minusWeeks(2200);
        int int14 = localDate2.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime9.add(readableDuration15);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay((java.lang.Object) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime9.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 59);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMillis(492);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = timeOfDay3.getFieldTypes();
        org.joda.time.Period period6 = org.joda.time.Period.hours((int) ' ');
        org.joda.time.Period period8 = period6.minusYears((int) ' ');
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (short) 0, periodType10, chronology11);
        org.joda.time.Period period13 = period6.withPeriodType(periodType10);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (byte) 0);
        org.joda.time.Period period18 = period16.minusSeconds(100);
        org.joda.time.Period period19 = period13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period18);
        java.lang.String str22 = timeOfDay3.toString("3665");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3665" + "'", str22, "3665");
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str13 = dateTimeFieldType12.getName();
        mutableDateTime11.set(dateTimeFieldType12, 5);
        mutableDateTime11.setSecondOfDay((int) (byte) 10);
        mutableDateTime11.setMinuteOfDay((int) (byte) 10);
        mutableDateTime11.addMinutes(6);
        mutableDateTime11.addSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property31 = dateTime28.minuteOfDay();
        org.joda.time.DateTime dateTime33 = dateTime28.minusWeeks(6);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (short) -1);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime11.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = locale39.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = mutableDateTime11.toString("DateTimeField[yearOfEra]", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfDay" + "'", str13, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "anglais" + "'", str40, "anglais");
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1645454989305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=52,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=49,MILLISECOND=357,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 1);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.year();
        mutableDateTime16.setMillisOfSecond((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfEven();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) (-1));
        org.joda.time.DateTime dateTime23 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime20.withDurationAdded(readableDuration24, 1970);
        int int27 = dateTime20.getSecondOfDay();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) dateTime20);
        int int29 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = dateTime20.get(dateTimeField30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1200 + "'", int27 == 1200);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod15.setMinutes(11);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateMidnight.Property property19 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = property19.setCopy(1951);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1951 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        boolean boolean6 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.parse("T00:00:00.035", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.lang.String str4 = timeZone0.getID();
        java.time.ZoneId zoneId5 = timeZone0.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1970, dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        int int15 = localDate14.getDayOfWeek();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate19 = localDate14.minusYears((int) '4');
        org.joda.time.LocalDate localDate21 = localDate14.withYear(52);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate24 = dateTime23.toLocalDate();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval31.withDurationBeforeEnd(readableDuration32);
        org.joda.time.Period period34 = interval31.toPeriod();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        org.joda.time.Hours hours41 = period40.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period44 = period40.withFieldAdded(durationFieldType42, 100);
        org.joda.time.Period period46 = period34.withFieldAdded(durationFieldType42, (int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime23.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalDate localDate48 = localDate14.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 1970, dateTimeZone50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate51.isSupported(dateTimeFieldType52);
        org.joda.time.LocalDate localDate55 = localDate51.withWeekyear((-1));
        int int56 = localDate55.getWeekyear();
        org.joda.time.LocalDate localDate58 = localDate55.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean60 = localDate55.isSupported(dateTimeFieldType59);
        int int61 = localDate48.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = localDate48.toDateTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66, periodType67);
        int int69 = dateMidnight66.getYear();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight66.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period(readableDuration72, (org.joda.time.ReadableInstant) dateMidnight75, periodType76);
        int int78 = dateMidnight75.getYear();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight75.withDayOfMonth((int) (byte) 10);
        boolean boolean81 = dateMidnight66.isBefore((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DateMidnight.Property property82 = dateMidnight80.monthOfYear();
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("janvier");
        int int85 = property82.getMaximumTextLength(locale84);
        org.joda.time.DateTimeField dateTimeField86 = property82.getField();
        int int88 = dateTimeField86.getMaximumValue(0L);
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str90 = locale89.getLanguage();
        boolean boolean91 = locale89.hasExtensions();
        int int92 = dateTimeField86.getMaximumTextLength(locale89);
        boolean boolean93 = dateTime62.equals((java.lang.Object) locale89);
        java.lang.String str94 = timeZone6.getDisplayName(locale89);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT+00:20" + "'", str4, "GMT+00:20");
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 70 + "'", int61 == 70);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1970 + "'", int78 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 12 + "'", int88 == 12);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fr" + "'", str90, "fr");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GMT+00:20" + "'", str94, "GMT+00:20");
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(292278993, 8, (int) 'a', 7);
        java.util.Calendar.Builder builder12 = builder9.set(4, 1);
        java.util.Calendar.Builder builder15 = builder9.set((int) (byte) 10, 49);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone17);
        int int20 = localDateTime19.getMillisOfSecond();
        int int21 = localDateTime19.getMonthOfYear();
        java.util.Date date22 = localDateTime19.toDate();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfMonth();
        java.util.Date date24 = localDateTime19.toDate();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder9.setInstant(date24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:20:01 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:20:01 GMT+00:20 1970");
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays(0);
        int int8 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes(53311);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.plusDays(53263);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMillis((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds(100);
        org.joda.time.Period period5 = period4.negated();
        org.joda.time.Period period7 = period5.plusDays(32770);
        org.joda.time.Period period9 = period7.withSeconds((int) (short) 1);
        boolean boolean11 = period9.equals((java.lang.Object) "fran\347ais (France)");
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        int int20 = dateMidnight17.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight17, dateTimeZone21);
        org.joda.time.LocalTime localTime24 = localTime22.withMinuteOfHour((int) ' ');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval28.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Period period31 = interval28.toPeriod();
        int int32 = period31.getMillis();
        boolean boolean33 = localTime22.equals((java.lang.Object) period31);
        org.joda.time.Period period35 = period31.plusWeeks(200);
        int int36 = period31.getSeconds();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        java.lang.String str23 = durationField22.toString();
        boolean boolean24 = durationField22.isSupported();
        long long27 = durationField22.subtract(602584498103765L, 53279);
        long long29 = durationField22.getMillis((long) 12960);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DurationField[months]" + "'", str23, "DurationField[months]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 462474024503765L + "'", long27 == 462474024503765L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 34081508160000L + "'", long29 == 34081508160000L);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        int int8 = yearMonthDay7.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.add((long) '4');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        mutableDateTime18.setZone(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay7.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(0L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455013943,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=13,MILLISECOND=943,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(32770, 19044, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19044 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        date6.setMinutes((int) '4');
        date6.setMonth((int) (short) 100);
        date6.setMonth(243565);
        date6.setMinutes(190);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 01 03:10:01 GMT+00:20 22275");
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate2.minusDays(223);
        int int6 = localDate2.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate2.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(600100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = dateTimeFormatter7.parseLocalDateTime("DateTimeField[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) -1, (long) (byte) 0, chronology9);
        int int11 = mutablePeriod10.getDays();
        org.joda.time.Period period24 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period26 = period24.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plusDays((int) 'a');
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period24, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(chronology33);
        long long38 = chronology33.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.now(chronology33);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.minuteOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 2200, (long) 24, chronology33);
        org.joda.time.DateTimeField dateTimeField42 = chronology33.weekyearOfCentury();
        mutablePeriod10.setPeriod((-359999980L), 31535999387L, chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(53303, 98, 40, 41, 48, 982, 1200000, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.lang.StringBuffer stringBuffer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (-58375933899175L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) 100, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusDays(33198);
        java.lang.String str5 = yearMonthDay4.toString();
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2060-11-22" + "'", str5, "2060-11-22");
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateTime2.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        boolean boolean5 = mutableDateTime4.isBeforeNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundCeiling();
        java.util.Locale locale10 = new java.util.Locale("2022-02-21T14:47:35.144Z");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime13 = property6.set("P1970D", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1970D\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals(locale10.toString(), "2022-02-21t14:47:35.144z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(710);
        org.joda.time.DateTime dateTime12 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime12.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateTime12.toString("2029-06-16T00:00:00.000+00:20");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.withMonthOfYear(11);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(100);
        org.joda.time.Period period14 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear(11);
        org.joda.time.Duration duration21 = period14.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        java.lang.String str31 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight26, periodType30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis(100);
        org.joda.time.Period period40 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear(11);
        org.joda.time.Duration duration47 = period40.toDurationFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime36.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52, periodType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType56 = periodType55.withWeeksRemoved();
        java.lang.String str57 = periodType56.getName();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateMidnight52, periodType56);
        boolean boolean59 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime60 = dateTime3.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant61 = instant0.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant64 = instant61.withDurationAdded(0L, 1200000);
        long long65 = instant64.getMillis();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YearWeekDayNoWeeks" + "'", str31, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "YearWeekDayNoWeeks" + "'", str57, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645455014328L + "'", long65 == 1645455014328L);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMonthOfYear(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate.Property property11 = localDate9.era();
        int int12 = localDate9.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455014491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=14,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period25 = period23.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusDays((int) 'a');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period23, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology32);
        long long37 = chronology32.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology32);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology32);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime13, chronology32);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 1, chronology32);
        org.joda.time.DateTimeField dateTimeField42 = chronology32.weekOfWeekyear();
        long long44 = dateTimeField42.roundCeiling((long) 1059594);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 344400000L + "'", long44 == 344400000L);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        calendar4.clear();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate localDate32 = localDate29.plusDays(14);
        org.joda.time.LocalDate.Property property33 = localDate32.year();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime29.copy();
        mutableDateTime29.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime37 = localTime35.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.millis();
        boolean boolean39 = localTime35.isSupported(durationFieldType38);
        mutableDateTime29.add(durationFieldType38, (-1));
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        mutableDateTime29.setZoneRetainFields(dateTimeZone43);
        long long46 = dateTimeZone43.nextTransition((long) 1970);
        boolean boolean48 = dateTimeZone43.isStandardOffset((long) 'x');
        org.joda.time.DateTime dateTime49 = localTime19.toDateTimeToday(dateTimeZone43);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1970L + "'", long46 == 1970L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        int int15 = mutablePeriod14.size();
        org.joda.time.LocalDate localDate17 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (short) 0);
        mutablePeriod14.setPeriod(0, 570, 11, 569, (int) (byte) 0, 1, 2, 14);
        mutablePeriod14.addYears(53353);
        int int29 = mutablePeriod14.getSeconds();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.dayOfMonth();
        mutableDateTime9.setYear((-292275054));
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay17.year();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str25 = property20.getAsText(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.String str27 = property15.getAsText(locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        boolean boolean8 = localDate6.equals((java.lang.Object) 8);
        org.joda.time.LocalDate.Property property9 = localDate6.year();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645454950639L);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 0, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = dateTimeField28.getAsText(14L, locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter6.withLocale(locale30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = dateTimeFormatter32.parseLocalDateTime("2021-12-13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.clear();
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = mutablePeriod0.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = dateTime4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime7 = yearMonthDay6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = dateTime7.toLocalDate();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTime dateTime11 = dateTime7.toDateTime(dateTimeZone10);
        org.joda.time.Interval interval12 = localDate5.toInterval(dateTimeZone10);
        mutablePeriod0.add((org.joda.time.ReadableInterval) interval12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int7 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        java.lang.Appendable appendable9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str17 = dateTimeFieldType16.getName();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withField(dateTimeFieldType16, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable9, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "minuteOfDay" + "'", str17, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        int int4 = period2.get(durationFieldType3);
        org.joda.time.Period period6 = period2.minusWeeks(9);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime16.copy();
        mutableDateTime16.setMillis((long) (byte) 10);
        int int21 = mutableDateTime16.getYearOfEra();
        mutableDateTime16.setWeekyear(11);
        boolean boolean24 = period2.equals((java.lang.Object) mutableDateTime16);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = period2.getValue(1200200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1200200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean10 = charSet3.contains((java.lang.Object) dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusYears(2000);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime23.copy();
        mutableDateTime23.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.dayOfMonth();
        mutableDateTime23.addSeconds(710);
        mutableDateTime23.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime23.year();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime35 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonthDay34.getFieldTypes();
        int int37 = yearMonthDay34.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay34.minusMonths((int) (byte) 0);
        int int40 = property33.compareTo((org.joda.time.ReadablePartial) yearMonthDay34);
        org.joda.time.MutableDateTime mutableDateTime41 = property33.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 1970, dateTimeZone43);
        int int45 = localDate44.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDate localDate49 = localDate44.plusYears(1970);
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfEra();
        java.lang.String str51 = property50.getAsShortText();
        org.joda.time.LocalDate localDate52 = property50.roundFloorCopy();
        int int53 = property50.getMinimumValue();
        org.joda.time.LocalDate localDate54 = property50.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean56 = localDate54.isSupported(dateTimeFieldType55);
        mutableDateTime41.set(dateTimeFieldType55, 3);
        int int59 = mutableDateTime41.getWeekOfWeekyear();
        boolean boolean60 = dateMidnight11.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime41.setWeekOfWeekyear(69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3940" + "'", str51, "3940");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay27.year();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = property30.getAsText(locale31);
        org.joda.time.YearMonthDay yearMonthDay34 = property30.setCopy(2);
        org.joda.time.DateTimeField dateTimeField35 = property30.getField();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = dateTimeField35.getAsShortText((int) ' ', locale37);
        java.lang.String str39 = locale37.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeField24.set((-2051222400100L), "de", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"de\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        int int6 = property5.get();
        java.lang.String str7 = property5.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = property5.setCopy("centuries");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"centuries\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        int int16 = dateTime15.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(5);
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime14 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.year();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = property16.getAsText(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str21 = property16.getAsText(locale20);
        java.lang.String str22 = property16.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property16.getFieldType();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay11.property(dateTimeFieldType23);
        org.joda.time.YearMonthDay yearMonthDay25 = property24.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter3.getParser();
        boolean boolean7 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withDefaultYear(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.parse("00:00:00.001", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = property5.addToCopy(49);
        org.joda.time.TimeOfDay timeOfDay10 = property5.getTimeOfDay();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusHours((int) (short) 0);
        int int5 = timeOfDay4.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property6 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property6.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.Chronology chronology9 = timeOfDay7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((java.lang.Object) "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z", chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T23:59:59.999Z/1970-01-0...\" is malformed at \"69-12-31T23:59:59.999Z/1970-01-0...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 223);
        boolean boolean9 = dateTimeFormatter8.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = dateTimeFormatter8.parseLocalTime("PeriodType[YearMonthDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        int int8 = localTime7.getMinuteOfHour();
        boolean boolean9 = localTime1.equals((java.lang.Object) localTime7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean11 = localTime1.isSupported(dateTimeFieldType10);
        org.joda.time.LocalTime localTime13 = localTime1.plusHours(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localTime1.getFieldType(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 37");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = period5.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1970, dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        int int15 = localDate14.getDayOfWeek();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((java.lang.Object) localDate14);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtMidnight();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        int int22 = mutablePeriod21.size();
        org.joda.time.LocalDate localDate24 = localDate14.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, (int) (short) 0);
        mutablePeriod21.setPeriod(0, 570, 11, 569, (int) (byte) 0, 1, 2, 14);
        org.joda.time.PeriodType periodType34 = mutablePeriod21.getPeriodType();
        org.joda.time.Period period35 = period5.withFields((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.MutablePeriod mutablePeriod36 = period5.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType38 = mutablePeriod36.getFieldType(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        mutablePeriod5.add(durationFieldType12, 6);
        int int15 = mutablePeriod5.getDays();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        boolean boolean3 = dateTimeField2.isLenient();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plusHours((int) (short) 0);
        int int8 = timeOfDay7.getHourOfDay();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, (long) 'a');
        boolean boolean14 = property9.equals((java.lang.Object) period13);
        int int15 = property9.get();
        org.joda.time.TimeOfDay timeOfDay17 = property9.addWrapFieldToCopy(32769);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) timeOfDay17, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate13 = property8.addToCopy(120);
        org.joda.time.DateMidnight dateMidnight14 = localDate13.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 570, chronology18);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = dateMidnight26.toCalendar(locale27);
        calendar28.set(10, 32769, 31);
        // The following exception was thrown during execution in test generation
        try {
            calendar28.roll(53263, 53303);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=10,MONTH=32769,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=31,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1200000,DST_OFFSET=0]");
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withHourOfDay((int) (short) 1);
        int int12 = localDateTime11.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYearOfCentury(12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:01 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime17 = property14.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = localTime17.minusHours(492);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        int int25 = periodType23.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(10L, (long) (byte) 100, periodType23, chronology26);
        int int28 = mutablePeriod27.getWeeks();
        org.joda.time.LocalTime localTime29 = localTime17.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.MonthDay monthDay2 = monthDay0.plusDays(59);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology5);
        int int7 = mutablePeriod6.getDays();
        org.joda.time.MonthDay monthDay8 = monthDay2.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) monthDay8, (org.joda.time.ReadablePartial) localDateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = timeZone7.getDisplayName(true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:20");
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) (-1));
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        java.util.Date date13 = dateTime9.toDate();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime23.copy();
        mutableDateTime23.setMillis((long) (byte) 10);
        int int28 = mutableDateTime23.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        mutableDateTime23.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = dateTime9.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(1640995200010L, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(200, (int) ' ', 1970, 4, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 200 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        java.util.TimeZone timeZone28 = calendar4.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = timeZone28.getOffset((-292275054), 53303, 913, (int) '#', 1987, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455015861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=15,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime27.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        mutableDateTime29.set(dateTimeFieldType30, 5);
        boolean boolean34 = localDateTime17.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime17.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone38);
        int int41 = localDateTime40.getMillisOfSecond();
        int int42 = localDateTime40.getMonthOfYear();
        java.util.Date date43 = localDateTime40.toDate();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration44, (org.joda.time.ReadableInstant) dateMidnight47, periodType48);
        int int50 = dateMidnight47.getYear();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight47.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableDuration53, (org.joda.time.ReadableInstant) dateMidnight56, periodType57);
        int int59 = dateMidnight56.getYear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight56.withDayOfMonth((int) (byte) 10);
        boolean boolean62 = dateMidnight47.isBefore((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateTime dateTime63 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime40.withMillisOfSecond((int) 'x');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfYear();
        int int67 = localDateTime65.getYearOfCentury();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology70);
        long long72 = interval71.getEndMillis();
        org.joda.time.Interval interval74 = interval71.withEndMillis((long) 11);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period76 = interval74.toPeriod(periodType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime65.withPeriodAdded((org.joda.time.ReadablePeriod) period76, 1970);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime65.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property82 = localDateTime17.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:20:01 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 70 + "'", int67 == 70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10L + "'", long72 == 10L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str3 = monthDay0.toString("32");
        int int4 = monthDay0.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = monthDay0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = monthDay0.getFieldTypes();
        int int7 = monthDay0.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay9 = monthDay0.withMonthOfYear(1620100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1620100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32" + "'", str3, "32");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11, periodType12);
        mutablePeriod13.addMillis((int) '4');
        int int16 = mutablePeriod13.size();
        java.util.Locale locale17 = java.util.Locale.US;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        boolean boolean19 = mutablePeriod13.equals((java.lang.Object) calendar18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone23);
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.millisOfDay();
        int int29 = property28.getMinimumValue();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.time.ZoneId zoneId34 = timeZone32.toZoneId();
        java.time.ZoneId zoneId35 = timeZone32.toZoneId();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone(zoneId35);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale37);
        java.lang.String str40 = locale31.getDisplayScript(locale37);
        org.joda.time.LocalDateTime localDateTime41 = property28.setCopy("1970", locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = calendar18.getDisplayName(1200200, 53295, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455015988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=52,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=16,MILLISECOND=40,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455015988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=52,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=16,MILLISECOND=40,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455015988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=15,MILLISECOND=988,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property10.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property10.getLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.Chronology chronology15 = localTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withChronology(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) dateTimeFormatter2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        int int3 = period0.getDays();
        java.lang.String str4 = period0.toString();
        org.joda.time.Seconds seconds5 = period0.toStandardSeconds();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(seconds5);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours(570);
        org.joda.time.LocalTime localTime23 = localTime21.minusMinutes(1970);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime30 = dateTime28.plus((long) (-1));
        org.joda.time.DateTime dateTime31 = dateTime28.withTimeAtStartOfDay();
        java.util.Date date32 = dateTime28.toDate();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36, periodType37);
        int int39 = dateMidnight36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime42.copy();
        mutableDateTime42.setMillis((long) (byte) 10);
        int int47 = mutableDateTime42.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, dateTimeZone49);
        boolean boolean51 = dateTimeZone49.isFixed();
        mutableDateTime42.setZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime53 = dateTime28.toDateTime(dateTimeZone49);
        int int55 = dateTimeZone49.getOffsetFromLocal((long) 12);
        int int57 = dateTimeZone49.getStandardOffset((long) (byte) 0);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(dateTimeZone49);
        boolean boolean59 = localTime23.isAfter((org.joda.time.ReadablePartial) localTime58);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1200000 + "'", int55 == 1200000);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1200000 + "'", int57 == 1200000);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        long long23 = dateTimeField20.add((long) 20, 2022);
        java.lang.String str24 = dateTimeField20.getName();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 63808128000020L + "'", long23 == 63808128000020L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfCentury" + "'", str24, "yearOfCentury");
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusDays(200);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusSeconds(6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime27.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        mutableDateTime29.set(dateTimeFieldType30, 5);
        boolean boolean34 = localDateTime17.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime17.withYearOfCentury((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        int int39 = localDateTime38.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.Locale locale5 = java.util.Locale.US;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale5);
        // The following exception was thrown during execution in test generation
        try {
            calendar7.roll(53353, 1978);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455016394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=16,MILLISECOND=394,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455016394,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=16,MILLISECOND=394,ZONE_OFFSET=1200000,DST_OFFSET=0]");
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(710);
        org.joda.time.DateTime dateTime13 = property7.addWrapFieldToCopy(2022);
        org.joda.time.DateTime dateTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime16 = property7.addToCopy(1978);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(5, (int) (byte) -1);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(0, (int) '4', (int) 'u');
        java.util.Calendar.Builder builder9 = builder0.setLenient(false);
        java.util.Calendar.Builder builder13 = builder0.setWeekDate(883, 23, 887);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.Date date16 = dateTime15.toDate();
        date16.setMonth((int) '#');
        int int19 = date16.getMinutes();
        date16.setYear((int) (byte) 0);
        int int22 = date16.getTimezoneOffset();
        java.time.Instant instant23 = date16.toInstant();
        java.util.Date date24 = java.util.Date.from(instant23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder13.setInstant(date24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Dec 21 00:00:00 GMT+00:20 1900");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-20) + "'", int22 == (-20));
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Dec 21 00:00:00 GMT+00:20 1900");
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1000L, (long) 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.minusWeeks(6);
        java.util.Date date10 = dateTime9.toDate();
        org.joda.time.DateTime.Property property11 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) (-1));
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.DateTime dateTime25 = dateTime12.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime12.plusMillis((int) (byte) -1);
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        int int29 = dateTime27.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Nov 18 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(999L, 0L);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19, periodType20);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod21.setPeriod(1L, chronology23);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime15.dayOfMonth();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime15.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.add((long) 37);
        org.joda.time.MutableDateTime mutableDateTime31 = property27.add((long) 21);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) 'x');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minusMonths(5);
        int int8 = dateMidnight4.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8379600000L + "'", long5 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        mutablePeriod5.add(durationFieldType12, 6);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = period20.size();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1970, dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = localDate26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate30 = localDate26.withWeekyear((-1));
        boolean boolean32 = localDate30.equals((java.lang.Object) 8);
        int int33 = localDate30.getYear();
        boolean boolean34 = yearMonthDay22.equals((java.lang.Object) localDate30);
        org.joda.time.LocalDate.Property property35 = localDate30.yearOfEra();
        org.joda.time.LocalDate localDate37 = property35.addToCopy(8);
        int int38 = localDate37.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate41 = localDate37.withFieldAdded(durationFieldType39, (int) (byte) 10);
        boolean boolean42 = period20.isSupported(durationFieldType39);
        int int43 = mutablePeriod5.get(durationFieldType39);
        int int44 = mutablePeriod5.getMillis();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 107 + "'", int44 == 107);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime27.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        mutableDateTime29.set(dateTimeFieldType30, 5);
        boolean boolean34 = localDateTime17.isSupported(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime17.withCenturyOfEra(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.DurationField durationField25 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.yearOfCentury();
        int int27 = dateTimeField26.getMinimumValue();
        long long29 = dateTimeField26.roundHalfCeiling(6L);
        org.joda.time.DurationField durationField30 = dateTimeField26.getRangeDurationField();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1200000L) + "'", long29 == (-1200000L));
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.add((long) (byte) 10, (long) '4');
        java.util.Locale locale10 = java.util.Locale.US;
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        int int12 = dateTimeField6.getMaximumValue();
        org.joda.time.DurationField durationField13 = dateTimeField6.getDurationField();
        long long16 = durationField13.getValueAsLong(85200000L, 2L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1640995200010L + "'", long9 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(600100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(21);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        int int10 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        long long15 = dateTimeField12.set(32770L, (int) (short) 1);
        org.joda.time.DurationField durationField16 = dateTimeField12.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1199999L) + "'", long15 == (-1199999L));
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        boolean boolean6 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(9);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, (long) 'a');
        boolean boolean10 = property5.equals((java.lang.Object) period9);
        org.joda.time.TimeOfDay timeOfDay12 = property5.addToCopy((-100));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property14 = timeOfDay12.property(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        int int31 = property29.getMaximumShortTextLength(locale30);
        java.lang.String str32 = property29.getAsString();
        java.lang.String str33 = property29.getAsText();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40, periodType41);
        int int43 = dateMidnight40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49, periodType50);
        int int52 = dateMidnight49.getYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.withDayOfMonth((int) (byte) 10);
        boolean boolean55 = dateMidnight40.isBefore((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.monthOfYear();
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        int int58 = property56.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale35.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(locale35);
        int int61 = property29.getMaximumTextLength(locale35);
        java.lang.String str62 = dateTimeField8.getAsText((long) 32769, locale35);
        java.lang.String str63 = locale35.toString();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "janvier" + "'", str33, "janvier");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (France)" + "'", str36, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str59, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fr_FR" + "'", str63, "fr_FR");
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        int int14 = mutableDateTime9.getYearOfEra();
        mutableDateTime9.setWeekyear(11);
        mutableDateTime9.addYears(5);
        mutableDateTime9.add((long) 10);
        mutableDateTime9.addMinutes(32470000);
        int int23 = mutableDateTime9.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime9.era();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getDate();
        date6.setHours(9);
        date6.setDate((-15993));
        int int13 = date6.getYear();
        java.time.Instant instant14 = date6.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 19 09:20:00 GMT+00:20 1926");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-20) + "'", int7 == (-20));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        int int7 = yearMonthDay6.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears(35);
        org.joda.time.Interval interval10 = yearMonthDay6.toInterval();
        org.joda.time.Period period19 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period21 = period19.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusDays((int) 'a');
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology28);
        long long33 = chronology28.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        int int41 = dateMidnight38.getYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, readableDuration46, periodType47);
        mutablePeriod48.addMillis((int) '4');
        int int51 = mutablePeriod48.size();
        int[] intArray53 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod48, (-44179689599900L));
        org.joda.time.Chronology chronology54 = chronology28.withUTC();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay6.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        long long58 = dateTimeField56.roundCeiling(2629746000L);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455017049,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=17,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, -511338, -23, -59, -59, -900]");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2629746000L + "'", long58 == 2629746000L);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.joda.time.Period period10 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period12 = period10.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays((int) 'a');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(chronology19);
        long long24 = chronology19.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology28);
        int[] intArray32 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod29, (-5270399989L), 63808128000020L);
        org.joda.time.DateTimeField dateTimeField33 = chronology19.year();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(25087795200016L, (long) 33, chronology19);
        mutablePeriod34.add(11232000000L);
        mutablePeriod34.setSeconds(17);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[2022, 2, 0, 0, 0, 0, 0, 9]");
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeFormatter2.parseMillis("53201");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(600100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 30);
        int int10 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withPivotYear(14);
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter12.parseDateTime("DayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("10");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight23 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight24 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded(92016000000L, 253);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42, periodType43);
        int int45 = dateMidnight42.getYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.withDayOfMonth((int) (byte) 10);
        boolean boolean48 = dateMidnight33.isBefore((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight.Property property49 = dateMidnight47.monthOfYear();
        org.joda.time.DateMidnight dateMidnight50 = property49.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight52 = property49.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight53 = property49.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight54 = property49.roundFloorCopy();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType58 = periodType57.withWeeksRemoved();
        java.lang.String str59 = periodType58.getName();
        int int60 = periodType58.size();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(10L, (long) (byte) 100, periodType58, chronology61);
        int int63 = mutablePeriod62.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean66 = dateTimeZone65.isFixed();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMillis(100);
        org.joda.time.Period period71 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(100L, dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = dateTime74.toLocalDateTime();
        org.joda.time.DateTime dateTime77 = dateTime74.withMonthOfYear(11);
        org.joda.time.Duration duration78 = period71.toDurationFrom((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime67.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Period period80 = duration78.toPeriod();
        mutablePeriod62.setPeriod((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight54.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight26.withDurationAdded((org.joda.time.ReadableDuration) duration78, 16);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "YearWeekDayNoWeeks" + "'", str59, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateMidnight84);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12, periodType13);
        mutablePeriod14.addMillis((int) '4');
        int int17 = mutablePeriod14.size();
        java.util.Locale locale18 = java.util.Locale.US;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        boolean boolean20 = mutablePeriod14.equals((java.lang.Object) calendar19);
        org.joda.time.MonthDay monthDay22 = monthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 100);
        org.joda.time.MonthDay.Property property23 = monthDay0.monthOfYear();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = monthDay0.toString("GMT", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455017243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=17,MILLISECOND=243,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.yearOfEra();
        int int7 = localDateTime1.size();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.era();
        int int9 = localDateTime1.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime1.getValue(511340);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 511340");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1201970 + "'", int9 == 1201970);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        java.lang.String str4 = yearMonthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime9 = yearMonthDay0.toDateTimeAtMidnight(dateTimeZone6);
        int int11 = yearMonthDay0.getValue((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21" + "'", str4, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.parse("1");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((java.lang.Object) localTime7);
        int int9 = property5.compareTo((org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withMillisOfSecond(16);
        java.lang.Character[] charArray14 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet15 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet15, charArray14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        boolean boolean22 = charSet15.contains((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime25 = timeOfDay11.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate29 = dateTime28.toLocalDate();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTime dateTime32 = dateTime28.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval36.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Period period39 = interval36.toPeriod();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        org.joda.time.Hours hours46 = period45.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period49 = period45.withFieldAdded(durationFieldType47, 100);
        org.joda.time.Period period51 = period39.withFieldAdded(durationFieldType47, (int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime28.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.DateTime dateTime55 = dateTime28.toDateTime(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(dateTimeZone53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone18, dateTimeZone53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology48);
        long long50 = interval49.getEndMillis();
        java.lang.String str51 = interval49.toString();
        org.joda.time.MutableInterval mutableInterval52 = interval49.toMutableInterval();
        org.joda.time.Period period53 = interval49.toPeriod();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType55 = periodType54.withWeeksRemoved();
        org.joda.time.Period period56 = interval49.toPeriod(periodType54);
        org.joda.time.Duration duration57 = interval49.toDuration();
        int int58 = duration14.compareTo((org.joda.time.ReadableDuration) duration57);
        java.lang.Character[] charArray61 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet62 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet62, charArray61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(100L, dateTimeZone65);
        boolean boolean67 = dateTimeZone65.isFixed();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone65);
        boolean boolean69 = charSet62.contains((java.lang.Object) dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.plus((long) 19);
        boolean boolean73 = dateMidnight70.isBeforeNow();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight70, periodType74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight70.withMillis(92016000000L);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str51, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property4.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod9.setMinutes(11);
        org.joda.time.Period period12 = mutablePeriod9.toPeriod();
        org.joda.time.LocalTime localTime13 = localTime6.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = dateMidnight18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        int int30 = dateMidnight27.getYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withDayOfMonth((int) (byte) 10);
        boolean boolean33 = dateMidnight18.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight32.monthOfYear();
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        int int36 = property34.getMaximumShortTextLength(locale35);
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayName();
        int int39 = property14.getMaximumTextLength(locale35);
        org.joda.time.LocalTime localTime41 = property14.addWrapFieldToCopy(475);
        int int42 = localTime41.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "japonais (Japon)" + "'", str38, "japonais (Japon)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 101 + "'", int42 == 101);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField25 = chronology17.minutes();
        org.joda.time.DurationField durationField26 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.weekyear();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        long long4 = dateTimeZone2.nextTransition(379987200000L);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withDayOfMonth((-27424246));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27424246 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 379987200000L + "'", long4 == 379987200000L);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(11, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        boolean boolean4 = timeZone0.observesDaylightTime();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        int int23 = dateMidnight20.getYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDayOfMonth((int) (byte) 10);
        boolean boolean26 = dateMidnight11.isBefore((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        int int29 = property27.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale6.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(locale6);
        java.lang.String str32 = locale6.getISO3Language();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        java.lang.String str36 = locale6.getDisplayName(locale35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone0, locale6);
        boolean boolean38 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais (France)" + "'", str7, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str30, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (France)" + "'", str36, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455020505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=20,MILLISECOND=505,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("00:19:50.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.LocalDate localDate16 = localDate14.withWeekOfWeekyear(52);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        java.lang.String str19 = periodType18.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, periodType18, chronology20);
        mutablePeriod21.addHours((int) (byte) 10);
        org.joda.time.LocalDate localDate25 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, 200);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(5);
        org.joda.time.Period period33 = new org.joda.time.Period(31536000000L, 1640995200010L);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PeriodType[Hours]" + "'", str19, "PeriodType[Hours]");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) (-1));
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded(readableDuration12, 1970);
        int int15 = property3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime16 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) -1, (long) (byte) 0, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears(492);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.withPeriodAdded(readablePeriod24, 54);
        int int27 = dateTime21.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(100);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        java.lang.String str4 = mutablePeriod3.toString();
        mutablePeriod3.add(253, 32470000, 2022, 41, 54606912, 366, (int) '#', 366);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1317601048L);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        int int2 = monthDay0.size();
        int int3 = monthDay0.size();
        org.joda.time.MonthDay monthDay5 = monthDay0.plusDays(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay7 = monthDay0.withMonthOfYear(913);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 913 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("ISOChronology[+00:20]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[+00:20]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) 3, chronology1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.time.ZoneId zoneId5 = timeZone3.toZoneId();
        java.time.ZoneId zoneId6 = timeZone3.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime8 = localTime2.toDateTimeToday(dateTimeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone7.toTimeZone();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(1645454852035L, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.era();
        org.joda.time.DurationField durationField21 = chronology18.weeks();
        long long24 = durationField21.add((-457070L), 32770);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 19819295542930L + "'", long24 == 19819295542930L);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        mutableDateTime9.addWeeks((int) (byte) 1);
        int int15 = mutableDateTime9.getWeekyear();
        mutableDateTime9.setWeekyear(13);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str3 = dateTimeFieldType2.getName();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (byte) 0);
        org.joda.time.Period period8 = period6.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod9 = period6.toMutablePeriod();
        mutablePeriod9.setPeriod((long) 100);
        mutablePeriod9.setMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.plusHours((int) (short) 0);
        int int20 = timeOfDay19.getHourOfDay();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.TimeOfDay timeOfDay23 = property21.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = property21.addToCopy(49);
        org.joda.time.Period period34 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period36 = period34.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plusDays((int) 'a');
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48, periodType49);
        org.joda.time.Chronology chronology52 = null;
        mutablePeriod50.setPeriod(1L, chronology52);
        long long56 = chronology43.add((org.joda.time.ReadablePeriod) mutablePeriod50, (long) (short) 0, 32769);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay25.withChronologyRetainFields(chronology43);
        mutablePeriod9.setPeriod((long) 52, 28861000L, chronology43);
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType2.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField60 = chronology43.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(12960, 53279, chronology43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12960 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "minuteOfDay" + "'", str3, "minuteOfDay");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 32769L + "'", long56 == 32769L);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.minusMonths(53);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property4.withMinimumValue();
        org.joda.time.LocalTime localTime7 = property4.getLocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime7.withHourOfDay(20);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        calendar4.clear();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        int int30 = calendar4.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.roll(47, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1951);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        int int7 = property6.getMinimumValue();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone(zoneId13);
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale15);
        java.lang.String str18 = locale9.getDisplayScript(locale15);
        org.joda.time.LocalDateTime localDateTime19 = property6.setCopy("1970", locale9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone21);
        int int24 = localDateTime23.getMillisOfSecond();
        int int25 = localDateTime23.getMonthOfYear();
        java.util.Date date26 = localDateTime23.toDate();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusMinutes((-1));
        int int29 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.minusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMillis(100);
        org.joda.time.Period period39 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = dateTime42.toLocalDateTime();
        org.joda.time.DateTime dateTime45 = dateTime42.withMonthOfYear(11);
        org.joda.time.Duration duration46 = period39.toDurationFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = duration46.toPeriod();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration46, 23);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean54 = dateTimeZone53.isFixed();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMillis(100);
        org.joda.time.Period period59 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = dateTime62.toLocalDateTime();
        org.joda.time.DateTime dateTime65 = dateTime62.withMonthOfYear(11);
        org.joda.time.Duration duration66 = period59.toDurationFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime55.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration68, (org.joda.time.ReadableInstant) dateMidnight71, periodType72);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType75 = periodType74.withWeeksRemoved();
        java.lang.String str76 = periodType75.getName();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateMidnight71, periodType75);
        org.joda.time.Instant instant78 = instant51.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology81);
        long long83 = interval82.getEndMillis();
        java.lang.String str84 = interval82.toString();
        org.joda.time.MutableInterval mutableInterval85 = interval82.toMutableInterval();
        org.joda.time.Period period86 = interval82.toPeriod();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType88 = periodType87.withWeeksRemoved();
        org.joda.time.Period period89 = interval82.toPeriod(periodType87);
        org.joda.time.Duration duration90 = interval82.toDuration();
        org.joda.time.Instant instant92 = instant78.withDurationAdded((org.joda.time.ReadableDuration) duration90, (int) (short) 10);
        java.lang.String str93 = duration90.toString();
        int int94 = duration46.compareTo((org.joda.time.ReadableDuration) duration90);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime19.plus((org.joda.time.ReadableDuration) duration46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455021161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=21,MILLISECOND=161,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455021161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=21,MILLISECOND=161,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "YearWeekDayNoWeeks" + "'", str76, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str84, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "PT0.011S" + "'", str93, "PT0.011S");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(32772, 107, 26, 53303, 982, 37, 32772, 625);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.joda.time.Period period4 = new org.joda.time.Period(1970, 86399999, 520, 86399999);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "3940");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("fra");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("DateTimeField[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[hourOfDay] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 'u', 31536000000L);
        org.joda.time.Period period4 = period2.withMillis(475);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration5 = period2.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime19.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfMonth();
        mutableDateTime19.setYear((-292275054));
        int int25 = mutableDateTime19.getYear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime27 = dateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, readableDuration39, periodType40);
        mutablePeriod41.addMillis((int) '4');
        mutablePeriod41.addHours(4);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod41);
        boolean boolean47 = localDate6.equals((java.lang.Object) interval46);
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime19.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfMonth();
        mutableDateTime19.setYear((-292275054));
        int int25 = mutableDateTime19.getYear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTime dateTime27 = dateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, readableDuration39, periodType40);
        mutablePeriod41.addMillis((int) '4');
        mutablePeriod41.addHours(4);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod41);
        boolean boolean47 = localDate6.equals((java.lang.Object) interval46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51, periodType52);
        int int54 = dateMidnight51.getYear();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight51.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.Interval interval64 = interval46.overlap((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.toDurationMillis();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1000L + "'", long65 == 1000L);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        int int4 = period2.get(durationFieldType3);
        org.joda.time.Period period6 = period2.minusWeeks(9);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime16.copy();
        mutableDateTime16.setMillis((long) (byte) 10);
        int int21 = mutableDateTime16.getYearOfEra();
        mutableDateTime16.setWeekyear(11);
        boolean boolean24 = period2.equals((java.lang.Object) mutableDateTime16);
        org.joda.time.Period period26 = period2.minusWeeks(101);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(710);
        org.joda.time.DateTime dateTime13 = property7.addWrapFieldToCopy(2022);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        mutablePeriod24.addSeconds(5);
        mutablePeriod24.setPeriod((long) 70);
        org.joda.time.DateTime dateTime30 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod24, 21);
        java.util.Date date31 = dateTime30.toDate();
        org.joda.time.Period period41 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period43 = period41.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plusDays((int) 'a');
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period41, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology50);
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 0, chronology50);
        org.joda.time.DateTime dateTime53 = dateTime30.toDateTime(chronology50);
        org.joda.time.DateTime dateTime55 = dateTime30.withMillisOfDay(15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Dec 30 10:02:01 GMT+00:20 569");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        calendar4.set((-1), 52, 0, 32769, 200, 0);
        calendar4.setTimeInMillis(962487036000L);
        java.lang.String str37 = calendar4.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.clear(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=962487036000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2000,MONTH=6,WEEK_OF_YEAR=26,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=183,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=30,SECOND=36,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "gregory" + "'", str37, "gregory");
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration2, (org.joda.time.ReadableInstant) dateMidnight5, periodType6);
        int int8 = dateMidnight5.getYear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime11.copy();
        mutableDateTime11.setMillis((long) (byte) 10);
        int int16 = mutableDateTime11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        mutableDateTime11.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.dayOfYear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(8379600000L, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime11.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        boolean boolean31 = languageRange1.equals((java.lang.Object) property30);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay(2200, (int) (byte) 10, 1);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("janvier");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder12 = builder8.setLocale(locale10);
        java.util.Calendar.Builder builder16 = builder8.setDate(0, 32470000, 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "janvier");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate2.withDayOfWeek((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(37, 12960, 2170, 13);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfWeek(3);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval21 = new org.joda.time.Interval(10L, 10L, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate17.plusDays(0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        calendar4.roll(1, false);
        long long8 = calendar4.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar4.getGreatestMinimum(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1613919022017,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=22,MILLISECOND=17,ZONE_OFFSET=1200000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1613919022017L + "'", long8 == 1613919022017L);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        boolean boolean4 = timeZone0.observesDaylightTime();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        int int23 = dateMidnight20.getYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDayOfMonth((int) (byte) 10);
        boolean boolean26 = dateMidnight11.isBefore((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        int int29 = property27.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale6.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(locale6);
        java.lang.String str32 = locale6.getISO3Language();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category33);
        java.lang.String str36 = locale6.getDisplayName(locale35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone0, locale6);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromCalendarFields(calendar37);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = calendar37.getMinimum(535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 535");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais (France)" + "'", str7, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str30, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (France)" + "'", str36, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455022029,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=22,MILLISECOND=29,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.joda.time.Period period10 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period12 = period10.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays((int) 'a');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) localTime24, 10L);
        org.joda.time.DurationField durationField27 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology19.weekyears();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval31 = new org.joda.time.Interval((long) 37895, (long) 49, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 27661000L + "'", long26 == 27661000L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval4 = new org.joda.time.Interval(10L, 10L, dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 30, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plusDays((int) 'a');
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period15 = new org.joda.time.Period(0L, periodType14);
        org.joda.time.Period period25 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period27 = period25.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusDays((int) 'a');
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(chronology34);
        long long39 = chronology34.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.DurationField durationField42 = chronology34.minutes();
        org.joda.time.DurationField durationField43 = chronology34.millis();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0L, chronology34);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 70, (long) 47, periodType14, chronology34);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutablePeriod45.setPeriod(readablePeriod46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight10.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod45, 53255);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime5.era();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(31);
        org.joda.time.Period period9 = org.joda.time.Period.seconds(1);
        int int10 = period9.getMillis();
        org.joda.time.Period period12 = period9.withDays(33198);
        int int13 = period12.getMinutes();
        org.joda.time.LocalTime localTime14 = localTime5.plus((org.joda.time.ReadablePeriod) period12);
        int int15 = localTime5.getMillisOfDay();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455022143,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=22,MILLISECOND=143,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53422143 + "'", int15 == 53422143);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod5 = period2.toMutablePeriod();
        mutablePeriod5.setPeriod((long) 100);
        mutablePeriod5.setSeconds(49);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        int int10 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfMonth(19);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category15);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category15, locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = locale19.getDisplayName(locale21);
        java.lang.String str23 = localDateTime13.toString("\u6708", locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay24 = property1.setCopy("PeriodType[Hours]", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[Hours]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "allemand (Allemagne)" + "'", str22, "allemand (Allemagne)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u6708" + "'", str23, "\u6708");
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(5, (int) (byte) -1);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(0, (int) '4', (int) 'u');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        org.joda.time.Hours hours14 = period13.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period17 = period13.withFieldAdded(durationFieldType15, 100);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField38 = durationFieldType15.getField(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.centuries();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        int int46 = dateMidnight43.getYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime49.copy();
        int int52 = mutableDateTime49.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.weekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59, periodType60);
        org.joda.time.Chronology chronology63 = null;
        mutablePeriod61.setPeriod(1L, chronology63);
        mutableDateTime55.add((org.joda.time.ReadablePeriod) mutablePeriod61);
        int[] intArray68 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod61, (long) (byte) 10, (-13219199999L));
        java.util.Calendar.Builder builder69 = builder7.setFields(intArray68);
        java.util.Calendar.Builder builder72 = builder69.setWeekDefinition(4, 5);
        java.util.Locale locale73 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        java.util.Calendar.Builder builder75 = builder69.setLocale(locale73);
        java.util.Calendar.Builder builder79 = builder75.setTimeOfDay(70, 53353, 887);
        java.util.Calendar.Builder builder84 = builder75.setTimeOfDay(24, 53295, 52, 1970);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, -5, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.yearOfEra();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455022347,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=22,MILLISECOND=347,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter9.print(1645400400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        mutablePeriod10.addSeconds(5);
        mutablePeriod10.setPeriod((long) 70);
        mutablePeriod10.addYears(570);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        int int19 = periodType17.indexOf(durationFieldType18);
        int int20 = mutablePeriod10.get(durationFieldType18);
        mutablePeriod10.addDays(15);
        int int23 = mutablePeriod10.getWeeks();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.plusDays(600100);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.withYear(710);
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay26.year();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        org.joda.time.DurationFieldType durationFieldType31 = durationField30.getType();
        mutablePeriod10.add(durationFieldType31, 19044);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationFieldType31);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.Days days10 = period9.toStandardDays();
        org.joda.time.Period period12 = period9.withYears((int) (short) -1);
        org.joda.time.Period period14 = period9.plusDays(520);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 223);
        java.lang.Appendable appendable9 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(2629746000L, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra(33198);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable9, (org.joda.time.ReadablePartial) localDate13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        int int6 = dateMidnight2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.withEra(0);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMonthOfYear(11);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(292278993, 8, (int) 'a', 7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        java.lang.String str14 = timeZone10.getID();
        java.time.ZoneId zoneId15 = timeZone10.toZoneId();
        java.util.Calendar.Builder builder16 = builder9.setTimeZone(timeZone10);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT+00:20" + "'", str14, "GMT+00:20");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime16, "", 8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone3);
        calendar7.setMinimalDaysInFirstWeek(1970);
        int int11 = calendar7.getActualMaximum((int) (short) 10);
        boolean boolean12 = calendar7.isWeekDateSupported();
        int int13 = calendar2.compareTo(calendar7);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455022747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=22,MILLISECOND=747,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455022747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=22,MILLISECOND=747,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusMillis(14);
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime localTime10 = localTime7.plusMinutes(27423340);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455022759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=22,MILLISECOND=759,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "14:50:22.773" + "'", str8, "14:50:22.773");
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        org.joda.time.DateMidnight dateMidnight23 = property19.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight24 = property19.withMinimumValue();
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight27 = property25.addWrapFieldToCopy(53353);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withDayOfYear(27423340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27423340 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(3351, 86399999, 982, 8, 2170, 710, 492);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2170 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        boolean boolean8 = charSet3.isEmpty();
        int int9 = charSet3.size();
        boolean boolean10 = charSet3.isEmpty();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14, periodType15);
        int int17 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfMonth();
        mutableDateTime20.setYear((-292275054));
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(100L, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime33 = dateTime31.plus((long) (-1));
        org.joda.time.DateTime dateTime34 = dateTime31.withTimeAtStartOfDay();
        java.util.Date date35 = dateTime31.toDate();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39, periodType40);
        int int42 = dateMidnight39.getYear();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime45.copy();
        mutableDateTime45.setMillis((long) (byte) 10);
        int int50 = mutableDateTime45.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(100L, dateTimeZone52);
        boolean boolean54 = dateTimeZone52.isFixed();
        mutableDateTime45.setZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime31.toDateTime(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime31.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField58 = mutableDateTime57.getRoundingField();
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime57);
        boolean boolean60 = charSet3.remove((java.lang.Object) mutableDateTime20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Dec 30 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.joda.time.Period period4 = new org.joda.time.Period((-292275054), 11, 12, 1620100);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6, periodType7);
        int int9 = dateMidnight6.getYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime12.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfMonth();
        mutableDateTime12.setYear((-292275054));
        int int18 = mutableDateTime12.getYear();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime12.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        mutableDateTime23.addMillis(53);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        boolean boolean7 = dateTimeField6.isLenient();
        int int9 = dateTimeField6.get((long) 12);
        long long11 = dateTimeField6.roundFloor((long) 1);
        boolean boolean13 = dateTimeField6.isLeap((long) 1970);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(2, 243565, 126, (int) 'x', 36, 126, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime4.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField31 = mutableDateTime30.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setDayOfMonth(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNull(dateTimeField31);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime10.copy();
        int int13 = mutableDateTime10.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.weekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((long) 12);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundFloor();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, readableDuration29, periodType30);
        mutablePeriod31.addMillis((int) '4');
        org.joda.time.Period period42 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period44 = period42.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plusDays((int) 'a');
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period42, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Period period59 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period61 = period59.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plusDays((int) 'a');
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyear();
        org.joda.time.Interval interval71 = interval50.withChronology(chronology68);
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76, periodType77);
        org.joda.time.Chronology chronology80 = null;
        mutablePeriod78.setPeriod(1L, chronology80);
        mutablePeriod78.add(100L);
        int int84 = mutablePeriod78.getYears();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.millis();
        mutablePeriod78.add(durationFieldType85, 6);
        int int88 = mutablePeriod78.size();
        org.joda.time.PeriodType periodType89 = mutablePeriod78.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((java.lang.Object) interval71, periodType89);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime17, periodType89);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertNotNull(periodType89);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTime dateTime10 = property7.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) (-1));
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded(readableDuration23, 1970);
        int int26 = property14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean27 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime29 = dateTime10.withHourOfDay(20);
        org.joda.time.DateTime.Property property30 = dateTime29.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        int int7 = yearMonthDay6.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears(35);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(19);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        int int13 = property12.get();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455023219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=23,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = dateTime4.toLocalDate();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Interval interval9 = localDate2.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((-292275054));
        org.joda.time.LocalDate localDate13 = localDate2.minusWeeks(2200);
        int int14 = localDate2.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Interval interval9 = interval7.withDurationBeforeEnd(readableDuration8);
        long long10 = interval7.getStartMillis();
        org.joda.time.Chronology chronology11 = interval7.getChronology();
        org.joda.time.Interval interval12 = interval3.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusHours((int) (short) 0);
        int int17 = timeOfDay16.getHourOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.TimeOfDay timeOfDay20 = property18.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = property18.addToCopy(49);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period33 = period31.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusDays((int) 'a');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45, periodType46);
        org.joda.time.Chronology chronology49 = null;
        mutablePeriod47.setPeriod(1L, chronology49);
        long long53 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod47, (long) (short) 0, 32769);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay22.withChronologyRetainFields(chronology40);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.plusMinutes(32769);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod59.setMinutes(11);
        mutablePeriod59.setYears((int) '#');
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay54.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod59, 8);
        org.joda.time.Interval interval66 = interval7.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32769L + "'", long53 == 32769L);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(interval66);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.minusWeeks(6);
        java.util.Date date10 = dateTime9.toDate();
        int int11 = date10.getMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Nov 18 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfWeek();
        java.lang.Character[] charArray10 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet11 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet11, charArray10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        boolean boolean18 = charSet11.contains((java.lang.Object) dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight20 = localDate2.toDateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean22 = localDate2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = localDate2.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate2.withDayOfMonth(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology13);
        long long15 = interval14.getEndMillis();
        java.lang.String str16 = interval14.toString();
        org.joda.time.MutableInterval mutableInterval17 = interval14.toMutableInterval();
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate9.minus((org.joda.time.ReadablePeriod) period18);
        java.util.Date date26 = new java.util.Date((int) ' ', 12, (int) (short) 1, (int) (short) 10, 52, (int) (byte) 0);
        int int27 = date26.getSeconds();
        org.joda.time.Period period36 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period38 = period36.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.plusDays((int) 'a');
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period36, (org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology45);
        long long50 = chronology45.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology45);
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now(chronology45);
        org.joda.time.DurationField durationField53 = chronology45.minutes();
        org.joda.time.DurationField durationField54 = chronology45.millis();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((java.lang.Object) date26, chronology45);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration56, (org.joda.time.ReadableInstant) dateMidnight59, periodType60);
        int int62 = dateMidnight59.getYear();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight59.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight64.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        org.joda.time.DateTime dateTime74 = dateMidnight70.toDateTime(dateTimeZone72);
        long long78 = dateTimeZone72.convertLocalToUTC(1645454801986L, false, 10L);
        org.joda.time.DateMidnight dateMidnight79 = yearMonthDay55.toDateMidnight(dateTimeZone72);
        org.joda.time.DateTime dateTime80 = localDate9.toDateTimeAtMidnight(dateTimeZone72);
        int int81 = localDate9.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455023579,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=23,MILLISECOND=579,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str16, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Sun Jan 01 10:52:00 GMT+00:20 1933");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645453601986L + "'", long78 == 1645453601986L);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.parse("1");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((java.lang.Object) localTime7);
        int int9 = property5.compareTo((org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.withMillisOfSecond(16);
        java.lang.Character[] charArray14 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet15 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet15, charArray14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        boolean boolean22 = charSet15.contains((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime25 = timeOfDay11.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.Period period37 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period39 = period37.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusDays((int) 'a');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now(chronology46);
        long long51 = chronology46.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.dayOfWeek();
        boolean boolean53 = durationFieldType28.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType26.getField(chronology46);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType26.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property56 = timeOfDay11.property(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        java.util.Date date6 = new java.util.Date((int) ' ', 12, (int) (short) 1, (int) (short) 10, 52, (int) (byte) 0);
        int int7 = date6.getSeconds();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        long long30 = chronology25.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DurationField durationField33 = chronology25.minutes();
        org.joda.time.DurationField durationField34 = chronology25.millis();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) date6, chronology25);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableDuration36, (org.joda.time.ReadableInstant) dateMidnight39, periodType40);
        int int42 = dateMidnight39.getYear();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight44.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTime dateTime54 = dateMidnight50.toDateTime(dateTimeZone52);
        long long58 = dateTimeZone52.convertLocalToUTC(1645454801986L, false, 10L);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay35.toDateMidnight(dateTimeZone52);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay35.withYear((int) (byte) -1);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 01 10:52:00 GMT+00:20 1933");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645453601986L + "'", long58 == 1645453601986L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        mutableDateTime9.addSeconds(710);
        mutableDateTime9.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.year();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfCeiling();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis(100);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 49, (long) 'x');
        org.joda.time.DateTime dateTime29 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, 2022);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime39.copy();
        mutableDateTime39.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.dayOfMonth();
        mutableDateTime39.addSeconds(710);
        mutableDateTime39.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime39.year();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime39.yearOfEra();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54, periodType55);
        int int57 = dateMidnight54.getYear();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight59, readableDuration60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, readableDuration62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight59.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight68, readableDuration69, periodType70);
        int int72 = dateMidnight68.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight68.getZone();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight65.withZoneRetainFields(dateTimeZone73);
        mutableDateTime39.setZoneRetainFields(dateTimeZone73);
        long long77 = dateTimeZone73.nextTransition(1645454800697L);
        org.joda.time.DateTime dateTime78 = dateTime22.withZone(dateTimeZone73);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now(dateTimeZone73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((java.lang.Object) property19, dateTimeZone73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645454800697L + "'", long77 == 1645454800697L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDate79);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Period period12 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period14 = period12.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusDays((int) 'a');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(chronology21);
        long long26 = chronology21.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.dayOfWeek();
        boolean boolean28 = durationFieldType3.isSupported(chronology21);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(4L, (long) 32470000, chronology21);
        org.joda.time.DateTimeField dateTimeField30 = chronology21.secondOfMinute();
        org.joda.time.DurationField durationField31 = chronology21.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = durationField31.getValue(189302400000L, (long) 53263);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 189302400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.minusMonths((int) (byte) 0);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getStandardOffset((long) 5);
        java.lang.String str11 = dateTimeZone7.getShortName(100L);
        org.joda.time.Interval interval12 = yearMonthDay0.toInterval(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone14);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        int int28 = period26.get(durationFieldType27);
        org.joda.time.Period period30 = period26.minusWeeks(9);
        org.joda.time.LocalDate localDate32 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 7);
        boolean boolean33 = dateTimeZone7.equals((java.lang.Object) localDate32);
        java.util.Date date34 = localDate32.toDate();
        int int35 = localDate32.getYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1200000 + "'", int9 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:20" + "'", str11, "+00:20");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455023888,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=23,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Dec 07 00:00:00 GMT+00:20 2020");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2020 + "'", int35 == 2020);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property44 = dateMidnight20.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight45 = property44.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight46 = property44.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight47 = property44.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfYear();
        org.joda.time.Period period11 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period13 = period11.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusDays((int) 'a');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology20);
        long long25 = chronology20.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.dayOfWeek();
        org.joda.time.DateTime dateTime27 = dateTime1.withChronology(chronology20);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate30 = dateTime29.toLocalDate();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval37.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval37.toPeriod();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44, periodType45);
        org.joda.time.Hours hours47 = period46.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period50 = period46.withFieldAdded(durationFieldType48, 100);
        org.joda.time.Period period52 = period40.withFieldAdded(durationFieldType48, (int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime29.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean55 = dateTimeZone54.isFixed();
        org.joda.time.DateTime dateTime56 = dateTime29.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime27.toDateTime(dateTimeZone54);
        java.lang.String str59 = dateTimeZone54.getShortName((long) '#');
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:20" + "'", str59, "+00:20");
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withMillisOfSecond(569);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(100);
        org.joda.time.Period period19 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear(11);
        org.joda.time.Duration duration26 = period19.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration26, 710);
        int int30 = localDateTime29.size();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.dayOfYear();
        org.joda.time.DurationField durationField32 = property31.getDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        calendar4.roll(1, false);
        long long8 = calendar4.getTimeInMillis();
        int int10 = calendar4.getActualMaximum(0);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap14 = calendar4.getDisplayNames(54606912, 5, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1613919024064,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=24,MILLISECOND=64,ZONE_OFFSET=1200000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1613919024064L + "'", long8 == 1613919024064L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMinutes(53255);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds(9);
        int int18 = localDateTime17.getYearOfEra();
        int int19 = localDateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 12);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundFloor();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay17.getFieldTypes();
        int int20 = yearMonthDay17.getMonthOfYear();
        java.lang.String str21 = yearMonthDay17.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime26 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime26.minusDays((int) '4');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 1970, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36, periodType37);
        int int39 = dateMidnight35.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight35.getZone();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone40);
        org.joda.time.Interval interval43 = localDate31.toInterval(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime26.withZoneRetainFields(dateTimeZone40);
        mutableDateTime16.setZone(dateTimeZone40);
        int int46 = mutableDateTime16.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21" + "'", str21, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(570, 1200, 190, 1200, 1190000, 54, 16802641, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval3.withDurationBeforeEnd(readableDuration4);
        org.joda.time.Period period6 = interval3.toPeriod();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        org.joda.time.Hours hours13 = period12.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period16 = period12.withFieldAdded(durationFieldType14, 100);
        org.joda.time.Period period18 = period6.withFieldAdded(durationFieldType14, (int) (byte) 10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray19 = new org.joda.time.DurationFieldType[] { durationFieldType14 };
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.forFields(durationFieldTypeArray19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.forFields(durationFieldTypeArray19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime25 = localTime23.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.LocalTime localTime27 = property26.roundCeilingCopy();
        org.joda.time.LocalTime localTime28 = property26.roundCeilingCopy();
        java.lang.String str29 = property26.getAsString();
        org.joda.time.LocalTime localTime30 = property26.getLocalTime();
        org.joda.time.LocalTime localTime32 = localTime30.withSecondOfMinute(49);
        org.joda.time.Period period41 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period43 = period41.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plusDays((int) 'a');
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period41, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology50);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) localTime55, 10L);
        org.joda.time.DurationField durationField58 = chronology50.millis();
        org.joda.time.DurationFieldType durationFieldType59 = durationField58.getType();
        org.joda.time.LocalTime localTime61 = localTime32.withFieldAdded(durationFieldType59, 8);
        int int62 = periodType21.indexOf(durationFieldType59);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldTypeArray19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 27661000L + "'", long57 == 27661000L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) property13, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(1645454823680L, dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localTime9.getValue(3665);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3665");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime26 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime3.withMillisOfSecond((int) 'x');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        int int30 = localDateTime28.getYearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology33);
        long long35 = interval34.getEndMillis();
        org.joda.time.Interval interval37 = interval34.withEndMillis((long) 11);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 1970);
        int int42 = localDateTime28.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime28.withTime(2004, 79187880, 10, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2004 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 70 + "'", int42 == 70);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.hourOfDay();
        int int8 = timeOfDay6.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusMillis(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay6.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = timeOfDay6.getFieldType(223);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 223");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        int int12 = property4.compareTo((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime localTime13 = property4.getLocalTime();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(52);
        org.joda.time.Period period20 = new org.joda.time.Period(569, (int) 'u', (-1), 9);
        int int21 = period20.getMonths();
        org.joda.time.LocalTime localTime22 = localTime13.plus((org.joda.time.ReadablePeriod) period20);
        int int23 = localTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        java.lang.Object obj4 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology22);
        long long27 = chronology22.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateTimeField dateTimeField30 = chronology22.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(obj4, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(365, 53279, 0, 12960, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusYears(6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMillis((long) 569);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear(6);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusMonths(2170);
        org.junit.Assert.assertNotNull(dateMidnight4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8379600000L + "'", long5 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfWeek();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMaximumValue();
        boolean boolean12 = property9.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale4 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = dateTimeFormatter6.parseLocalDateTime("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime25 = dateTime23.plus((long) (-1));
        org.joda.time.DateTime dateTime26 = dateTime23.withTimeAtStartOfDay();
        java.util.Date date27 = dateTime23.toDate();
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromDateFields(date27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withDayOfMonth(5);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime32 = yearMonthDay31.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate33 = dateTime32.toLocalDate();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Interval interval42 = interval40.withDurationBeforeEnd(readableDuration41);
        org.joda.time.Period period43 = interval40.toPeriod();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration44, (org.joda.time.ReadableInstant) dateMidnight47, periodType48);
        org.joda.time.Hours hours50 = period49.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period53 = period49.withFieldAdded(durationFieldType51, 100);
        org.joda.time.Period period55 = period43.withFieldAdded(durationFieldType51, (int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime32.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean58 = dateTimeZone57.isFixed();
        org.joda.time.DateTime dateTime59 = dateTime32.toDateTime(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight61 = yearMonthDay28.toDateMidnight(dateTimeZone57);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight18.withFields((org.joda.time.ReadablePartial) localDate62);
        int int64 = dateMidnight63.getMonthOfYear();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Dec 30 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        int int15 = mutablePeriod14.size();
        org.joda.time.LocalDate localDate17 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (short) 0);
        mutablePeriod14.setPeriod(0, 570, 11, 569, (int) (byte) 0, 1, 2, 14);
        int int27 = mutablePeriod14.getMonths();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 570 + "'", int27 == 570);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime16.copy();
        mutableDateTime16.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfMonth();
        mutableDateTime16.addSeconds(710);
        mutableDateTime16.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime16.year();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime16.yearOfEra();
        boolean boolean28 = mutableInterval6.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.add(1645454823680L);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime16.era();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime33 = yearMonthDay32.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 1970, dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDate localDate40 = localDate36.withWeekyear((-1));
        boolean boolean42 = localDate40.equals((java.lang.Object) 8);
        int int43 = localDate40.getYear();
        boolean boolean44 = yearMonthDay32.equals((java.lang.Object) localDate40);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay32.withYear((int) (byte) 100);
        org.joda.time.Interval interval47 = yearMonthDay32.toInterval();
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        mutableDateTime16.setChronology(chronology48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime16.millisOfSecond();
        mutableDateTime16.setMillis(0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str5, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 1, (long) 'a');
        boolean boolean10 = property5.equals((java.lang.Object) period9);
        org.joda.time.TimeOfDay timeOfDay12 = property5.addToCopy((-100));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone14);
        int int17 = localDateTime16.getMillisOfSecond();
        int int18 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusHours(2200);
        int int21 = localDateTime20.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = timeOfDay12.isEqual((org.joda.time.ReadablePartial) localDateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone5);
        boolean boolean10 = timeZone2.hasSameRules(timeZone5);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        int int23 = dateMidnight20.getYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29, periodType30);
        int int32 = dateMidnight29.getYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDayOfMonth((int) (byte) 10);
        boolean boolean35 = dateMidnight20.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.monthOfYear();
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        int int38 = property36.getMaximumShortTextLength(locale37);
        java.lang.String str39 = locale15.getDisplayLanguage(locale37);
        boolean boolean40 = locale37.hasExtensions();
        java.util.Locale locale41 = locale37.stripExtensions();
        java.util.Locale.setDefault(locale41);
        java.lang.String str43 = locale13.getDisplayLanguage(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = timeZone2.getDisplayName(false, 53263, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53263");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455024912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=24,MILLISECOND=912,ZONE_OFFSET=1200000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais (France)" + "'", str16, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str39, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str43, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        java.lang.String str5 = periodType4.getName();
        int int6 = periodType4.size();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(10L, (long) (byte) 100, periodType4, chronology7);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 19, periodType4);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths(7);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withDayOfYear(3);
        boolean boolean19 = periodType4.equals((java.lang.Object) dateMidnight18);
        org.joda.time.PeriodType periodType20 = periodType4.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "YearWeekDayNoWeeks" + "'", str5, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology17.years();
        boolean boolean22 = durationField21.isSupported();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(24, 1059594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withDayOfYear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone17);
        int int20 = localDateTime19.getMillisOfSecond();
        int int21 = localDateTime19.getMonthOfYear();
        java.util.Date date22 = localDateTime19.toDate();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMonths((int) (byte) 0);
        boolean boolean27 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        int int28 = localDateTime15.getDayOfWeek();
        int int29 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(5, (int) (byte) -1);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay(0, (int) '4', (int) 'u');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        org.joda.time.Hours hours14 = period13.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period17 = period13.withFieldAdded(durationFieldType15, 100);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField38 = durationFieldType15.getField(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.centuries();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        int int46 = dateMidnight43.getYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime49.copy();
        int int52 = mutableDateTime49.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.weekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59, periodType60);
        org.joda.time.Chronology chronology63 = null;
        mutablePeriod61.setPeriod(1L, chronology63);
        mutableDateTime55.add((org.joda.time.ReadablePeriod) mutablePeriod61);
        int[] intArray68 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod61, (long) (byte) 10, (-13219199999L));
        java.util.Calendar.Builder builder69 = builder7.setFields(intArray68);
        java.util.Calendar.Builder builder72 = builder69.setWeekDefinition(4, 5);
        java.util.Calendar.Builder builder76 = builder72.setDate(7, 8, (int) (short) 1);
        java.util.Calendar.Builder builder78 = builder76.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar79 = builder78.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid era");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, -5, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Period period10 = interval3.toPeriod(periodType8);
        org.joda.time.Duration duration11 = period10.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        int int15 = localDate14.getDayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate14.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval18 = localDate14.toInterval();
        boolean boolean19 = interval18.isBeforeNow();
        org.joda.time.Duration duration20 = interval18.toDuration();
        boolean boolean21 = duration11.isEqual((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25, periodType26);
        org.joda.time.Chronology chronology29 = null;
        mutablePeriod27.setPeriod(1L, chronology29);
        mutablePeriod27.add(100L);
        int int33 = mutablePeriod27.getYears();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37, periodType38);
        int int40 = dateMidnight37.getYear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight42.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52, periodType53);
        int int55 = dateMidnight52.getYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight52.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime58.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str62 = dateTimeFieldType61.getName();
        mutableDateTime60.set(dateTimeFieldType61, 5);
        mutablePeriod27.setPeriod((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime60.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period70 = period68.minusSeconds((int) (byte) 0);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.millis();
        mutablePeriod77.set(durationFieldType78, 5);
        org.joda.time.Period period82 = period72.withField(durationFieldType78, 1);
        org.joda.time.Period period84 = period68.withField(durationFieldType78, 32769);
        org.joda.time.Minutes minutes85 = period68.toStandardMinutes();
        org.joda.time.Period period86 = period68.toPeriod();
        org.joda.time.PeriodType periodType87 = period86.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((java.lang.Object) mutableDateTime60, periodType87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str5, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "minuteOfDay" + "'", str62, "minuteOfDay");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(minutes85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        org.joda.time.Period period8 = period5.multipliedBy((int) (short) 100);
        org.joda.time.Period period10 = period5.plusYears(1);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = period10.getValue(1200120);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1200120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1970, dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = localDate5.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear((-1));
        boolean boolean11 = localDate9.equals((java.lang.Object) 8);
        int int12 = localDate9.getYear();
        boolean boolean13 = yearMonthDay1.equals((java.lang.Object) localDate9);
        org.joda.time.LocalDate.Property property14 = localDate9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int17 = dateTimeField15.getMaximumValue((long) (-15993));
        int int18 = dateMidnight0.get(dateTimeField15);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight0.plus(44179776000117L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = dateMidnight14.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime18.plusWeeks((int) ' ');
        java.lang.String str22 = dateTime18.toString("70");
        org.joda.time.DateTime dateTime24 = dateTime18.minusYears(52);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        int int26 = dateTime24.getYear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "70" + "'", str22, "70");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1918 + "'", int26 == 1918);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.Period period35 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period37 = period35.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plusDays((int) 'a');
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology44);
        long long49 = chronology44.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology44);
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology44);
        mutablePeriod25.add((long) 710, chronology44);
        int int53 = mutablePeriod25.getDays();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod25.setPeriod(101, 21, 1059594, 0, 475, (int) (short) 10, 1200200, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        int int7 = date6.getTimezoneOffset();
        date6.setDate(6);
        java.util.Date date15 = new java.util.Date((int) (byte) 0, (int) (short) 10, 3, 53272, 33);
        int int16 = date6.compareTo(date15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 06 00:20:00 GMT+00:20 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-20) + "'", int7 == (-20));
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Dec 01 16:33:00 GMT+00:20 1906");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundFloorCopy();
        boolean boolean31 = localDate7.equals((java.lang.Object) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withCenturyOfEra((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.plusYears(200);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight30.withWeekOfWeekyear(3);
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withMillisOfSecond(569);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(100);
        org.joda.time.Period period19 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear(11);
        org.joda.time.Duration duration26 = period19.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration26, 710);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.yearOfEra();
        int int37 = localDateTime31.size();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.plusSeconds((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField42 = localDateTime40.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1645454863715L);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        boolean boolean8 = localTime4.isSupported(durationFieldType7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 0);
        int int11 = localTime10.getMinuteOfHour();
        boolean boolean12 = localTime4.equals((java.lang.Object) localTime10);
        org.joda.time.LocalTime localTime14 = localTime4.withMinuteOfHour(0);
        int int15 = localTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology16 = localTime14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(492, 47, 53353, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 492 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, 2);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(100L, dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime39.minuteOfDay();
        org.joda.time.DateTime dateTime43 = property42.roundCeilingCopy();
        org.joda.time.DateTime dateTime45 = dateTime43.minusDays(35);
        org.joda.time.Duration duration46 = mutablePeriod32.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        int int47 = mutablePeriod32.getDays();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMillis((int) (short) 0);
        int int55 = dateTime54.getDayOfYear();
        org.joda.time.Duration duration56 = mutablePeriod32.toDurationTo((org.joda.time.ReadableInstant) dateTime54);
        mutablePeriod32.addYears(39);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str6 = dateTimeFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime2.withField(dateTimeFieldType5, (int) 'u');
        java.lang.String str9 = dateTimeFieldType5.toString();
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        boolean boolean29 = dateTimeFieldType5.isSupported(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "minuteOfDay" + "'", str6, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        java.util.Date date2 = dateTime1.toDate();
        int int3 = date2.getSeconds();
        int int4 = date2.getSeconds();
        java.lang.Object obj5 = date2.clone();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 00:00:00 GMT+00:20 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "Mon Feb 21 00:00:00 GMT+00:20 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "Mon Feb 21 00:00:00 GMT+00:20 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "Mon Feb 21 00:00:00 GMT+00:20 2022");
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.monthOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property5.addToCopy(1195850696040000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1195850696040000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) -1);
        int int10 = period9.getMonths();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str5, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate.Property property4 = localDate3.era();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property6.setCopy("PT0.096S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.096S\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) 14);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        timeZone15.setRawOffset(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1200014L + "'", long14 == 1200014L);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:20");
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime3.getFieldTypes();
        int int11 = localDateTime3.getHourOfDay();
        int int12 = localDateTime3.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withField(dateTimeFieldType19, (int) (short) 10);
        boolean boolean23 = localDateTime3.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property24 = localDateTime3.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = property24.setCopy(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minuteOfDay" + "'", str20, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay10.toDateMidnight(dateTimeZone11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getStandardOffset((long) 5);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        long long26 = dateTimeZone15.getMillisKeepLocal(dateTimeZone23, (long) 100);
        org.joda.time.Interval interval27 = yearMonthDay10.toInterval(dateTimeZone15);
        org.joda.time.LocalDate localDate28 = yearMonthDay10.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        org.joda.time.DateTime dateTime32 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone31);
        int int35 = dateTimeZone31.getOffset((long) 5);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1200000 + "'", int17 == 1200000);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455026288,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=26,MILLISECOND=288,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1200100L + "'", long26 == 1200100L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1200000 + "'", int35 == 1200000);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology18);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType28);
        org.joda.time.MonthDay monthDay30 = monthDay25.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34, periodType35);
        org.joda.time.Chronology chronology38 = null;
        mutablePeriod36.setPeriod(1L, chronology38);
        mutablePeriod36.add(100L);
        int int42 = mutablePeriod36.getYears();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46, periodType47);
        int int49 = dateMidnight46.getYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, readableDuration54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight51.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration58, (org.joda.time.ReadableInstant) dateMidnight61, periodType62);
        int int64 = dateMidnight61.getYear();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight61.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime67 = dateMidnight66.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime67.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str71 = dateTimeFieldType70.getName();
        mutableDateTime69.set(dateTimeFieldType70, 5);
        mutablePeriod36.setPeriod((org.joda.time.ReadableInstant) dateMidnight51, (org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.DateMidnight.Property property75 = dateMidnight51.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int77 = dateMidnight51.get(dateTimeFieldType76);
        boolean boolean78 = monthDay30.isSupported(dateTimeFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property79 = monthDay0.property(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "minuteOfDay" + "'", str71, "minuteOfDay");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime7 = dateTime5.plus((long) (-1));
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        java.util.Date date9 = dateTime5.toDate();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime19.copy();
        mutableDateTime19.setMillis((long) (byte) 10);
        int int24 = mutableDateTime19.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(100L, dateTimeZone26);
        boolean boolean28 = dateTimeZone26.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime5.toDateTime(dateTimeZone26);
        int int32 = dateTimeZone26.getOffsetFromLocal((long) 12);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 2200, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone35);
        int int38 = localDateTime37.getMillisOfSecond();
        int int39 = localDateTime37.getMonthOfYear();
        java.util.Date date40 = localDateTime37.toDate();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.minusMinutes((-1));
        org.joda.time.DateTime dateTime43 = localDateTime42.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.withDayOfYear((int) (byte) 100);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType51 = periodType50.withMillisRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withWeeksRemoved();
        org.joda.time.PeriodType periodType53 = periodType51.withHoursRemoved();
        org.joda.time.PeriodType periodType54 = periodType51.withMonthsRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime33, (org.joda.time.ReadablePartial) localDateTime42, periodType51);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime33.withMillisOfDay(999);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Dec 30 00:20:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1200000 + "'", int32 == 1200000);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        int int13 = localDateTime12.size();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay(475);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(32470000);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths(3);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusDays(24);
        int int24 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        java.lang.Object obj25 = null;
        boolean boolean26 = localDateTime15.equals(obj25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100L, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) (-1));
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded(readableDuration12, 1970);
        int int15 = property3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay yearMonthDay17 = property3.setCopy(59);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(32470000);
        org.joda.time.DateTime.Property property22 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime23 = dateTime19.toDateTime();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField25 = chronology17.minutes();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.DurationField durationField27 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfWeek();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.halfdayOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period42 = period40.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusDays((int) 'a');
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period40, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeField31, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.add((long) (byte) 10, (long) '4');
        java.util.Locale locale10 = java.util.Locale.US;
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        long long13 = dateTimeField6.roundHalfEven((long) (-1));
        long long15 = dateTimeField6.roundHalfFloor((long) 6);
        long long18 = dateTimeField6.addWrapField((long) 120, (-292275054));
        int int21 = dateTimeField6.getDifference((long) 39, (long) 32470000);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1640995200010L + "'", long9 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-9223309849910399880L) + "'", long18 == (-9223309849910399880L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        long long29 = chronology24.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DurationField durationField32 = chronology24.minutes();
        org.joda.time.DurationField durationField33 = chronology24.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(1917, 1200, 342, (-100), 366, 3351, 53295, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455026675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=26,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology13);
        long long15 = interval14.getEndMillis();
        java.lang.String str16 = interval14.toString();
        org.joda.time.MutableInterval mutableInterval17 = interval14.toMutableInterval();
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate9.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateMidnight dateMidnight20 = localDate19.toDateMidnight();
        org.joda.time.LocalDate localDate22 = localDate19.minusDays(31);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate22.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455026790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=26,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str16, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(883);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addToCopy((int) 'u');
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusHours((int) (short) 0);
        int int12 = timeOfDay11.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property13 = timeOfDay11.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str20 = nameProvider14.getName(locale15, "YearWeekDayNoWeeks", "T00:00:00.100");
        int int21 = property13.getMaximumTextLength(locale15);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale locale24 = builder23.build();
        java.util.Locale locale25 = builder23.build();
        int int26 = property13.getMaximumTextLength(locale25);
        int int27 = property5.getMaximumTextLength(locale25);
        int int28 = property5.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(710);
        org.joda.time.DateTime dateTime13 = property7.addWrapFieldToCopy(2022);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays((int) (short) 100);
        int int16 = dateTime15.getDayOfMonth();
        int int17 = dateTime15.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((-44), 32772, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.plusSeconds(999);
        int int17 = dateTime16.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.setTimeInMillis((long) 4);
        java.util.Date date7 = new java.util.Date();
        calendar4.setTime(date7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getStandardOffset((long) 5);
        java.lang.String str16 = dateTimeZone12.getShortName(100L);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str20 = dateTimeZone12.getName((long) (short) 0, locale19);
        java.lang.String str21 = calendar4.getDisplayName(15, 3, locale19);
        java.util.TimeZone timeZone22 = calendar4.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.time.ZoneId zoneId25 = timeZone23.toZoneId();
        calendar4.setTimeZone(timeZone23);
        boolean boolean27 = calendar4.isWeekDateSupported();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455027354,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=52,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=27,MILLISECOND=354,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 14:50:27 GMT+00:20 2022");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1200000 + "'", int14 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:20" + "'", str16, "+00:20");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:20" + "'", str20, "+00:20");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withField(dateTimeFieldType12, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withMillisOfSecond(569);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMillis(100);
        org.joda.time.Period period25 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = dateTime28.toLocalDateTime();
        org.joda.time.DateTime dateTime31 = dateTime28.withMonthOfYear(11);
        org.joda.time.Duration duration32 = period25.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration32, 710);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime1.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis(100);
        org.joda.time.Period period44 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = dateTime47.toLocalDateTime();
        org.joda.time.DateTime dateTime50 = dateTime47.withMonthOfYear(11);
        org.joda.time.Duration duration51 = period44.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableDuration53, (org.joda.time.ReadableInstant) dateMidnight56, periodType57);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType60 = periodType59.withWeeksRemoved();
        java.lang.String str61 = periodType60.getName();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateMidnight56, periodType60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean65 = dateTimeZone64.isFixed();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMillis(100);
        org.joda.time.Period period70 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(100L, dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime74 = dateTime73.toLocalDateTime();
        org.joda.time.DateTime dateTime76 = dateTime73.withMonthOfYear(11);
        org.joda.time.Duration duration77 = period70.toDurationFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime66.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period(readableDuration79, (org.joda.time.ReadableInstant) dateMidnight82, periodType83);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType86 = periodType85.withWeeksRemoved();
        java.lang.String str87 = periodType86.getName();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateMidnight82, periodType86);
        boolean boolean89 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration77);
        int int90 = duration32.compareTo((org.joda.time.ReadableDuration) duration77);
        long long91 = duration77.getMillis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfDay" + "'", str13, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "YearWeekDayNoWeeks" + "'", str61, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "YearWeekDayNoWeeks" + "'", str87, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(600100);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withYear(710);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay2.year();
        org.joda.time.YearMonthDay yearMonthDay6 = property5.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = property5.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        boolean boolean7 = dateTimeField6.isLenient();
        long long10 = dateTimeField6.add((long) 10, (long) 5);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 1970, dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate localDate17 = localDate13.withWeekyear((-1));
        int int18 = localDate17.getWeekyear();
        org.joda.time.LocalDate localDate20 = localDate17.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean22 = localDate17.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.LocalDate localDate24 = localDate17.withFields(readablePartial23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate24, 4, locale26);
        int int30 = dateTimeField6.getMinimumValue();
        org.joda.time.DurationField durationField31 = dateTimeField6.getDurationField();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 157766400010L + "'", long10 == 157766400010L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "4" + "'", str29, "4");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        int int8 = charSet3.size();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1970, dateTimeZone10);
        int int12 = localDate11.getDayOfWeek();
        org.joda.time.LocalDate localDate14 = localDate11.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval15 = localDate11.toInterval();
        boolean boolean16 = interval15.isBeforeNow();
        boolean boolean17 = charSet3.contains((java.lang.Object) interval15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1970, dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1970, dateTimeZone24);
        int int26 = localDate25.getDayOfWeek();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((java.lang.Object) localDate25);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtMidnight();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        int int33 = mutablePeriod32.size();
        org.joda.time.LocalDate localDate35 = localDate25.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 1970, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43, periodType44);
        int int46 = dateMidnight42.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = dateMidnight42.getZone();
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone47);
        org.joda.time.Interval interval50 = localDate38.toInterval(dateTimeZone47);
        boolean boolean52 = interval50.contains((long) 10);
        long long53 = interval50.getEndMillis();
        mutablePeriod32.add((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = interval50.toDuration();
        boolean boolean56 = charSet3.remove((java.lang.Object) interval50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = charSet3.add((java.lang.Character) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 85200000L + "'", long53 == 85200000L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withDayOfMonth(5);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.minusYears(1918);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusMonths(79187880);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = yearMonthDay9.toString("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        int int13 = mutableDateTime9.getYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        int int29 = dateMidnight26.getYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight26.withDayOfMonth((int) (byte) 10);
        boolean boolean32 = dateMidnight17.isBefore((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.monthOfYear();
        int int34 = dateMidnight31.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight31, dateTimeZone35);
        org.joda.time.LocalTime localTime38 = localTime36.withMinuteOfHour((int) ' ');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval42.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Period period45 = interval42.toPeriod();
        int int46 = period45.getMillis();
        boolean boolean47 = localTime36.equals((java.lang.Object) period45);
        org.joda.time.Period period49 = period45.plusWeeks(200);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period45, 31);
        long long52 = mutableDateTime9.getMillis();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        mutableDateTime9.add(durationFieldType53, (-15993));
        org.joda.time.DateTime dateTime56 = mutableDateTime9.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMonthOfYear(2004);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2004 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 776400341L + "'", long52 == 776400341L);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        java.util.Date date1 = new java.util.Date((long) 883);
        int int2 = date1.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, 0);
        java.lang.String str12 = mutablePeriod9.toString();
        mutablePeriod9.setDays(54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1.971S" + "'", str12, "PT1.971S");
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        int int31 = dateTime29.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str39 = dateTimeFieldType38.getName();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withField(dateTimeFieldType38, (int) (short) 10);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime46 = localDateTime35.toDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = dateTime47.withYearOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.withDayOfWeek(7);
        boolean boolean52 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime29.getYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval57.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Duration duration60 = interval57.toDuration();
        org.joda.time.DateTime dateTime62 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration60, 71);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "minuteOfDay" + "'", str39, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1200000 + "'", int45 == 1200000);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 570 + "'", int53 == 570);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property3.addWrapFieldToCopy(32769);
        int int11 = property3.get();
        int int12 = property3.get();
        org.joda.time.YearMonthDay yearMonthDay13 = property3.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone9);
        java.time.Instant instant12 = calendar11.toInstant();
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        org.joda.time.Period period22 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period24 = period22.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plusDays((int) 'a');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfDay();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) calendar11, chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(21, 0, 36, 32, 11, 535, 53, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455027908,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=27,MILLISECOND=908,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.Instant instant27 = instant0.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Instant instant30 = instant27.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearWeekDayNoWeeks" + "'", str25, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        java.io.IOException iOException1 = new java.io.IOException("10");
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromCalendarFields(calendar24);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromCalendarFields(calendar24);
        int int27 = yearMonthDay26.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        mutableDateTime37.add((long) '4');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, dateTimeZone42);
        boolean boolean44 = dateTimeZone42.isFixed();
        mutableDateTime37.setZone(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay26.toDateMidnight(dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51, periodType52);
        org.joda.time.Hours hours54 = period53.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period57 = period53.withFieldAdded(durationFieldType55, 100);
        org.joda.time.Period period66 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period68 = period66.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.plusDays((int) 'a');
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period66, (org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.Chronology chronology75 = interval74.getChronology();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology75);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(chronology75);
        org.joda.time.DurationField durationField78 = durationFieldType55.getField(chronology75);
        org.joda.time.DurationField durationField79 = chronology75.centuries();
        org.joda.time.DateTimeField dateTimeField80 = chronology75.era();
        org.joda.time.DateTimeField dateTimeField81 = chronology75.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial82 = null;
        int[] intArray87 = new int[] { 889, 70, 98, 86399999 };
        int int88 = dateTimeField81.getMaximumValue(readablePartial82, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField19.set((org.joda.time.ReadablePartial) yearMonthDay26, 120, intArray87, 516);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455027962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=27,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[889, 70, 98, 86399999]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 7 + "'", int88 == 7);
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.Period period7 = new org.joda.time.Period(31536000000L, 1640995200010L);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period10 = period7.withWeeks(32769);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property12 = monthDay11.dayOfMonth();
        int int13 = property12.get();
        org.joda.time.MonthDay monthDay14 = property12.getMonthDay();
        org.joda.time.MonthDay monthDay16 = property12.setCopy((int) (short) 10);
        boolean boolean17 = period7.equals((java.lang.Object) property12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days18 = period7.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Days as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Interval interval9 = interval7.withDurationBeforeEnd(readableDuration8);
        long long10 = interval7.getStartMillis();
        org.joda.time.Chronology chronology11 = interval7.getChronology();
        org.joda.time.Interval interval12 = interval3.overlap((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime17.minuteOfDay();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.DateTime dateTime23 = property20.addWrapFieldToCopy(11);
        org.joda.time.DateTime dateTime24 = property20.getDateTime();
        org.joda.time.DateTime dateTime26 = property20.addToCopy(0L);
        org.joda.time.DateTime dateTime28 = property20.setCopy(971);
        boolean boolean29 = interval7.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.multipliedBy(32);
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period13 = period8.minusSeconds(14);
        org.joda.time.Period period15 = period13.minusWeeks(54);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-1Y10M100DT-1H-1M99.999S" + "'", str11, "P-1Y10M100DT-1H-1M99.999S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        int int5 = dateMidnight2.getWeekOfWeekyear();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = property6.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = property6.setCopy("10");
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.joda.time.Period period1 = org.joda.time.Period.hours(86399999);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 0, chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfYear();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        int int10 = date8.getDay();
        int int11 = date8.getMonth();
        java.lang.Object obj12 = date8.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Mon Dec 30 00:00:00 GMT+00:20 569");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Mon Dec 30 00:00:00 GMT+00:20 569");
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addNoWrapToCopy(14);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.hourOfDay();
        int int10 = timeOfDay8.getHourOfDay();
        int int11 = timeOfDay8.getMinuteOfHour();
        int int12 = timeOfDay8.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay8.minusMinutes(2765);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = timeOfDay14.getFieldType(71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 71");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        org.joda.time.Period period8 = period5.plusSeconds(100);
        int int9 = period5.getMillis();
        int int10 = period5.getMinutes();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14, periodType15);
        org.joda.time.Hours hours17 = period16.toStandardHours();
        org.joda.time.Period period19 = period16.multipliedBy((int) (short) 100);
        org.joda.time.Period period21 = period16.plusYears(1);
        org.joda.time.Period period22 = period5.withFields((org.joda.time.ReadablePeriod) period16);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        org.joda.time.Interval interval6 = interval3.withEndMillis((long) 11);
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1970, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15, periodType16);
        int int18 = dateMidnight14.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight14.getZone();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone19);
        org.joda.time.Interval interval22 = localDate10.toInterval(dateTimeZone19);
        boolean boolean24 = interval22.contains((long) 10);
        boolean boolean25 = interval6.overlaps((org.joda.time.ReadableInterval) interval22);
        long long26 = interval6.toDurationMillis();
        long long27 = interval6.getEndMillis();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 12L + "'", long26 == 12L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.time.Instant instant9 = calendar8.toInstant();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields(calendar8);
        org.joda.time.Period period19 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period21 = period19.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusDays((int) 'a');
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfDay();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) calendar8, chronology28);
        calendar8.clear();
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(6, (int) 'u', 8, 26, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property12 = localDate7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDate7.getValue(79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 79");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.minusMonths((int) (byte) 0);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getStandardOffset((long) 5);
        java.lang.String str11 = dateTimeZone7.getShortName(100L);
        org.joda.time.Interval interval12 = yearMonthDay0.toInterval(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone14);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        int int28 = period26.get(durationFieldType27);
        org.joda.time.Period period30 = period26.minusWeeks(9);
        org.joda.time.LocalDate localDate32 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 7);
        boolean boolean33 = dateTimeZone7.equals((java.lang.Object) localDate32);
        java.util.Date date34 = localDate32.toDate();
        date34.setDate(1952);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1200000 + "'", int9 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:20" + "'", str11, "+00:20");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455028538,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=28,MILLISECOND=538,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Sun Apr 05 00:00:00 GMT+00:20 2026");
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfDay();
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay(chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.secondOfMinute();
        org.joda.time.DateTime dateTime45 = dateTime20.withChronology(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(10, (int) '#', 190, 16802641, 53230351, 31, 8, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16802641 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(600100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(21);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property9.setCopy("PeriodType[YearWeekDayNoWeeks]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[YearWeekDayNoWeeks]\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = localDate14.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        boolean boolean30 = localDate18.equals((java.lang.Object) readableDuration28);
        int int31 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate18);
        boolean boolean33 = dateTimeField11.isLeap((long) 24);
        org.joda.time.DurationField durationField34 = dateTimeField11.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        java.lang.String str4 = yearMonthDay0.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime9 = yearMonthDay0.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) '4');
        int int12 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTime dateTime14 = dateTime9.minusHours(12960);
        boolean boolean16 = dateTime9.isEqual((long) 69);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21" + "'", str4, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getDayOfMonth();
        int int6 = localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.hourOfDay();
        int int8 = localDateTime3.getYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        int int30 = dateMidnight27.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight27, dateTimeZone31);
        org.joda.time.LocalTime localTime34 = localTime32.withMinuteOfHour((int) ' ');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology37);
        int int39 = mutablePeriod38.getDays();
        org.joda.time.LocalTime localTime40 = localTime32.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = property9.compareTo((org.joda.time.ReadablePartial) localTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(8380800000L, chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property3.addCopy((long) 12960);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime16.copy();
        mutableDateTime16.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime24 = localTime22.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        boolean boolean26 = localTime22.isSupported(durationFieldType25);
        mutableDateTime16.add(durationFieldType25, (-1));
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        mutableDateTime16.setZoneRetainFields(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod47.setMinutes(11);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadablePeriod) mutablePeriod47);
        int int51 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateMidnight40);
        int int53 = dateTimeZone30.getOffsetFromLocal(1645454800697L);
        org.joda.time.DateTime dateTime54 = localTime6.toDateTimeToday(dateTimeZone30);
        java.lang.String str56 = dateTimeZone30.getNameKey(1200052L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1200000 + "'", int51 == 1200000);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1200000 + "'", int53 == 1200000);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.joda.time.Period period4 = new org.joda.time.Period(569, (int) 'u', (-1), 9);
        org.joda.time.Period period6 = period4.minusSeconds(292278993);
        org.joda.time.Period period8 = period6.plusHours((-459));
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period25 = period23.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusDays((int) 'a');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period23, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology32);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology32);
        int int37 = property14.getDifference((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withCenturyOfEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-15993) + "'", int37 == (-15993));
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.monthOfYear();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        int int28 = property26.getMaximumShortTextLength(locale27);
        java.lang.String str29 = locale5.getDisplayLanguage(locale27);
        boolean boolean30 = locale27.hasExtensions();
        java.util.Locale locale31 = locale27.stripExtensions();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime33 = yearMonthDay32.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay32.year();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = property35.getAsText(locale36);
        org.joda.time.YearMonthDay yearMonthDay39 = property35.setCopy(2);
        org.joda.time.DateTimeField dateTimeField40 = property35.getField();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45, periodType46);
        int int48 = dateMidnight45.getYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight45.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54, periodType55);
        int int57 = dateMidnight54.getYear();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.withDayOfMonth((int) (byte) 10);
        boolean boolean60 = dateMidnight45.isBefore((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight59.monthOfYear();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        int int63 = property61.getMaximumShortTextLength(locale62);
        java.lang.String str64 = property61.getAsString();
        java.lang.String str65 = property61.getAsText();
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72, periodType73);
        int int75 = dateMidnight72.getYear();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight72.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1L, dateTimeZone80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period(readableDuration78, (org.joda.time.ReadableInstant) dateMidnight81, periodType82);
        int int84 = dateMidnight81.getYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight81.withDayOfMonth((int) (byte) 10);
        boolean boolean87 = dateMidnight72.isBefore((org.joda.time.ReadableInstant) dateMidnight86);
        org.joda.time.DateMidnight.Property property88 = dateMidnight86.monthOfYear();
        java.util.Locale locale89 = java.util.Locale.JAPAN;
        int int90 = property88.getMaximumShortTextLength(locale89);
        java.lang.String str91 = locale67.getDisplayLanguage(locale89);
        java.util.Locale.setDefault(locale67);
        int int93 = property61.getMaximumTextLength(locale67);
        java.lang.String str94 = dateTimeField40.getAsText((long) 32769, locale67);
        java.lang.String str95 = locale31.getDisplayLanguage(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = dateTimeFormatter2.withLocale(locale67);
        org.joda.time.DateTimeZone dateTimeZone97 = dateTimeFormatter96.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter99 = dateTimeFormatter96.withPivotYear((java.lang.Integer) 53422143);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (France)" + "'", str6, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str29, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6708" + "'", str65, "\u6708");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fran\347ais (France)" + "'", str68, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str91, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970" + "'", str94, "1970");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "japonais" + "'", str95, "japonais");
        org.junit.Assert.assertNotNull(dateTimeFormatter96);
        org.junit.Assert.assertNull(dateTimeZone97);
        org.junit.Assert.assertNotNull(dateTimeFormatter99);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        java.util.Date date5 = new java.util.Date((int) (byte) 0, 20, 0, 1200120, 16);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.DateTime dateTime15 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = property13.setCopy(710);
        org.joda.time.DateTime dateTime19 = property13.addWrapFieldToCopy(2022);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        mutablePeriod30.addSeconds(5);
        mutablePeriod30.setPeriod((long) 70);
        org.joda.time.DateTime dateTime36 = dateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod30, 21);
        java.util.Date date37 = dateTime36.toDate();
        long long38 = date37.getTime();
        int int39 = date5.compareTo(date37);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jul 28 00:16:00 GMT+00:20 2038");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "20" + "'", str14, "20");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Dec 30 09:42:01 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-44179654678430L) + "'", long38 == (-44179654678430L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        int int8 = localTime7.getMinuteOfHour();
        boolean boolean9 = localTime1.equals((java.lang.Object) localTime7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean11 = localTime1.isSupported(dateTimeFieldType10);
        org.joda.time.LocalTime localTime13 = localTime1.minusMillis(2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        int int8 = charSet3.size();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1970, dateTimeZone10);
        int int12 = localDate11.getDayOfWeek();
        org.joda.time.LocalDate localDate14 = localDate11.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval15 = localDate11.toInterval();
        boolean boolean16 = interval15.isBeforeNow();
        boolean boolean17 = charSet3.contains((java.lang.Object) interval15);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1970, dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = localDate20.withWeekyear((-1));
        int int25 = localDate24.getWeekyear();
        org.joda.time.LocalDate localDate27 = localDate24.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean29 = localDate24.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.LocalDate localDate31 = localDate24.withFields(readablePartial30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, dateTimeZone43);
        boolean boolean45 = dateTimeZone43.isFixed();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone43);
        mutableDateTime41.setZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = localDate24.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.Interval interval49 = localDate24.toInterval();
        org.joda.time.LocalDate.Property property50 = localDate24.centuryOfEra();
        org.joda.time.LocalDate.Property property51 = localDate24.dayOfYear();
        boolean boolean52 = charSet3.contains((java.lang.Object) property51);
        java.util.Spliterator<java.lang.Character> charSpliterator53 = charSet3.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSpliterator53);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.Period period9 = org.joda.time.Period.hours((int) ' ');
        org.joda.time.Period period11 = period9.minusYears((int) ' ');
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (short) 0, periodType13, chronology14);
        org.joda.time.Period period16 = period9.withPeriodType(periodType13);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (byte) 0);
        org.joda.time.Period period21 = period19.minusSeconds(100);
        org.joda.time.Period period22 = period16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime26 = localTime24.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        boolean boolean28 = localTime24.isSupported(durationFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean30 = localTime24.isSupported(durationFieldType29);
        int int31 = period21.indexOf(durationFieldType29);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay7.plus((org.joda.time.ReadablePeriod) period21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = timeOfDay32.getField(99);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 99");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime32 = dateTime4.withSecondOfMinute(47);
        org.joda.time.DateTime.Property property33 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime4.minusSeconds(53230351);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime35.withDayOfMonth(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        int int12 = property4.compareTo((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime localTime13 = property4.getLocalTime();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(52);
        org.joda.time.Period period20 = new org.joda.time.Period(569, (int) 'u', (-1), 9);
        int int21 = period20.getMonths();
        org.joda.time.LocalTime localTime22 = localTime13.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period24 = period20.minusYears(49);
        org.joda.time.Period period26 = period24.minusMonths(48);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.minusWeeks(6);
        java.util.Date date10 = dateTime9.toDate();
        org.joda.time.DateTime.Property property11 = dateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime12.withTime((int) (short) 1, 32, 0, (int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        long long24 = dateMidnight23.getMillis();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusYears(6);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateMidnight26, periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = period31.withFieldAdded(durationFieldType32, 366);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Nov 18 00:00:00 GMT+00:20 569");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 8379600000L + "'", long24 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period16 = period14.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) 'a');
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 11, periodType5, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((-1), 32770, 69, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod15.setMinutes(11);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 1970, dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.withWeekyear((-1));
        org.joda.time.LocalDate.Property property26 = localDate21.dayOfWeek();
        java.lang.Character[] charArray29 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet30 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet30, charArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, dateTimeZone33);
        boolean boolean35 = dateTimeZone33.isFixed();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        boolean boolean37 = charSet30.contains((java.lang.Object) dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight39 = localDate21.toDateMidnight(dateTimeZone33);
        boolean boolean40 = interval18.isAfter((org.joda.time.ReadableInstant) dateMidnight39);
        boolean boolean41 = interval18.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(2200);
        java.lang.String str9 = property6.getAsShortText();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundHalfCeilingCopy();
        int int11 = localDateTime10.getMillisOfSecond();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFields(readablePartial12);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime9.add(readablePeriod13, 570);
        mutableDateTime9.setSecondOfMinute(10);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology35);
        long long40 = chronology35.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.now(chronology35);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime9.toMutableDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(100L, dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(5);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = mutableDateTime9.toDateTime();
        org.joda.time.Period period60 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period62 = period60.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plusDays((int) 'a');
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period60, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now(chronology69);
        long long74 = chronology69.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight75 = org.joda.time.DateMidnight.now(chronology69);
        org.joda.time.DateMidnight dateMidnight76 = org.joda.time.DateMidnight.now(chronology69);
        org.joda.time.DurationField durationField77 = chronology69.minutes();
        long long81 = chronology69.add((long) 710, (long) (byte) 10, 366);
        mutableDateTime9.setChronology(chronology69);
        int int83 = mutableDateTime9.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 4370L + "'", long81 == 4370L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 19 + "'", int83 == 19);
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(39, 202, 19044, 1917, 23, 2134, 982);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1917 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property9.setCopy("1970-01-01T00:00:00.000+00:20");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.000+00:20\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:01 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfDay();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.era();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DurationField durationField23 = chronology17.millis();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setSecondOfDay((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withWeekOfWeekyear(13);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(53);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime22.minusHours(243571);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone7);
        calendar9.setTimeInMillis((long) 4);
        int int12 = calendar9.getWeeksInWeekYear();
        int int13 = calendar4.compareTo(calendar9);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455029676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=52,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=29,MILLISECOND=728,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=4,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        org.joda.time.LocalDate localDate16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 1970, dateTimeZone18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = localDate19.plusYears(1970);
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfEra();
        java.lang.String str26 = property25.getAsShortText();
        org.joda.time.LocalDate localDate27 = property25.roundFloorCopy();
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDate localDate29 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(120);
        org.joda.time.LocalDate localDate33 = localDate31.withWeekOfWeekyear(23);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.time.ZoneId zoneId36 = timeZone34.toZoneId();
        java.time.ZoneId zoneId37 = timeZone34.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long40 = dateTimeZone38.convertUTCToLocal((long) 32770);
        long long43 = dateTimeZone38.adjustOffset((-44179689599900L), false);
        org.joda.time.DateTime dateTime44 = localDate33.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Interval interval45 = localDate16.toInterval(dateTimeZone38);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology48);
        long long50 = interval49.getEndMillis();
        java.lang.String str51 = interval49.toString();
        org.joda.time.MutableInterval mutableInterval52 = interval49.toMutableInterval();
        org.joda.time.Period period53 = interval49.toPeriod();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType55 = periodType54.withWeeksRemoved();
        org.joda.time.Period period56 = interval49.toPeriod(periodType54);
        org.joda.time.Duration duration57 = period56.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 1970, dateTimeZone59);
        int int61 = localDate60.getDayOfWeek();
        org.joda.time.LocalDate localDate63 = localDate60.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval64 = localDate60.toInterval();
        boolean boolean65 = interval64.isBeforeNow();
        org.joda.time.Duration duration66 = interval64.toDuration();
        boolean boolean67 = duration57.isEqual((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Interval interval68 = interval45.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight73.plusYears(0);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1L, dateTimeZone80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period(readableDuration78, (org.joda.time.ReadableInstant) dateMidnight81, periodType82);
        int int84 = dateMidnight81.getYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight81.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime87 = dateMidnight86.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime87.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime89 = mutableDateTime87.copy();
        int int90 = mutableDateTime87.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime87.weekyear();
        org.joda.time.Period period93 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray94 = period93.getFieldTypes();
        mutableDateTime87.add((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = dateMidnight77.isBefore((org.joda.time.ReadableInstant) mutableDateTime87);
        mutableDateTime87.addMonths(9);
        boolean boolean99 = interval45.contains((org.joda.time.ReadableInstant) mutableDateTime87);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3940" + "'", str26, "3940");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1232770L + "'", long40 == 1232770L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-44179689599900L) + "'", long43 == (-44179689599900L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str51, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(durationFieldTypeArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes((int) (short) 10);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        java.lang.String str9 = property8.getAsText();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime14 = localDateTime3.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTimeZone11.isStandardOffset((long) 70);
        int int18 = dateTimeZone11.getStandardOffset((long) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1200000 + "'", int13 == 1200000);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1200000 + "'", int18 == 1200000);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, readableDuration9);
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfMonth();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (byte) 0);
        org.joda.time.Period period16 = period14.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod17 = period14.toMutablePeriod();
        mutablePeriod17.setPeriod((long) 100);
        org.joda.time.DateTime dateTime21 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, 8);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekOfWeekyear(30);
        int int24 = dateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = dateMidnight15.toDateTime(dateTimeZone17);
        long long23 = dateTimeZone17.convertLocalToUTC(1645454801986L, false, 10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(31536000000L, dateTimeZone17);
        boolean boolean26 = dateMidnight24.isAfter((-9223309849910399880L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645453601986L + "'", long23 == 1645453601986L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        int int7 = yearMonthDay6.getDayOfMonth();
        org.joda.time.Interval interval8 = yearMonthDay6.toInterval();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455030112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=30,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology13);
        long long15 = interval14.getEndMillis();
        java.lang.String str16 = interval14.toString();
        org.joda.time.MutableInterval mutableInterval17 = interval14.toMutableInterval();
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.LocalDate localDate19 = localDate9.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDate localDate21 = localDate9.minusWeeks(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate9.withWeekOfWeekyear(520);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 520 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455030124,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=30,MILLISECOND=124,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str16, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.Period period11 = period9.minusSeconds(100);
        org.joda.time.DateTime dateTime13 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 20);
        org.joda.time.DateTime dateTime15 = dateTime4.withMillisOfSecond((int) '4');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) -1, (long) (byte) 0, chronology29);
        int int31 = mutablePeriod30.getDays();
        org.joda.time.Period period32 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime4.plus((org.joda.time.ReadablePeriod) period26);
        int int34 = period26.getMonths();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        int int2 = property1.get();
        org.joda.time.MonthDay monthDay3 = property1.getMonthDay();
        java.lang.String str4 = property1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay6 = property1.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfMonth]" + "'", str4, "Property[dayOfMonth]");
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime16.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter4.withZone(dateTimeZone18);
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime31 = dateTime28.toLocalTime();
        org.joda.time.DateTime dateTime33 = dateTime28.plusMillis(52);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(stringBuffer25, (org.joda.time.ReadableInstant) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        int int2 = monthDay0.size();
        int int3 = monthDay0.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = monthDay0.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology7);
        long long9 = interval8.getEndMillis();
        java.lang.String str10 = interval8.toString();
        org.joda.time.MutableInterval mutableInterval11 = interval8.toMutableInterval();
        org.joda.time.Period period12 = interval8.toPeriod();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.Period period15 = interval8.toPeriod(periodType13);
        org.joda.time.MonthDay monthDay16 = monthDay0.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.DateTime dateTime25 = dateTime19.withField(dateTimeFieldType22, (int) 'u');
        java.lang.String str26 = dateTimeFieldType22.toString();
        org.joda.time.Period period35 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period37 = period35.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plusDays((int) 'a');
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology44);
        boolean boolean46 = dateTimeFieldType22.isSupported(chronology44);
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.MonthDay monthDay48 = monthDay0.withChronologyRetainFields(chronology44);
        java.lang.String str49 = monthDay0.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str10, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minuteOfDay" + "'", str23, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfDay" + "'", str26, "minuteOfDay");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "--02-21" + "'", str49, "--02-21");
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        int int7 = property5.get();
        int int8 = property5.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 570, chronology18);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = dateMidnight26.toCalendar(locale27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusDays(999);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plusDays((int) 'a');
        int int36 = dateMidnight33.getWeekOfWeekyear();
        boolean boolean37 = dateMidnight26.isAfter((org.joda.time.ReadableInstant) dateMidnight33);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-1200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = yearMonthDay1.getFieldTypes();
        int int4 = yearMonthDay1.getMonthOfYear();
        java.lang.String str5 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusDays((int) '4');
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.dayOfMonth();
        org.joda.time.Interval interval9 = yearMonthDay7.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period(readablePartial0, (org.joda.time.ReadablePartial) yearMonthDay7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21" + "'", str5, "2022-02-21");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear(55);
        boolean boolean10 = dateTimeFormatter4.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTimeFormatter4.print(21368501223736L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("minuteOfDay", (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(31);
        org.joda.time.LocalTime localTime9 = localTime5.plusSeconds((int) '4');
        org.joda.time.LocalTime.Property property10 = localTime5.minuteOfHour();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455030690,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=30,MILLISECOND=690,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 47);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(14);
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("2022-02-21T14:49:07.607Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusYears(6);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMillis((long) 569);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getMonthOfYear();
        java.util.Date date20 = localDateTime17.toDate();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24, periodType25);
        int int27 = dateMidnight24.getYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        boolean boolean39 = dateMidnight24.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateTime dateTime40 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime.Property property41 = dateTime40.weekyear();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45, periodType46);
        int int48 = dateMidnight45.getYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight45.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight50.toMutableDateTime();
        mutableDateTime51.setMillis((long) (byte) 0);
        int int54 = mutableDateTime51.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusMillis(100);
        org.joda.time.Period period62 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(100L, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = dateTime65.toLocalDateTime();
        org.joda.time.DateTime dateTime68 = dateTime65.withMonthOfYear(11);
        org.joda.time.Duration duration69 = period62.toDurationFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime58.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Period period71 = duration69.toPeriod();
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration69, 32769);
        java.lang.String str74 = duration69.toString();
        org.joda.time.DateTime dateTime75 = dateTime40.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight13.withDurationAdded((org.joda.time.ReadableDuration) duration69, 0);
        org.junit.Assert.assertNotNull(dateMidnight4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8379600000L + "'", long5 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 70 + "'", int54 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0S" + "'", str74, "PT0S");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property7.addWrapFieldToCopy(50);
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        java.lang.String str14 = property7.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfDay" + "'", str14, "minuteOfDay");
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.joda.time.Period period1 = org.joda.time.Period.days(40);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (byte) 0);
        org.joda.time.Period period10 = period8.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod11 = period8.toMutablePeriod();
        org.joda.time.Period period22 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period24 = period22.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plusDays((int) 'a');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        mutablePeriod11.setPeriod(0L, (long) 0, chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.era();
        java.lang.String str35 = chronology31.toString();
        org.joda.time.DurationField durationField36 = chronology31.millis();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(1200000, 342, 53312770, 16802641, 53312770, 1987, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16802641 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+00:20]" + "'", str35, "ISOChronology[+00:20]");
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (byte) 1);
        int int8 = localTime7.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime7.toString("1971-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455030943,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=30,MILLISECOND=943,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.joda.time.Period period1 = org.joda.time.Period.days(1970);
        org.joda.time.Period period3 = period1.minusYears(23);
        org.joda.time.Seconds seconds4 = period1.toStandardSeconds();
        org.joda.time.Period period6 = period1.minusWeeks(889);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plus((long) (-27424246));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        int int14 = mutableDateTime9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        boolean boolean18 = dateTimeZone16.isFixed();
        mutableDateTime9.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime9.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(8379600000L, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime9.toDateTime(dateTimeZone25);
        boolean boolean29 = dateTimeZone25.isStandardOffset((long) 98);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        boolean boolean15 = charSet11.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13);
        boolean boolean16 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        boolean boolean24 = charSet20.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap25);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay27.year();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = property30.getAsText(locale31);
        org.joda.time.DateTimeField dateTimeField33 = property30.getField();
        long long36 = dateTimeField33.add((long) (byte) 10, (long) '4');
        java.util.Locale locale37 = java.util.Locale.US;
        int int38 = dateTimeField33.getMaximumTextLength(locale37);
        java.lang.String str39 = locale37.getDisplayVariant();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder45 = builder41.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder49 = builder41.setTimeOfDay(2200, (int) (byte) 10, 1);
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("janvier");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder53 = builder49.setLocale(locale51);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime56 = yearMonthDay55.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate57 = dateTime56.toLocalDate();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTime dateTime60 = dateTime56.toDateTime(dateTimeZone59);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period(readableDuration65, (org.joda.time.ReadableInstant) dateMidnight68, periodType69);
        int int71 = dateMidnight68.getYear();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight68.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(1L, dateTimeZone76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77, periodType78);
        int int80 = dateMidnight77.getYear();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight77.withDayOfMonth((int) (byte) 10);
        boolean boolean83 = dateMidnight68.isBefore((org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.DateMidnight.Property property84 = dateMidnight82.monthOfYear();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        int int86 = property84.getMaximumShortTextLength(locale85);
        java.lang.String str87 = locale63.getDisplayLanguage(locale85);
        java.util.Locale.setDefault(locale63);
        java.lang.String str89 = dateTimeZone59.getName((-5270399989L), locale63);
        java.util.Locale[] localeArray90 = new java.util.Locale[] { locale37, locale51, locale54, locale63 };
        java.util.ArrayList<java.util.Locale> localeList91 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList91, localeArray90);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList91, filteringMode94);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fran\347ais (France)" + "'", str10, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (France)" + "'", str19, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1640995200010L + "'", long36 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "janvier");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fran\347ais (France)" + "'", str64, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str87, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:20" + "'", str89, "+00:20");
        org.junit.Assert.assertNotNull(localeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode94.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        java.util.Date date5 = new java.util.Date(2170, 21, 49, 600100, 887);
        date5.setYear(30);
        date5.setHours((-100));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone11);
        int int14 = localDateTime13.getMillisOfSecond();
        int int15 = localDateTime13.getMonthOfYear();
        java.util.Date date16 = localDateTime13.toDate();
        int int17 = date16.getTimezoneOffset();
        java.lang.String str18 = date16.toLocaleString();
        int int19 = date5.compareTo(date16);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Apr 29 20:47:00 GMT+00:20 1930");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-20) + "'", int17 == (-20));
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1 janv. 1970 00:20:00" + "'", str18, "1 janv. 1970 00:20:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        int int6 = localDateTime5.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMonthOfYear(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1200200 + "'", int6 == 1200200);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod15.setMinutes(11);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime19 = interval18.getStart();
        org.joda.time.Period period28 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period30 = period28.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.plusDays((int) 'a');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period28, (org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Interval interval37 = interval18.withPeriodAfterStart((org.joda.time.ReadablePeriod) period28);
        long long38 = interval18.toDurationMillis();
        org.joda.time.DateTime dateTime39 = interval18.getEnd();
        org.joda.time.Interval interval41 = interval18.withStartMillis((-187140000L));
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusDays((int) 'a');
        int int47 = dateMidnight44.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight44.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfCentury();
        org.joda.time.Period period59 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period61 = period59.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plusDays((int) 'a');
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now(chronology68);
        long long73 = chronology68.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.now(chronology68);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology77);
        int[] intArray81 = chronology68.get((org.joda.time.ReadablePeriod) mutablePeriod78, (-5270399989L), 63808128000020L);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight49, chronology68);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.plusYears(11);
        boolean boolean85 = interval41.isBefore((org.joda.time.ReadableInstant) dateMidnight82);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 659899L + "'", long38 == 659899L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2022, 2, 0, 0, 0, 0, 0, 9]");
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.Calendar.Builder builder10 = builder6.setDate(2022, 0, 33198);
        java.util.Calendar.Builder builder13 = builder10.set(9, 0);
        java.util.Calendar.Builder builder17 = builder10.setTimeOfDay(30, (int) (short) 100, 33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder10.setInstant((long) (-28860975));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = property5.addToCopy((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay9 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMinimumValue();
        int int11 = property5.get();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        int int7 = yearMonthDay6.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears(35);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withYear(20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonthDay9.getFieldTypes();
        int int15 = yearMonthDay9.getYear();
        int[] intArray16 = yearMonthDay9.getValues();
        org.joda.time.Period period25 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period27 = period25.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusDays((int) 'a');
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(chronology34);
        long long39 = chronology34.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.DurationField durationField42 = chronology34.minutes();
        org.joda.time.DurationField durationField43 = chronology34.months();
        org.joda.time.DurationField durationField44 = chronology34.centuries();
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay9.withChronologyRetainFields(chronology34);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455031592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=31,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1987 + "'", int15 == 1987);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1987, 2, 21]");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        date6.setMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromDateFields(date6);
        java.lang.String str10 = date6.toLocaleString();
        java.lang.String str11 = date6.toGMTString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:52:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1 janv. 1970 00:52:00" + "'", str10, "1 janv. 1970 00:52:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1 Jan 1970 00:32:00 GMT" + "'", str11, "1 Jan 1970 00:32:00 GMT");
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withYearOfEra(457070);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        boolean boolean6 = dateTimeFormatter4.isParser();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        boolean boolean20 = dateTimeZone18.isFixed();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime16.setZoneRetainFields(dateTimeZone18);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.now(dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter4.withZone(dateTimeZone18);
        boolean boolean25 = dateTimeFormatter24.isOffsetParsed();
        java.io.Writer writer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(writer26, 1645454899552L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter3.getParser();
        boolean boolean7 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withDefaultYear(32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant10 = org.joda.time.Instant.parse("millisOfSecond", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusDays(49);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime21 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property19.setCopy(710);
        org.joda.time.DateTime dateTime24 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime25 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField26 = property19.getField();
        org.joda.time.DateTime dateTime27 = property19.getDateTime();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime31 = localTime29.minusSeconds((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime41.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        mutableDateTime43.set(dateTimeFieldType44, 5);
        org.joda.time.LocalTime.Property property48 = localTime31.property(dateTimeFieldType44);
        org.joda.time.DateTime.Property property49 = dateTime27.property(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay9.withField(dateTimeFieldType44, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455031783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=31,MILLISECOND=783,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "20" + "'", str20, "20");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minuteOfDay" + "'", str45, "minuteOfDay");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays(0);
        int int8 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (short) 0);
        int int5 = dateMidnight4.getYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight4, dateTimeZone7);
        int int11 = localDateTime10.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        int int10 = dateTime9.getWeekyear();
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 570 + "'", int10 == 570);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int7 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getStandardOffset((long) 5);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone18, (long) 100);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.now(dateTimeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter8.withZone(dateTimeZone10);
        int int24 = dateTimeFormatter23.getDefaultYear();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1200000 + "'", int12 == 1200000);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455031869,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=31,MILLISECOND=869,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1200100L + "'", long21 == 1200100L);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        boolean boolean19 = localDate9.isSupported(dateTimeFieldType17);
        int int20 = localDate9.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455031891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=31,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.monthOfYear();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        int int28 = property26.getMaximumShortTextLength(locale27);
        java.lang.String str29 = locale5.getDisplayLanguage(locale27);
        boolean boolean30 = locale27.hasExtensions();
        java.util.Locale locale31 = locale27.stripExtensions();
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime33 = yearMonthDay32.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay32.year();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = property35.getAsText(locale36);
        org.joda.time.YearMonthDay yearMonthDay39 = property35.setCopy(2);
        org.joda.time.DateTimeField dateTimeField40 = property35.getField();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45, periodType46);
        int int48 = dateMidnight45.getYear();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight45.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54, periodType55);
        int int57 = dateMidnight54.getYear();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.withDayOfMonth((int) (byte) 10);
        boolean boolean60 = dateMidnight45.isBefore((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight59.monthOfYear();
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        int int63 = property61.getMaximumShortTextLength(locale62);
        java.lang.String str64 = property61.getAsString();
        java.lang.String str65 = property61.getAsText();
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72, periodType73);
        int int75 = dateMidnight72.getYear();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight72.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1L, dateTimeZone80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period(readableDuration78, (org.joda.time.ReadableInstant) dateMidnight81, periodType82);
        int int84 = dateMidnight81.getYear();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight81.withDayOfMonth((int) (byte) 10);
        boolean boolean87 = dateMidnight72.isBefore((org.joda.time.ReadableInstant) dateMidnight86);
        org.joda.time.DateMidnight.Property property88 = dateMidnight86.monthOfYear();
        java.util.Locale locale89 = java.util.Locale.JAPAN;
        int int90 = property88.getMaximumShortTextLength(locale89);
        java.lang.String str91 = locale67.getDisplayLanguage(locale89);
        java.util.Locale.setDefault(locale67);
        int int93 = property61.getMaximumTextLength(locale67);
        java.lang.String str94 = dateTimeField40.getAsText((long) 32769, locale67);
        java.lang.String str95 = locale31.getDisplayLanguage(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = dateTimeFormatter2.withLocale(locale67);
        int int97 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean99 = dateTimeFormatter98.isOffsetParsed();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (France)" + "'", str6, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str29, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "janvier" + "'", str65, "janvier");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fran\347ais (France)" + "'", str68, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str91, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970" + "'", str94, "1970");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "japonais" + "'", str95, "japonais");
        org.junit.Assert.assertNotNull(dateTimeFormatter96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2000 + "'", int97 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = period15.getFieldTypes();
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime9.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDateTime(101, (int) (short) 100, (int) 'a', 10, 475, 190, 32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 475 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property44 = dateMidnight20.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight46 = property44.setCopy(48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight48 = property44.setCopy("DateTimeField[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[yearOfEra]\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        mutableDateTime9.addSeconds(710);
        mutableDateTime9.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime9.year();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, periodType23, chronology24);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod25, 2022);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.copy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(mutablePeriod28);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withEra(1739);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1739 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long13 = dateTimeZone11.convertUTCToLocal((long) 32770);
        long long16 = dateTimeZone11.adjustOffset((-44179689599900L), false);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusHours((int) (short) 0);
        int int21 = timeOfDay20.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean23 = timeOfDay20.isSupported(dateTimeFieldType22);
        boolean boolean24 = dateTimeZone11.equals((java.lang.Object) dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(0, 511340, 243565, (int) (byte) -1, 971, 457070, 342, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1232770L + "'", long13 == 1232770L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-44179689599900L) + "'", long16 == (-44179689599900L));
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear(55);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.setMillis((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = dateTimeFormatter9.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime19, "fr_FR", 1739);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        long long18 = dateTimeZone16.nextTransition(379987200000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight21 = localDate12.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(6);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = localDate12.withField(dateTimeFieldType31, 511340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511340 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 379987200000L + "'", long18 == 379987200000L);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.joda.time.Period period1 = org.joda.time.Period.days(16802641);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap8);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream10 = languageRangeList5.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap11);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream13 = languageRangeList5.parallelStream();
        org.joda.time.tz.Provider provider14 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider14);
        org.joda.time.DateTimeZone dateTimeZone17 = provider14.getZone("anglais");
        org.joda.time.DateTimeZone.setProvider(provider14);
        org.joda.time.DateTimeZone.setProvider(provider14);
        java.util.Set<java.lang.String> strSet20 = provider14.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet20, filteringMode21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeStream10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeStream13);
        org.junit.Assert.assertNotNull(provider14);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusDays(600100);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.withYear(710);
        org.joda.time.YearMonthDay.Property property5 = yearMonthDay2.year();
        java.lang.String str6 = property5.getAsText();
        int int7 = property5.get();
        org.joda.time.YearMonthDay yearMonthDay9 = property5.setCopy(243565);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = property5.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3665" + "'", str6, "3665");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3665 + "'", int7 == 3665);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMaximumValue();
        int int13 = localDateTime12.getYear();
        int int14 = localDateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (byte) 1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(9, (int) (byte) 1, 10);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds(0);
        boolean boolean8 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.minusHours(202);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay1.hourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate2.minusWeeks((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDate5.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(971);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("DateTimeField[yearOfEra]");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(355536000000L, 1645454823680L);
        long long3 = interval2.toDurationMillis();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1289918823680L + "'", long3 == 1289918823680L);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime5 = dateTime2.withMonthOfYear(11);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(32);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1645454801986L);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.property(dateTimeFieldType10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateMidnight9, periodType12);
        int int14 = dateTime7.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 306 + "'", int14 == 306);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) localTime22, 10L);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.DateTime dateTime26 = localTime22.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withSecondOfMinute((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27661000L + "'", long24 == 27661000L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getStandardOffset((long) 5);
        java.lang.String str8 = dateTimeZone4.getShortName(100L);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str12 = dateTimeZone4.getName((long) (short) 0, locale11);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(53, 982, (int) (byte) 10, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 982 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1200000 + "'", int6 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:20" + "'", str8, "+00:20");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:20" + "'", str12, "+00:20");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.Period period11 = period9.minusSeconds(100);
        org.joda.time.DateTime dateTime13 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 20);
        org.joda.time.DateTime dateTime15 = dateTime4.withMillisOfSecond((int) '4');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) -1, (long) (byte) 0, chronology29);
        int int31 = mutablePeriod30.getDays();
        org.joda.time.Period period32 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime4.plus((org.joda.time.ReadablePeriod) period26);
        boolean boolean34 = dateTime4.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("10");
        org.joda.time.Instant instant3 = instant1.plus((long) 1951);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7, periodType8);
        int int10 = dateMidnight7.getYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime13.copy();
        mutableDateTime13.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.millis();
        boolean boolean23 = localTime19.isSupported(durationFieldType22);
        mutableDateTime13.add(durationFieldType22, (-1));
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        mutableDateTime13.setZoneRetainFields(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone27);
        java.lang.String str31 = dateTimeZone27.getName(1640995200000L);
        java.lang.String str32 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime34 = instant3.toDateTime(dateTimeZone27);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:20" + "'", str31, "+00:20");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:20" + "'", str32, "+00:20");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(710);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval21.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Period period24 = interval21.toPeriod();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        org.joda.time.Hours hours31 = period30.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period34 = period30.withFieldAdded(durationFieldType32, 100);
        org.joda.time.Period period36 = period24.withFieldAdded(durationFieldType32, (int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime13.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        org.joda.time.Period period50 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period52 = period50.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plusDays((int) 'a');
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period50, (org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(chronology59);
        long long64 = chronology59.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField65 = chronology59.dayOfWeek();
        boolean boolean66 = durationFieldType41.isSupported(chronology59);
        org.joda.time.Interval interval67 = new org.joda.time.Interval(4L, (long) 32470000, chronology59);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime37, chronology59);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology59);
        boolean boolean70 = dateTime11.equals((java.lang.Object) dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        java.util.Locale locale13 = null;
        org.joda.time.LocalDate localDate14 = property8.setCopy("1969", locale13);
        org.joda.time.DurationField durationField15 = property8.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) durationField15);
        mutableDateTime16.setDayOfYear(342);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1970, dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = localDate17.withWeekyear((-1));
        int int22 = localDate21.getWeekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean26 = localDate21.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate localDate27 = localDate7.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime37.copy();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        int int46 = dateMidnight43.getYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.DateTime dateTime52 = mutableDateTime49.toDateTime(dateTimeZone50);
        long long54 = dateTimeZone50.convertUTCToLocal((long) 14);
        mutableDateTime39.setZoneRetainFields(dateTimeZone50);
        org.joda.time.Interval interval56 = localDate27.toInterval(dateTimeZone50);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval60.withDurationBeforeEnd(readableDuration61);
        org.joda.time.Period period63 = interval60.toPeriod();
        int int64 = period63.getMillis();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime66 = yearMonthDay65.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime67 = yearMonthDay65.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay65.year();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(100L, dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime75 = dateTime73.plus((long) (-1));
        org.joda.time.DateTime dateTime76 = dateTime73.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime79 = dateTime73.withDurationAdded(readableDuration77, 1970);
        int int80 = property68.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime81 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property82 = dateTime81.weekOfWeekyear();
        org.joda.time.DateTime dateTime83 = dateTime81.toDateTime();
        org.joda.time.DateTime dateTime85 = dateTime81.minusWeeks(24);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period63, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Interval interval87 = interval56.gap((org.joda.time.ReadableInterval) interval86);
        boolean boolean88 = interval56.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1200014L + "'", long54 == 1200014L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 11 + "'", int64 == 11);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        java.lang.String str9 = yearMonthDay7.toString("2");
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2" + "'", str9, "2");
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset((long) 5);
        java.lang.String str5 = dateTimeZone1.getShortName(100L);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str9 = dateTimeZone1.getName((long) (short) 0, locale8);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(79187880);
        org.joda.time.DateTime dateTime15 = dateTime11.withCenturyOfEra(1977);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1200000 + "'", int3 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:20" + "'", str5, "+00:20");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:20" + "'", str9, "+00:20");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime10.copy();
        mutableDateTime10.setMillis((long) (byte) 10);
        int int15 = mutableDateTime10.getYearOfEra();
        mutableDateTime10.setWeekyear(11);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime10);
        int int19 = mutablePeriod18.getMinutes();
        mutablePeriod18.add((-5270399978L));
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getStandardOffset((long) 5);
        java.lang.String str27 = dateTimeZone23.getShortName(100L);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str31 = dateTimeZone23.getName((long) (short) 0, locale30);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime33 = localTime32.toDateTimeToday();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths(79187880);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod18, (org.joda.time.ReadableInstant) dateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1200000 + "'", int25 == 1200000);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:20" + "'", str27, "+00:20");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:20" + "'", str31, "+00:20");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfMonth();
        boolean boolean21 = calendar4.before((java.lang.Object) property20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property23 = localDate22.weekOfWeekyear();
        org.joda.time.LocalDate.Property property24 = localDate22.yearOfEra();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate localDate9 = localDate2.plusWeeks(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate19 = localDate15.withFieldAdded(durationFieldType17, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate19.withDayOfYear(1780);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1780 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.time.Instant instant6 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtMidnight();
        java.util.Date date9 = dateTime8.toDate();
        date9.setMonth((int) '#');
        int int12 = date9.getMinutes();
        date9.setYear((int) (byte) 0);
        int int15 = date9.getTimezoneOffset();
        java.time.Instant instant16 = date9.toInstant();
        java.util.Date date17 = java.util.Date.from(instant16);
        calendar4.setTime(date17);
        calendar4.set(3, 8, 516);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=8,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=516,DAY_OF_YEAR=354,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Dec 21 00:00:00 GMT+00:20 1900");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-20) + "'", int15 == (-20));
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Dec 21 00:00:00 GMT+00:20 1900");
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay9.year();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = property12.getAsText(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        long long18 = dateTimeField15.add((long) (byte) 10, (long) '4');
        java.util.Locale locale19 = java.util.Locale.US;
        int int20 = dateTimeField15.getMaximumTextLength(locale19);
        long long23 = dateTimeField15.getDifferenceAsLong(0L, (long) 10);
        long long25 = dateTimeField15.remainder(28861000L);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale28.getDisplayScript();
        java.lang.String str31 = dateTimeField15.getAsShortText((long) (byte) 10, locale28);
        java.lang.String str32 = locale28.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay33 = property5.setCopy("UTC", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"UTC\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1640995200010L + "'", long18 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 28861000L + "'", long25 == 28861000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fran\347ais (France)" + "'", str29, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais" + "'", str32, "fran\347ais");
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str2 = property1.getName();
        org.joda.time.MonthDay monthDay4 = property1.addWrapFieldToCopy(49);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property1.getFieldType();
        java.lang.String str6 = property1.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfMonth" + "'", str2, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfMonth]" + "'", str6, "Property[dayOfMonth]");
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime4.addMillis(53230351);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setDayOfWeek(2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("janvier");
        java.lang.String str14 = nameProvider9.getName(locale11, "", "years");
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "3940");
        java.util.Locale locale19 = builder15.build();
        java.lang.String str20 = locale11.getDisplayCountry(locale19);
        java.lang.String str21 = localDateTime3.toString("10", locale11);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration31, (org.joda.time.ReadableInstant) dateMidnight34, periodType35);
        int int37 = dateMidnight34.getYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight34.withDayOfMonth((int) (byte) 10);
        boolean boolean40 = dateMidnight25.isBefore((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight39.monthOfYear();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("janvier");
        int int44 = property41.getMaximumTextLength(locale43);
        org.joda.time.DateTimeField dateTimeField45 = property41.getField();
        int int47 = dateTimeField45.getMaximumValue(0L);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        int int51 = dateTimeField45.getMaximumTextLength(locale48);
        java.lang.String str52 = locale11.getDisplayVariant(locale48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "janvier");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fr" + "'", str49, "fr");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1645454801986L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.property(dateTimeFieldType2);
        java.lang.Object obj4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(obj4);
        org.joda.time.Period period7 = period5.plusSeconds(475);
        org.joda.time.Period period9 = period5.minusYears((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 1918);
        int int12 = period9.getDays();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withDefaultYear(21);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 223);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("1970-01-01T00:00:00.100", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 0, chronology18);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMillis(11);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay20.plusHours(19);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withMillisOfSecond((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusMinutes(32770);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.withMillisOfSecond(49);
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.minuteOfHour();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645454997150L);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withWeekyear(570);
        org.joda.time.DateMidnight.Property property26 = dateMidnight23.dayOfYear();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        java.lang.String str29 = periodType28.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) property26, periodType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YearWeekDayNoWeeks" + "'", str29, "YearWeekDayNoWeeks");
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        boolean boolean19 = localDate9.isSupported(dateTimeFieldType17);
        int int20 = localDate9.getDayOfWeek();
        org.joda.time.LocalDate.Property property21 = localDate9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDate9.getValue((-28860975));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -28860975");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455033977,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=33,MILLISECOND=977,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 12);
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withMonthsRemoved();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTime();
        org.joda.time.Period period44 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period46 = period44.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plusDays((int) 'a');
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology53);
        long long58 = chronology53.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime34, chronology53);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 1, chronology53);
        org.joda.time.Period period63 = new org.joda.time.Period((long) 32769, periodType20, chronology53);
        org.joda.time.DurationField durationField64 = chronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField66 = chronology53.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = new org.joda.time.Period((java.lang.Object) dateTimeField16, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(21368501223736L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusMonths(570);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (byte) 0);
        int int13 = period10.getDays();
        java.lang.String str14 = period10.toString();
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay9.plusDays((-1));
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property44 = dateMidnight20.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int46 = dateMidnight20.get(dateTimeFieldType45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = property47.roundFloorCopy();
        org.joda.time.Interval interval49 = property47.toInterval();
        org.joda.time.DateMidnight dateMidnight51 = property47.addWrapFieldToCopy(11);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withYearOfEra(13);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        int int11 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.minusYears(120);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekOfWeekyear(23);
        org.joda.time.LocalDate.Property property17 = localDate16.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDate16.getField(69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        int int8 = dateTimeField6.getLeapAmount((long) (byte) 1);
        long long10 = dateTimeField6.roundHalfFloor(0L);
        long long13 = dateTimeField6.addWrapField(0L, 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.setCopy((int) (short) 10);
        java.lang.String str9 = property3.getAsString();
        org.joda.time.DurationField durationField10 = property3.getDurationField();
        java.lang.String str11 = durationField10.toString();
        boolean boolean12 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[years]" + "'", str11, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(100);
        org.joda.time.Period period19 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(100L, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.withMonthOfYear(11);
        org.joda.time.Duration duration26 = period19.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType35 = periodType34.withWeeksRemoved();
        java.lang.String str36 = periodType35.getName();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight31, periodType35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMillis(100);
        org.joda.time.Period period45 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(100L, dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = dateTime48.toLocalDateTime();
        org.joda.time.DateTime dateTime51 = dateTime48.withMonthOfYear(11);
        org.joda.time.Duration duration52 = period45.toDurationFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57, periodType58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType61 = periodType60.withWeeksRemoved();
        java.lang.String str62 = periodType61.getName();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateMidnight57, periodType61);
        boolean boolean64 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration52);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration26, (int) (byte) 0);
        mutableDateTime11.addWeeks((int) (byte) -1);
        int int69 = mutableDateTime11.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfYear(2134);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2134 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "YearWeekDayNoWeeks" + "'", str36, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "YearWeekDayNoWeeks" + "'", str62, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 14);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) calendar4, chronology24);
        calendar4.clear();
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate localDate31 = localDate29.withCenturyOfEra(21);
        int int32 = localDate31.getWeekyear();
        org.joda.time.Chronology chronology33 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) dateTimeField34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2170 + "'", int32 == 2170);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        long long25 = durationField22.getDifferenceAsLong((long) '4', 0L);
        long long27 = durationField22.getMillis((long) 292278993);
        int int30 = durationField22.getValue((long) 33198, (long) 366);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) 33198);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 768619512725778000L + "'", long27 == 768619512725778000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.setCopy((int) (short) 10);
        java.lang.String str9 = property3.getAsString();
        org.joda.time.YearMonthDay yearMonthDay10 = property3.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = property3.compareTo(readableInstant11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology17.halfdays();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Interval interval22 = interval20.withDurationBeforeEnd(readableDuration21);
        org.joda.time.Period period23 = interval20.toPeriod();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        org.joda.time.Hours hours30 = period29.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period33 = period29.withFieldAdded(durationFieldType31, 100);
        org.joda.time.Period period35 = period23.withFieldAdded(durationFieldType31, (int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime12.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period38 = period35.plusYears(292278993);
        int int39 = period38.getMillis();
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) period38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds41 = period38.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime26 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime3.withMillisOfSecond((int) 'x');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        int int30 = localDateTime28.getYearOfCentury();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology33);
        long long35 = interval34.getEndMillis();
        org.joda.time.Interval interval37 = interval34.withEndMillis((long) 11);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period39 = interval37.toPeriod(periodType38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 1970);
        int int42 = localDateTime41.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localDateTime41.toString("2029-06-16T00:00:00.000+00:20");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        mutablePeriod5.addMillis((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType47 = mutablePeriod5.getFieldType(19044);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMonths(8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMinuteOfHour(0);
        int int12 = localDateTime11.getYear();
        int int14 = localDateTime11.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime14 = localDateTime3.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.minusDays(15);
        int int17 = localDateTime16.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1200000 + "'", int13 == 1200000);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime9.setZoneRetainFields(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(32470000);
        int int16 = localDateTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod15.setMinutes(11);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutablePeriod15.add(readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod15.copy();
        int int22 = mutablePeriod15.getMonths();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        boolean boolean27 = dateMidnight12.isBefore((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        java.util.Locale locale29 = java.util.Locale.JAPAN;
        int int30 = property28.getMaximumShortTextLength(locale29);
        java.lang.String str31 = locale7.getDisplayLanguage(locale29);
        java.util.Locale.setDefault(locale7);
        java.lang.String str33 = locale4.getDisplayLanguage(locale7);
        java.lang.Object obj34 = null;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(obj34);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime37 = yearMonthDay36.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 1970, dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDate localDate44 = localDate40.withWeekyear((-1));
        boolean boolean46 = localDate44.equals((java.lang.Object) 8);
        int int47 = localDate44.getYear();
        boolean boolean48 = yearMonthDay36.equals((java.lang.Object) localDate44);
        int int49 = localDate44.size();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType52 = periodType51.withWeeksRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', periodType52, chronology53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay35, (org.joda.time.ReadablePartial) localDate44, periodType52);
        org.joda.time.LocalDate.Property property56 = localDate44.era();
        boolean boolean57 = locale4.equals((java.lang.Object) property56);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fran\347ais (France)" + "'", str8, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str31, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "allemand" + "'", str33, "allemand");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.minusMinutes(52);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(3);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds(1200200);
        int int11 = timeOfDay8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        calendar4.roll(0, 12);
        java.util.Date date8 = calendar4.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.set(120, 3351);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455034775,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=34,MILLISECOND=775,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 15:10:34 GMT+00:20 2022");
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withDayOfWeek(4);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime36.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        mutableDateTime38.set(dateTimeFieldType39, 5);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight.Property property44 = dateMidnight20.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, dateTimeZone46);
        boolean boolean48 = dateTimeZone46.isFixed();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight20, dateTimeZone46);
        int int50 = dateMidnight20.getDayOfMonth();
        org.joda.time.DateMidnight.Property property51 = dateMidnight20.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight53 = property51.setCopy("1 Jan 1970 00:32:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1 Jan 1970 00:32:00 GMT\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minuteOfDay" + "'", str40, "minuteOfDay");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = dateMidnight14.toDateTime(dateTimeZone16);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (byte) 0);
        boolean boolean22 = dateTimeZone16.equals((java.lang.Object) period21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDate25.getValue(98);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 98");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        boolean boolean16 = dateTime12.isBefore(0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone12);
        int int15 = localDateTime14.getMillisOfSecond();
        int int16 = localDateTime14.getMonthOfYear();
        java.util.Date date17 = localDateTime14.toDate();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        boolean boolean36 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateTime dateTime37 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateMidnight21);
        boolean boolean38 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime39 = dateTime37.toLocalDateTime();
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:20:00 GMT+00:20 1970");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        int int12 = dateMidnight8.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight8.getZone();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone13);
        mutableDateTime4.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology19);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        mutableDateTime4.setZone(dateTimeZone27);
        long long31 = dateTimeZone27.convertUTCToLocal(1613918903765L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455034980,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=34,MILLISECOND=980,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1613918903765L + "'", long31 == 1613918903765L);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("janvier");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "janvier");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "janvier" + "'", str3, "janvier");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime27.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        mutableDateTime29.set(dateTimeFieldType30, 5);
        boolean boolean34 = localDateTime17.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime17.withYearOfCentury((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundFloorCopy();
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("en");
        int int41 = property37.getMaximumShortTextLength(locale40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        boolean boolean19 = localTime15.isSupported(durationFieldType18);
        mutableDateTime9.add(durationFieldType18, (-1));
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime9.setZoneRetainFields(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime9.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(100L, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMillis((int) (short) 0);
        boolean boolean33 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusDays((int) 'a');
        long long40 = dateMidnight39.getMillis();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusYears(6);
        boolean boolean45 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight48 = property46.addToCopy(54);
        java.util.Date date49 = dateMidnight48.toDate();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 570 + "'", int34 == 570);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 8379600000L + "'", long40 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Sat Apr 07 00:00:00 GMT+00:20 7364");
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = dateMidnight14.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = dateTime18.plusWeeks((int) ' ');
        org.joda.time.Period period22 = org.joda.time.Period.hours((int) ' ');
        org.joda.time.Period period24 = period22.minusYears((int) ' ');
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) 0, periodType26, chronology27);
        org.joda.time.Period period29 = period22.withPeriodType(periodType26);
        org.joda.time.DateTime dateTime30 = dateTime18.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime18.minusYears(1952);
        org.joda.time.DateTime dateTime34 = dateTime18.plusHours((-101));
        org.joda.time.LocalTime localTime35 = dateTime18.toLocalTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withDefaultYear(21);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(600100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 30);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter9.getPrinter();
        java.io.Writer writer12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1970, dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate15.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = localDate15.withWeekyear((-1));
        org.joda.time.LocalDate.Property property20 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate22 = property20.addToCopy(3);
        org.joda.time.LocalDate localDate24 = property20.addWrapFieldToCopy(200);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime26 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonthDay25.getFieldTypes();
        boolean boolean28 = property20.equals((java.lang.Object) yearMonthDay25);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay25.plusMonths(600100);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(writer12, (org.joda.time.ReadablePartial) yearMonthDay25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonthDay30);
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        calendar4.setMinimalDaysInFirstWeek(1970);
        int int8 = calendar4.getActualMaximum((int) (short) 10);
        boolean boolean9 = calendar4.isWeekDateSupported();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (byte) 100, chronology11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(33198);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.withDayOfMonth(23);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusYears(190);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay18.getFieldTypes();
        boolean boolean20 = calendar4.before((java.lang.Object) dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455035105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1970,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=35,MILLISECOND=105,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval3.withDurationBeforeEnd(readableDuration4);
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Interval interval8 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        int int15 = dateMidnight11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight11.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withField(dateTimeFieldType17, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withWeekyear(7);
        org.joda.time.Period period32 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period34 = period32.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusDays((int) 'a');
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology41);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology41);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49, periodType50);
        int int52 = dateMidnight49.getYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight54, readableDuration55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight45.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod56, 2);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(100L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime63.minuteOfDay();
        org.joda.time.DateTime dateTime67 = property66.roundCeilingCopy();
        org.joda.time.DateTime dateTime69 = dateTime67.minusDays(35);
        org.joda.time.Duration duration70 = mutablePeriod56.toDurationTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration71 = duration70.toDuration();
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period74 = period72.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.millis();
        int int76 = period74.get(durationFieldType75);
        org.joda.time.Duration duration77 = period74.toStandardDuration();
        int int78 = duration70.compareTo((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableDuration) duration70);
        boolean boolean80 = interval5.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Interval interval82 = interval79.withPeriodAfterStart(readablePeriod81);
        boolean boolean84 = interval82.isAfter(32470000L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        int int6 = dateMidnight2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        int int8 = dateMidnight2.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withYearOfEra(971);
        int int11 = dateMidnight10.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDayOfMonth(190);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 190 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime9 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime10 = property7.getLocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(70, 535, 26, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 535 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval11 = localDate7.toInterval();
        boolean boolean12 = interval11.isBeforeNow();
        org.joda.time.Duration duration13 = interval11.toDuration();
        org.joda.time.Instant instant15 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration13, 2022);
        org.joda.time.Instant instant18 = instant3.withDurationAdded((long) 8, 120);
        org.joda.time.Instant instant19 = instant3.toInstant();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime29.copy();
        mutableDateTime29.setMillis((long) (byte) 10);
        int int34 = mutableDateTime29.getYearOfEra();
        mutableDateTime29.setWeekyear(11);
        mutableDateTime29.addYears(5);
        mutableDateTime29.add((long) 10);
        mutableDateTime29.addMillis((-100));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) mutableDateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology24.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(0, 475, 0, 59, 37, 53230351, 0, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval9.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Period period12 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period18.withFieldAdded(durationFieldType20, 100);
        org.joda.time.Period period24 = period12.withFieldAdded(durationFieldType20, (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime1.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime28 = dateTime1.toDateTime(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone26.getOffset(readableInstant29);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1200000 + "'", int30 == 1200000);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        java.util.Date date5 = new java.util.Date(79187880, 53312770, 1, 22, 971);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Nov 02 14:11:00 GMT+00:20 83632510");
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate7 = property5.getLocalDate();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone10);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar12);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfDay((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.DateTime dateTime24 = dateTime18.withField(dateTimeFieldType21, (int) 'u');
        java.lang.String str25 = dateTimeFieldType21.toString();
        org.joda.time.LocalTime.Property property26 = localTime15.property(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property27 = localDate7.property(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455035408,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=35,MILLISECOND=408,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfDay" + "'", str22, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfDay" + "'", str25, "minuteOfDay");
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        int int7 = yearMonthDay6.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.minusYears(35);
        org.joda.time.Interval interval10 = yearMonthDay6.toInterval();
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay6.monthOfYear();
        org.joda.time.Interval interval12 = yearMonthDay6.toInterval();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        int int19 = dateMidnight16.getYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight16.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime22.copy();
        int int25 = mutableDateTime22.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.weekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology30);
        int int32 = mutablePeriod31.getDays();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay6.plus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay6.withMonthOfYear(12);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay36.year();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455035423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=35,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.Period period11 = period9.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod12 = period9.toMutablePeriod();
        mutablePeriod12.setPeriod((long) 100);
        mutablePeriod12.setMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, 59);
        org.joda.time.LocalDateTime.Property property19 = localDateTime3.hourOfDay();
        int int20 = localDateTime3.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime3.withWeekOfWeekyear(3351);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3351 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withMillisOfSecond(569);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval13 = new org.joda.time.Interval((java.lang.Object) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.time.ZoneId zoneId5 = timeZone3.toZoneId();
        java.time.ZoneId zoneId6 = timeZone3.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(10, (int) (short) 1, 11, dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(157766400010L);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1200000 + "'", int13 == 1200000);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        calendar4.roll(1, false);
        int int9 = calendar4.getActualMinimum(0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        int int11 = calendar4.getFirstDayOfWeek();
        calendar4.setMinimalDaysInFirstWeek(1200);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar4.getMinimum(54606912);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54606912");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1613919035500,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1200,ERA=1,YEAR=2021,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=35,MILLISECOND=500,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withWeekOfWeekyear((-1331));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1331 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getDate();
        date6.setHours(9);
        date6.setDate((-15993));
        int int13 = date6.getYear();
        int int14 = date6.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 19 09:20:00 GMT+00:20 1926");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-20) + "'", int7 == (-20));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-20) + "'", int14 == (-20));
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        boolean boolean6 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withDefaultYear(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime15 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay14.year();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = property17.getAsText(locale18);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay21.year();
        java.util.Locale locale25 = java.util.Locale.US;
        int int26 = property24.getMaximumShortTextLength(locale25);
        java.lang.String str27 = property17.getAsText(locale25);
        java.lang.String str28 = locale25.getLanguage();
        java.util.Locale locale29 = java.util.Locale.US;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.lang.String str31 = locale25.getDisplayLanguage(locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter13.withLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.parse("21", dateTimeFormatter32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455035610,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:20\",offset=1200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=35,MILLISECOND=610,ZONE_OFFSET=1200000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.Calendar.Builder builder10 = builder6.setDate(2022, 0, 33198);
        java.util.Calendar.Builder builder13 = builder10.set(9, 0);
        java.util.Calendar.Builder builder15 = builder13.setLenient(true);
        java.util.Calendar.Builder builder19 = builder15.setTimeOfDay(292278993, 53272, 35);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("it");
        java.util.Calendar.Builder builder22 = builder15.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder26 = builder22.setWeekDate(15, 223, 50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder28 = builder26.setCalendarType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = new org.joda.time.Period((java.lang.Object) periodType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.add((long) (byte) 10, (long) '4');
        java.util.Locale locale10 = java.util.Locale.US;
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        long long13 = dateTimeField6.roundHalfEven((long) (-1));
        long long15 = dateTimeField6.roundHalfFloor((long) 6);
        int int16 = dateTimeField6.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1640995200010L + "'", long9 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        org.joda.time.Hours hours14 = period13.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period17 = period13.withFieldAdded(durationFieldType15, 100);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology35);
        org.joda.time.DurationField durationField38 = durationFieldType15.getField(chronology35);
        org.joda.time.Interval interval39 = interval7.withChronology(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(23, 37, 1780, 96, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1780 for secondOfMinute must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(0);
        int int10 = localDate9.getDayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate9.centuryOfEra();
        int int12 = property11.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        int int14 = property11.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455035786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=35,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2922789 + "'", int12 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(100);
        org.joda.time.Period period18 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = dateTime21.toLocalDateTime();
        org.joda.time.DateTime dateTime24 = dateTime21.withMonthOfYear(11);
        org.joda.time.Duration duration25 = period18.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime28 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration25, 6);
        long long29 = dateTime28.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-44179604459900L) + "'", long29 == (-44179604459900L));
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(379986000000L);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        int int19 = dateMidnight16.getYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight16.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight21, readableDuration24, periodType25);
        mutablePeriod26.addMillis((int) '4');
        int int29 = mutablePeriod26.size();
        org.joda.time.LocalTime localTime30 = localTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod26.setPeriod((long) (byte) 10, (long) (short) 0, chronology33);
        org.joda.time.DateTime dateTime36 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, dateTimeZone38);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(dateTimeZone38);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.fromCalendarFields(calendar45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology50);
        long long52 = interval51.getEndMillis();
        java.lang.String str53 = interval51.toString();
        org.joda.time.MutableInterval mutableInterval54 = interval51.toMutableInterval();
        org.joda.time.Period period55 = interval51.toPeriod();
        org.joda.time.LocalDate localDate56 = localDate46.minus((org.joda.time.ReadablePeriod) period55);
        int int57 = period55.getHours();
        org.joda.time.Days days58 = period55.toStandardDays();
        org.joda.time.Period period60 = period55.withHours(59);
        org.joda.time.Period period62 = period55.withMinutes(54);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.millis();
        mutablePeriod69.set(durationFieldType70, 5);
        org.joda.time.Period period74 = period64.withField(durationFieldType70, 1);
        org.joda.time.Period period76 = period55.withField(durationFieldType70, 35);
        org.joda.time.Period period78 = org.joda.time.Period.months((int) (byte) 0);
        org.joda.time.Days days79 = period78.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod80 = period78.toMutablePeriod();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType81.getRangeDurationType();
        boolean boolean83 = period78.isSupported(durationFieldType82);
        int int84 = period55.indexOf(durationFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod26.add(durationFieldType82, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645455035862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=35,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20" + "'", str53, "1970-01-01T00:19:59.999+00:20/1970-01-01T00:20:00.010+00:20");
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(days79);
        org.junit.Assert.assertNotNull(mutablePeriod80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (short) 0);
        int int5 = dateMidnight4.getYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight4, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plusDays((int) 'a');
        long long7 = dateMidnight6.getMillis();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withCenturyOfEra(4);
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod42, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(100L, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property52 = dateTime49.minuteOfDay();
        org.joda.time.DateTime dateTime53 = property52.roundCeilingCopy();
        org.joda.time.DateTime dateTime55 = dateTime53.minusDays(35);
        org.joda.time.Duration duration56 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType59 = periodType58.withWeeksRemoved();
        java.lang.String str60 = periodType59.getName();
        org.joda.time.PeriodType periodType61 = periodType59.withDaysRemoved();
        int int62 = periodType59.size();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableDuration) duration56, periodType59);
        org.joda.time.PeriodType periodType64 = mutablePeriod63.getPeriodType();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period76 = period74.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(1L, dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.plusDays((int) 'a');
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period74, (org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period84 = new org.joda.time.Period((long) 243571, 768619512725778000L, periodType65, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 8896059175");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 8379600000L + "'", long7 == 8379600000L);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "YearWeekDayNoWeeks" + "'", str60, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withYear(1951);
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        long long32 = chronology27.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(chronology27);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod37.setMinutes(11);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod37.toMutablePeriod();
        org.joda.time.MonthDay monthDay41 = monthDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate7.compareTo((org.joda.time.ReadablePartial) monthDay41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455035929,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=35,MILLISECOND=929,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundFloorCopy();
        boolean boolean31 = localDate7.equals((java.lang.Object) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withCenturyOfEra((int) (short) 0);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.year();
        org.joda.time.DateMidnight dateMidnight36 = property34.addWrapFieldToCopy(5);
        org.joda.time.DateMidnight dateMidnight38 = property34.addToCopy((long) 30);
        org.joda.time.DateMidnight dateMidnight40 = property34.setCopy(3);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight43 = property41.setCopy(53263);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53263 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(342, 33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 342 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusDays(35);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) 70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = dateTime4.toLocalDate();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Interval interval9 = localDate2.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays((-292275054));
        org.joda.time.LocalDate localDate13 = localDate2.minusWeeks(2200);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(100L, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str25 = dateTimeFieldType24.getName();
        org.joda.time.DateTime dateTime27 = dateTime21.withField(dateTimeFieldType24, (int) 'u');
        java.lang.String str28 = dateTimeFieldType24.toString();
        org.joda.time.Period period37 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period39 = period37.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusDays((int) 'a');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now(chronology46);
        boolean boolean48 = dateTimeFieldType24.isSupported(chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period(1735689600000L, (long) (short) 1, chronology46);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(157766400010L, 92016000000L, chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval51 = new org.joda.time.Interval((java.lang.Object) localDate13, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:20");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfDay" + "'", str25, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(982, 342);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 342");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.addToCopy((int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str29 = dateTimeFieldType28.getName();
        org.joda.time.DateTime dateTime31 = dateTime25.withField(dateTimeFieldType28, (int) 'u');
        java.lang.String str32 = dateTimeFieldType28.toString();
        org.joda.time.Period period41 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period43 = period41.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plusDays((int) 'a');
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period41, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology50);
        boolean boolean52 = dateTimeFieldType28.isSupported(chronology50);
        org.joda.time.DateTime dateTime53 = dateMidnight22.toDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minuteOfDay" + "'", str29, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (-15993), chronology18);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology18.getDateTimeMillis((-44), 49, (int) (short) -1, 1059594, 535, 535, (-20));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1059594 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        long long9 = interval7.toDurationMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        boolean boolean18 = interval13.contains((org.joda.time.ReadableInterval) interval17);
        java.lang.String str19 = interval13.toString();
        long long20 = interval13.getEndMillis();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        boolean boolean30 = interval25.contains((org.joda.time.ReadableInterval) interval29);
        java.lang.String str31 = interval29.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        boolean boolean40 = interval35.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean41 = interval29.isBefore((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval13.overlaps((org.joda.time.ReadableInterval) interval29);
        boolean boolean43 = interval7.isBefore((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        boolean boolean52 = interval47.contains((org.joda.time.ReadableInterval) interval51);
        java.lang.Object obj53 = null;
        org.joda.time.Instant instant54 = new org.joda.time.Instant(obj53);
        org.joda.time.DateTimeZone dateTimeZone55 = instant54.getZone();
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone55);
        boolean boolean58 = interval47.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        boolean boolean63 = interval47.contains((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = interval47.toPeriod();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray69 = period68.getFieldTypes();
        int int70 = period68.getMinutes();
        org.joda.time.Period period72 = period68.withDays((int) ' ');
        org.joda.time.PeriodType periodType73 = period72.getPeriodType();
        org.joda.time.Period period74 = interval47.toPeriod(periodType73);
        long long75 = interval47.getStartMillis();
        boolean boolean76 = interval7.isAfter((org.joda.time.ReadableInterval) interval47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((java.lang.Object) boolean76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31536000000L + "'", long9 == 31536000000L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str19, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1672531200000L + "'", long20 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str31, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1640995200000L + "'", long75 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        java.lang.String str9 = dateTimeZone2.getShortName(181025280000000000L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        long long16 = dateTimeZone14.nextTransition(43200000L);
        long long18 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 43200000L);
        java.lang.String str19 = dateTimeZone2.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.setMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime30.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime43 = dateTime30.minusWeeks((int) (byte) 1);
        int int44 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property45 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime30.withYear(1969);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfMonth();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType21.getField(chronology48);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.DateTime dateTime56 = dateTime54.withTimeAtStartOfDay();
        org.joda.time.Duration duration59 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, readableInstant60, periodType61);
        mutablePeriod62.setMonths((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime54.plus((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DateTime dateTime67 = dateTime54.withMillisOfDay(4);
        org.joda.time.format.PeriodPrinter periodPrinter69 = null;
        org.joda.time.format.PeriodParser periodParser70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = new org.joda.time.format.PeriodFormatter(periodPrinter69, periodParser70);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter73 = periodFormatter71.withParseType(periodType72);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType78, chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType78, chronology81);
        org.joda.time.PeriodType periodType83 = periodType78.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter84 = periodFormatter73.withParseType(periodType83);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("1");
        org.joda.time.format.PeriodFormatter periodFormatter87 = periodFormatter73.withLocale(locale86);
        java.lang.String str88 = dateTime67.toString("1", locale86);
        int int89 = dateTimeField51.getMaximumTextLength(locale86);
        java.lang.String str90 = dateTimeZone2.getShortName(292278993L, locale86);
        java.lang.String str91 = locale86.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 43200000L + "'", long16 == 43200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 43200000L + "'", long18 == 43200000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodFormatter73);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodFormatter84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "und" + "'", str91, "und");
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("year", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale13 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withLocale(locale13);
        java.lang.StringBuffer stringBuffer16 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(720070L, (long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter15.printTo(stringBuffer16, (org.joda.time.ReadablePeriod) mutablePeriod19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale13.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        org.joda.time.Days days19 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.minutes();
        int int21 = days19.get(durationFieldType20);
        mutablePeriod18.add(durationFieldType20, 8);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutablePeriod18.add(readablePeriod24);
        int int26 = mutablePeriod18.getMonths();
        mutablePeriod18.add((int) (short) 100, (int) (byte) 0, 100, (int) (byte) 1, (int) 'a', (int) (byte) 0, 8, (int) (short) 10);
        mutablePeriod18.setWeeks(70);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = period41.getFieldTypes();
        org.joda.time.Period period44 = period41.minusYears((int) (byte) 1);
        org.joda.time.Period period46 = period41.plusMonths((int) (byte) 0);
        int int47 = period41.size();
        org.joda.time.Period period49 = period41.plusYears(100);
        org.joda.time.Period period50 = period41.normalizedStandard();
        org.joda.time.Period period51 = period41.normalizedStandard();
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) period51);
        mutablePeriod18.addMinutes((int) (byte) -1);
        org.joda.time.ReadableInterval readableInterval55 = null;
        mutablePeriod18.setPeriod(readableInterval55);
        long long59 = chronology9.add((org.joda.time.ReadablePeriod) mutablePeriod18, 20L, (int) ' ');
        java.lang.String str60 = chronology9.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldTypeArray42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 20L + "'", long59 == 20L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-22T07:15:10.840Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int8 = dateTimeField2.getMinimumValue();
        long long10 = dateTimeField2.roundHalfEven((long) (byte) 1);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        int int14 = dateTimeField2.getMaximumTextLength(locale11);
        long long17 = dateTimeField2.add((-48534346800000L), (-8));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-48534692400000L) + "'", long17 == (-48534692400000L));
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) (short) -1);
        java.lang.String str7 = dateTimeZone2.getName(41731200000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-01t00:00:00.000+00:02/2023-01-01t00:00:00.000+00:02");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        int int19 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime15.minus((long) (short) 100);
        int int22 = dateTime15.getCenturyOfEra();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant32, periodType33);
        org.joda.time.DateTime dateTime35 = dateTime27.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime37 = dateTime27.withYearOfEra(9);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.Duration duration50 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, readableInstant51, periodType52);
        mutablePeriod53.setMonths((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime45.plus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTime dateTime58 = dateTime45.minusWeeks((int) (byte) 1);
        int int59 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property60 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime45.withYear(1969);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology63.getZone();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) dateTime27, dateTimeZone67);
        java.util.TimeZone timeZone69 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime70 = dateTime15.toDateTime(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = dateTime15.withYearOfCentury((-32));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -32 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399 + "'", int19 == 86399);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("P11W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P11W\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.minusWeeks((int) (byte) 1);
        int int24 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property25 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime10.withYear(1969);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTime dateTime31 = dateTime2.toDateTime(chronology28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(454L, chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getName(8380845299L);
        long long9 = dateTimeZone2.convertLocalToUTC(27969129L, false, (long) 120);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:02" + "'", str5, "+00:02");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 27849129L + "'", long9 == 27849129L);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology25.getZone();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekOfWeekyear();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZone(dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean42 = dateTime38.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime.Property property43 = dateTime33.property(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime33.getZone();
        org.joda.time.LocalDateTime localDateTime45 = dateTime33.toLocalDateTime();
        java.lang.Object obj46 = null;
        org.joda.time.Instant instant47 = new org.joda.time.Instant(obj46);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        java.lang.String str49 = dateTimeZone48.toString();
        int int51 = dateTimeZone48.getOffset(1L);
        boolean boolean53 = dateTimeZone48.isStandardOffset(0L);
        java.lang.String str55 = dateTimeZone48.getNameKey((long) 1);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone48);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset((long) 365);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.withZone(dateTimeZone64);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime68 = instant67.toDateTime();
        org.joda.time.DateTime.Property property69 = dateTime68.era();
        org.joda.time.DateTime dateTime70 = dateTime68.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean72 = dateTime68.isSupported(dateTimeFieldType71);
        org.joda.time.DateTime.Property property73 = dateTime63.property(dateTimeFieldType71);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime63.getZone();
        org.joda.time.LocalDateTime localDateTime75 = dateTime63.toLocalDateTime();
        boolean boolean76 = dateTimeZone58.isLocalDateTimeGap(localDateTime75);
        boolean boolean77 = dateTimeZone48.isLocalDateTimeGap(localDateTime75);
        org.joda.time.Hours hours78 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime45, (org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period83 = duration82.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray84 = period83.getFieldTypes();
        int int85 = period83.getMinutes();
        org.joda.time.Period period87 = period83.withDays((int) ' ');
        org.joda.time.Period period89 = period83.plusWeeks(10);
        org.joda.time.Period period91 = period83.minusMillis((int) (short) 1);
        int[] intArray92 = period83.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField30.set((org.joda.time.ReadablePartial) localDateTime75, 1800, intArray92, 78719999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 78719999 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120000 + "'", int60 == 120000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(hours78);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(durationFieldTypeArray84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant4 = instant1.withDurationAdded((-26179200000L), (int) 'x');
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant1.withDurationAdded(readableDuration5, (int) 'x');
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        java.lang.String str38 = period37.toString();
        org.joda.time.Duration duration39 = period37.toStandardDuration();
        org.joda.time.Period period41 = period37.minusDays(9);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant45, periodType46);
        org.joda.time.Days days48 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.minutes();
        int int50 = days48.get(durationFieldType49);
        mutablePeriod47.add(durationFieldType49, 8);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod47.add(readablePeriod53);
        int int55 = mutablePeriod47.getMillis();
        org.joda.time.Chronology chronology57 = null;
        mutablePeriod47.add((long) 8, chronology57);
        mutablePeriod47.addDays(7);
        org.joda.time.ReadableInterval readableInterval61 = null;
        mutablePeriod47.setPeriod(readableInterval61);
        mutablePeriod47.addMonths(2022);
        mutablePeriod47.addSeconds((int) (short) 10);
        mutablePeriod47.setWeeks((-19));
        mutablePeriod47.addWeeks(169);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period71 = period41.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.010S" + "'", str38, "PT0.010S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("\u7fa9\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        mutablePeriod5.add(durationFieldType8, 8);
        org.joda.time.PeriodType periodType11 = mutablePeriod5.getPeriodType();
        mutablePeriod5.setPeriod(2922789, 24, 0, 0, (-59), 69, (-27349920), 201);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition(2980800000L);
        java.lang.Object obj4 = null;
        org.joda.time.Instant instant5 = new org.joda.time.Instant(obj4);
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getName((long) 10);
        long long12 = dateTimeZone6.convertLocalToUTC((long) (byte) -1, true);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-720L));
        boolean boolean16 = dateTimeZone1.isStandardOffset((long) 6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2980800000L + "'", long3 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-720L) + "'", long14 == (-720L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("366");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"366\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfMinute();
        long long18 = dateTimeField16.remainder((long) 86399);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 399L + "'", long18 == 399L);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval19.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        boolean boolean30 = interval25.contains((org.joda.time.ReadableInterval) interval29);
        boolean boolean31 = interval19.isBefore((org.joda.time.ReadableInterval) interval29);
        boolean boolean32 = interval3.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        boolean boolean36 = interval3.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531080000L + "'", long10 == 1672531080000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str21, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.joda.time.Period period8 = new org.joda.time.Period(26033472, 26235748, (-292275054), (int) ' ', (-2147483551), 4, 676, 11);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(97);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.withChronology(chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(28314719L);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        int[] intArray65 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay63, (long) (-1));
        org.joda.time.DateTimeField dateTimeField66 = chronology21.secondOfMinute();
        org.joda.time.DurationField durationField67 = dateTimeField66.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long69 = durationField67.getMillis((-115706875723198030L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -115706875723198030 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        mutablePeriod5.setDays(100);
        mutablePeriod5.add(8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4', (int) (short) 10);
        int int19 = mutablePeriod5.size();
        int int20 = mutablePeriod5.size();
        mutablePeriod5.setPeriod((int) (byte) -1, (int) 'a', (int) (byte) 1, (int) (short) 0, 0, 100, 0, (int) 'x');
        java.lang.Object obj31 = null;
        org.joda.time.Instant instant32 = new org.joda.time.Instant(obj31);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone33);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = dateTimeZone33.getShortName(100L, locale37);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.lang.String str43 = dateTimeZone33.getShortName((long) (short) -1, locale41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 'a', dateTimeZone33);
        org.joda.time.Duration duration45 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime44.plusSeconds(100);
        boolean boolean48 = dateTime47.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.joda.time.Period period1 = org.joda.time.Period.days(99);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property28 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime13.withYear(1969);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType5.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DurationField durationField34 = chronology31.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(3, 49, (-12707002), 248400000, (int) (byte) 0, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfDay();
        java.lang.String str12 = dateTime10.toString();
        java.lang.Object obj13 = null;
        org.joda.time.Instant instant14 = new org.joda.time.Instant(obj13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        int int18 = dateTimeZone15.getOffset(1L);
        boolean boolean20 = dateTimeZone15.isStandardOffset(0L);
        java.lang.String str22 = dateTimeZone15.getNameKey((long) 1);
        long long26 = dateTimeZone15.convertLocalToUTC(1512000000L, true, (long) (byte) 10);
        java.lang.String str28 = dateTimeZone15.getName((long) (-2147483648));
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:15:26.232Z" + "'", str12, "2022-02-22T07:15:26.232Z");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1512000000L + "'", long26 == 1512000000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        int int12 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTime.Property property14 = dateTime4.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property14.setCopy("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"italien (Italie)\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        org.joda.time.DateTime dateTime7 = property2.setCopy(1439);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeks(1970);
        org.joda.time.Weeks weeks11 = weeks9.dividedBy((int) 'u');
        boolean boolean12 = dateTime7.equals((java.lang.Object) weeks11);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.weeks(23);
        org.joda.time.Duration duration15 = weeks14.toStandardDuration();
        org.joda.time.Duration duration16 = weeks14.toStandardDuration();
        boolean boolean17 = weeks11.isLessThan(weeks14);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period5 = period3.withSeconds((int) '4');
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Period period8 = period6.plusYears(3);
        org.joda.time.Period period10 = period8.withSeconds((int) (byte) 0);
        org.joda.time.Period period12 = period8.minusYears(35);
        org.joda.time.Period period14 = period8.plusDays(9678);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.joda.time.Duration duration9 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis((int) (short) 1);
        int int15 = mutablePeriod12.getSeconds();
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = weeks16.getFieldType();
        mutablePeriod12.add(durationFieldType17, (int) (byte) 0);
        mutablePeriod12.addMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        int int24 = mutablePeriod12.get(durationFieldType23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant38, periodType39);
        mutablePeriod40.setMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime32.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTime dateTime45 = dateTime32.minusWeeks((int) (byte) 1);
        int int46 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property47 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime32.withYear(1969);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.hourOfHalfday();
        org.joda.time.DurationField durationField54 = durationFieldType23.getField(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((-2), 1439, 432, 26121540, (int) (byte) 10, 0, 26075160, chronology50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26121540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeField dateTimeField48 = timeOfDay38.getField(2);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = dateTimeField48.set((long) 0, 141012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 141012 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        boolean boolean18 = interval7.contains((org.joda.time.ReadableInterval) interval12);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        boolean boolean32 = interval27.contains((org.joda.time.ReadableInterval) interval31);
        java.lang.String str33 = interval31.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        boolean boolean42 = interval37.contains((org.joda.time.ReadableInterval) interval41);
        boolean boolean43 = interval31.isBefore((org.joda.time.ReadableInterval) interval41);
        mutablePeriod23.setPeriod((org.joda.time.ReadableInterval) interval41);
        boolean boolean45 = interval7.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Seconds seconds46 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval7);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str33, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(seconds46);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 5);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes3 = minutes1.minus(59);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Minutes minutes7 = minutes5.minus(59);
        org.joda.time.Minutes minutes9 = minutes5.multipliedBy((int) (short) -1);
        boolean boolean10 = minutes1.isGreaterThan(minutes9);
        org.joda.time.Minutes minutes11 = minutes9.negated();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod30 = seconds29.toMutablePeriod();
        org.joda.time.Duration duration31 = seconds29.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType32 = seconds29.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = chronology25.get((org.joda.time.ReadablePeriod) seconds29, (-820800059L), (-109418823420000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -109418002619");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode7 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet6, filteringMode7);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap12);
        java.lang.String[] strArray24 = new java.lang.String[] { "P-10MT52S", "Italy", "Japanisch", "inglese", "2022", "PT-2147483648H", "French", "YearDay", "PT52H", "\u4e0a\u5348" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag(languageRangeList13, (java.util.Collection<java.lang.String>) strList25);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + filteringMode7 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode7.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        boolean boolean30 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        long long47 = dateTime33.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        int int70 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property71 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime73 = dateTime56.withYear(1969);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DurationField durationField75 = durationFieldType48.getField(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime33.toDateTime(chronology74);
        org.joda.time.Weeks weeks77 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime25.withEra(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(weeks77);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType11, chronology12);
        org.joda.time.PeriodType periodType14 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        boolean boolean20 = dateTime18.isEqual(10L);
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        long long28 = dateTimeField25.add(0L, (long) (short) 1);
        long long31 = dateTimeField25.add(1L, (-1));
        int int32 = dateTime18.get(dateTimeField25);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTime dateTime48 = dateTime35.minusWeeks((int) (byte) 1);
        long long49 = dateTime35.getMillis();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration63, readableInstant64, periodType65);
        mutablePeriod66.setMonths((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime58.plus((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.DateTime dateTime71 = dateTime58.minusWeeks((int) (byte) 1);
        int int72 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property73 = dateTime58.minuteOfHour();
        org.joda.time.DateTime dateTime75 = dateTime58.withYear(1969);
        org.joda.time.Chronology chronology76 = dateTime75.getChronology();
        org.joda.time.DurationField durationField77 = durationFieldType50.getField(chronology76);
        org.joda.time.DateTime dateTime78 = dateTime35.toDateTime(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime18.toDateTime(chronology76);
        org.joda.time.DateTimeField dateTimeField80 = chronology76.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology76.clockhourOfHalfday();
        org.joda.time.DurationField durationField82 = chronology76.seconds();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((-1640736000000L), 4438800000L, periodType14, chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((int) (byte) -1, 7, (-100), 86398999, 2922789, (-8), 141012, chronology76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86398999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 43200000L + "'", long28 == 43200000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-43199999L) + "'", long31 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getLeapDurationField();
        long long10 = dateTimeField2.roundHalfFloor((-1L));
        org.joda.time.DurationField durationField11 = dateTimeField2.getDurationField();
        java.util.Locale locale16 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = dateTimeField2.getAsShortText((int) (byte) 100, locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-120000L) + "'", long7 == (-120000L));
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-120000L) + "'", long10 == (-120000L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals(locale16.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        mutablePeriod5.add(3599999000L, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyear();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        int int29 = property27.getMaximumValueOverall();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getDisplayCountry();
        int int33 = property27.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime34 = property27.withMaximumValue();
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.format.PeriodPrinter periodPrinter36 = null;
        org.joda.time.format.PeriodParser periodParser37 = null;
        org.joda.time.format.PeriodFormatter periodFormatter38 = new org.joda.time.format.PeriodFormatter(periodPrinter36, periodParser37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withParseType(periodType39);
        java.util.Locale locale41 = periodFormatter38.getLocale();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.lang.String str43 = locale42.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter38.withLocale(locale42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = locale45.getDisplayScript(locale46);
        java.lang.String str48 = locale42.getDisplayScript(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localTime35, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period10 = period3.toPeriod();
        org.joda.time.format.PeriodPrinter periodPrinter11 = null;
        org.joda.time.format.PeriodParser periodParser12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = new org.joda.time.format.PeriodFormatter(periodPrinter11, periodParser12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter13.withParseType(periodType14);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType20, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType20, chronology23);
        org.joda.time.PeriodType periodType25 = periodType20.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter15.withParseType(periodType25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("1");
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter15.withLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = period3.toString(periodFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter29);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        mutablePeriod5.add(durationFieldType8, 8);
        mutablePeriod5.addHours(7);
        mutablePeriod5.setMinutes(1969);
        int int15 = mutablePeriod5.getMillis();
        mutablePeriod5.addMonths(49);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property31 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime16.withYear(1969);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTime dateTime37 = dateTime8.toDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfHalfday();
        org.joda.time.Period period39 = new org.joda.time.Period(1L, periodType6, chronology34);
        long long43 = chronology34.add((long) (byte) 100, (long) 6, 59);
        org.joda.time.Period period45 = org.joda.time.Period.parse("PT432000S");
        org.joda.time.Hours hours46 = period45.toStandardHours();
        org.joda.time.Hours hours47 = hours46.negated();
        int[] intArray49 = chronology34.get((org.joda.time.ReadablePeriod) hours46, 1645514015L);
        org.joda.time.DateTimeField dateTimeField50 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = chronology34.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(365, 141012, 19, 99, 169, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 454L + "'", long43 == 454L);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[457]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT7.010S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt7.010s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int15 = mutablePeriod14.getDays();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        boolean boolean26 = interval21.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        mutablePeriod14.setPeriod((long) 'u', (long) 1969, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = dateTimeField29.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        long long37 = dateTimeField34.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial38 = null;
        int int39 = dateTimeField34.getMinimumValue(readablePartial38);
        long long42 = dateTimeField34.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField34.getType();
        long long45 = dateTimeField34.remainder(432000000L);
        int int46 = dateTimeField34.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter47 = null;
        org.joda.time.format.PeriodParser periodParser48 = null;
        org.joda.time.format.PeriodFormatter periodFormatter49 = new org.joda.time.format.PeriodFormatter(periodPrinter47, periodParser48);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter51 = periodFormatter49.withParseType(periodType50);
        java.util.Locale locale52 = periodFormatter49.getLocale();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter49.withLocale(locale53);
        org.joda.time.format.PeriodPrinter periodPrinter56 = null;
        org.joda.time.format.PeriodParser periodParser57 = null;
        org.joda.time.format.PeriodFormatter periodFormatter58 = new org.joda.time.format.PeriodFormatter(periodPrinter56, periodParser57);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter58.withParseType(periodType59);
        java.util.Locale locale61 = periodFormatter58.getLocale();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter64 = periodFormatter58.withLocale(locale62);
        java.util.Locale locale65 = locale62.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter55.withLocale(locale65);
        int int67 = dateTimeField34.getMaximumShortTextLength(locale65);
        java.lang.String str68 = dateTimeField29.getAsShortText((long) (short) -1, locale65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTime2.toString("millis", locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 43200000L + "'", long37 == 43200000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 120000L + "'", long45 == 120000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodFormatter51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "70" + "'", str68, "70");
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.format.PeriodParser periodParser3 = periodFormatter2.getParser();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property28 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime13.withYear(1969);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfMonth();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTime dateTime34 = dateTime5.toDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.clockhourOfHalfday();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant45, periodType46);
        mutablePeriod47.setMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime39.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalDate localDate51 = dateTime39.toLocalDate();
        int int52 = localDate51.size();
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTime.Property property56 = dateTime55.era();
        org.joda.time.DateTime dateTime57 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.Duration duration60 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration60, readableInstant61, periodType62);
        mutablePeriod63.setMonths((int) '4');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.LocalDate localDate67 = dateTime55.toLocalDate();
        int int68 = localDate51.compareTo((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.format.PeriodPrinter periodPrinter70 = null;
        org.joda.time.format.PeriodParser periodParser71 = null;
        org.joda.time.format.PeriodFormatter periodFormatter72 = new org.joda.time.format.PeriodFormatter(periodPrinter70, periodParser71);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter72.withParseType(periodType73);
        java.util.Locale locale75 = periodFormatter72.getLocale();
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale76.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter72.withLocale(locale76);
        java.util.Locale locale79 = locale76.stripExtensions();
        java.lang.String str80 = locale79.getDisplayName();
        java.lang.String str81 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDate51, (int) (short) -1, locale79);
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder84 = builder82.setLocale(locale83);
        java.lang.String str85 = locale79.getDisplayLanguage(locale83);
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter2.withLocale(locale79);
        java.io.Writer writer87 = null;
        org.joda.time.Period period89 = org.joda.time.Period.seconds(59);
        org.joda.time.Period period91 = period89.minusYears((int) (byte) 100);
        int int92 = period91.getYears();
        org.joda.time.Period period94 = period91.withMillis((-27349920));
        org.joda.time.Period period96 = period94.withWeeks(26075160);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(writer87, (org.joda.time.ReadablePeriod) period96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(periodParser3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Italian (Italy)" + "'", str80, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-1" + "'", str81, "-1");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Italian" + "'", str85, "Italian");
        org.junit.Assert.assertNotNull(periodFormatter86);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-100) + "'", int92 == (-100));
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-03-02T14:51:21.745Z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfEra();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant35 = instant33.minus(100L);
        java.lang.String str36 = instant35.toString();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = duration39.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = duration39.toPeriodTo(readableInstant43);
        org.joda.time.Duration duration46 = duration39.withMillis((long) (short) 0);
        org.joda.time.Instant instant47 = instant35.plus((org.joda.time.ReadableDuration) duration39);
        java.lang.String str48 = duration39.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        int int70 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime71 = dateTime53.toDateTimeISO();
        org.joda.time.Interval interval72 = duration39.toIntervalTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime73 = dateTime30.plus((org.joda.time.ReadableDuration) duration39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime73.withMinuteOfHour((-2147483551));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483551 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str36, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0S" + "'", str48, "PT0S");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long11 = dateTimeField2.add(0L, 0L);
        boolean boolean12 = dateTimeField2.isSupported();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.minusSeconds((int) 'u');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime18.toString(dateTimeFormatter19);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.LocalDate localDate22 = dateTime18.toLocalDate();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period27 = duration26.toPeriod();
        int int28 = period27.getDays();
        org.joda.time.Period period30 = period27.plusDays(3);
        org.joda.time.Period period32 = period30.withWeeks((-1));
        int[] intArray33 = period30.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = dateTimeField2.add((org.joda.time.ReadablePartial) localDate22, (int) (byte) 100, intArray33, 86398999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:15:30.989+00:02" + "'", str20, "2022-02-22T07:15:30.989+00:02");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:13:30 UTC 2022");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        java.util.Locale locale6 = periodFormatter2.getLocale();
        boolean boolean7 = periodFormatter2.isParser();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMonths((int) '4');
        org.joda.time.Period period16 = mutablePeriod13.toPeriod();
        org.joda.time.ReadableInterval readableInterval17 = null;
        mutablePeriod13.setPeriod(readableInterval17);
        mutablePeriod13.setWeeks(69);
        org.joda.time.Duration duration22 = new org.joda.time.Duration(432000000L);
        java.lang.String str23 = duration22.toString();
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration22);
        mutablePeriod13.setYears((int) (byte) 0);
        mutablePeriod13.addMinutes((-100));
        mutablePeriod13.setSeconds((-2147483648));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT432000S" + "'", str23, "PT432000S");
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        java.util.Locale locale6 = new java.util.Locale("+00:00");
        boolean boolean7 = dateTime2.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.withMillisOfDay(4);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType28, chronology29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime10, periodType28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime10.toMutableDateTime(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime10.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant10, periodType11);
        mutablePeriod12.addDays((int) (short) 100);
        mutablePeriod12.add(0, 1, (int) (short) -1, 11, 11, 8, 11, (int) (byte) 0);
        mutablePeriod12.setMillis(2);
        int int26 = mutablePeriod12.getMillis();
        mutablePeriod12.setMonths(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = periodFormatter2.print((org.joda.time.ReadablePeriod) mutablePeriod12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.getHours();
        org.joda.time.Period period11 = period3.withWeeks(4);
        org.joda.time.Hours hours12 = org.joda.time.Hours.SEVEN;
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = period16.getFieldTypes();
        org.joda.time.Period period19 = period16.minusYears((int) (byte) 1);
        org.joda.time.Period period21 = period16.plusMonths((int) (byte) 0);
        int int22 = period16.size();
        org.joda.time.Period period24 = period16.plusYears(100);
        org.joda.time.Period period26 = period16.minusSeconds(292278993);
        org.joda.time.Period period27 = period16.negated();
        org.joda.time.Hours hours28 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Hours hours29 = hours12.plus(hours28);
        org.joda.time.DurationFieldType durationFieldType30 = hours28.getFieldType();
        int int31 = period3.get(durationFieldType30);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("era", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(69);
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffset(1L);
        long long15 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (-101L));
        long long17 = dateTimeZone7.convertUTCToLocal(4190400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-100), (int) (byte) 1, 1, (-102267), 999, (-102267), dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -102267 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 248399899L + "'", long15 == 248399899L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4438800000L + "'", long17 == 4438800000L);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(69, 9, 70, (-10));
        mutablePeriod4.setWeeks(1439);
        org.joda.time.Period period11 = new org.joda.time.Period(0, 1970, 69, (int) (short) 10);
        mutablePeriod4.add((org.joda.time.ReadablePeriod) period11);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) (byte) 0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        int int25 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property26 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime11.withYear(1969);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfDay();
        org.joda.time.Chronology chronology33 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-27349920L), (long) (-292275054), periodType2, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod35.setMinutes(366);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.get((long) 'a');
        org.joda.time.DurationField durationField5 = dateTimeField2.getRangeDurationField();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration8.isEqual(readableDuration10);
        org.joda.time.Duration duration13 = duration8.minus((long) 1);
        org.joda.time.Duration duration15 = duration13.minus((long) '4');
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        boolean boolean33 = dateTime31.isEqual(10L);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType36, chronology37);
        org.joda.time.PeriodType periodType39 = periodType36.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31, periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration22, periodType39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime18, periodType42);
        org.joda.time.TimeOfDay timeOfDay44 = dateTime18.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = timeOfDay44.toDateTime(readableInstant45);
        int int47 = timeOfDay44.size();
        int int48 = timeOfDay44.size();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.Interval interval52 = property51.toInterval();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = property51.getAsText(locale53);
        java.util.Locale locale58 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str59 = property51.getAsText(locale58);
        java.util.Locale.Category category60 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale61 = java.util.Locale.getDefault(category60);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category60, locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) timeOfDay44, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
        org.junit.Assert.assertEquals(locale58.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertTrue("'" + category60 + "' != '" + java.util.Locale.Category.FORMAT + "'", category60.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P0W" + "'", str64, "P0W");
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long14 = dateTimeField9.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.LocalTime localTime28 = dateTime17.toLocalTime();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period38 = mutablePeriod35.toPeriod();
        int[] intArray39 = period38.getValues();
        int[] intArray41 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime28, 0, intArray39, 3);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        long long48 = dateTimeField45.add(0L, (long) (short) 1);
        long long50 = dateTimeField45.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant58 = instant56.minus(100L);
        org.joda.time.Instant instant60 = instant58.plus((long) 100);
        org.joda.time.Instant instant62 = instant58.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) instant58);
        org.joda.time.LocalTime localTime64 = dateTime53.toLocalTime();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.Period period74 = mutablePeriod71.toPeriod();
        int[] intArray75 = period74.getValues();
        int[] intArray77 = dateTimeField45.addWrapField((org.joda.time.ReadablePartial) localTime64, 0, intArray75, 3);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime64);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime81 = instant80.toDateTime();
        org.joda.time.DateTime.Property property82 = dateTime81.era();
        org.joda.time.DateTime dateTime83 = dateTime81.withTimeAtStartOfDay();
        org.joda.time.Instant instant84 = dateTime81.toInstant();
        org.joda.time.TimeOfDay timeOfDay85 = dateTime81.toTimeOfDay();
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.days();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) timeOfDay85, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = timeOfDay85.getValue(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-120000L) + "'", long14 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 43200000L + "'", long48 == 43200000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-120000L) + "'", long50 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.joda.time.Days days1 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        mutablePeriod7.setMonths((int) '4');
        org.joda.time.Period period10 = mutablePeriod7.toPeriod();
        mutablePeriod7.setYears((int) (short) -1);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration15.toPeriodTo(readableInstant19);
        org.joda.time.Days days21 = duration15.toStandardDays();
        boolean boolean22 = mutablePeriod7.equals((java.lang.Object) days21);
        org.joda.time.Days days23 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.minutes();
        int int25 = days23.get(durationFieldType24);
        boolean boolean26 = days21.isGreaterThan(days23);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setHours((int) (byte) 100);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        int int37 = days35.get(durationFieldType36);
        mutablePeriod32.set(durationFieldType36, (int) 'x');
        int int40 = days23.get(durationFieldType36);
        boolean boolean41 = days1.isGreaterThan(days23);
        org.joda.time.PeriodType periodType42 = days1.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant43 = new org.joda.time.Instant((java.lang.Object) periodType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property27 = dateTime8.minuteOfDay();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        java.lang.String str32 = instant31.toString();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Instant instant43 = instant31.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = instant31.isSupported(dateTimeFieldType44);
        boolean boolean46 = dateTime8.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str48 = dateTimeFieldType47.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime8.withField(dateTimeFieldType47, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str32, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "monthOfYear" + "'", str48, "monthOfYear");
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) '4');
        org.joda.time.Period period3 = period1.plusDays(141022);
        int int4 = period3.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((-1));
        org.junit.Assert.assertNotNull(hours1);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("P100Y");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.Instant instant9 = instant7.plus((long) 100);
        org.joda.time.Instant instant11 = instant7.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.LocalTime localTime13 = dateTime2.toLocalTime();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (short) 1, (long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration16, periodType24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType28 = mutablePeriod26.getFieldType((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        boolean boolean5 = dateTime3.isEqual(10L);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        int int11 = period9.getMinutes();
        org.joda.time.Period period13 = period9.withDays((int) ' ');
        org.joda.time.Period period15 = period9.plusWeeks(10);
        org.joda.time.Period period17 = period9.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime18 = dateTime3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZone(dateTimeZone22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean30 = dateTime26.isSupported(dateTimeFieldType29);
        org.joda.time.DateTime.Property property31 = dateTime21.property(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime21.getZone();
        org.joda.time.LocalDate localDate33 = dateTime21.toLocalDate();
        org.joda.time.DateTime dateTime34 = dateTime18.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.DateTime dateTime39 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, readableInstant43, periodType44);
        mutablePeriod45.setMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        java.lang.Object obj49 = null;
        org.joda.time.Instant instant50 = new org.joda.time.Instant(obj49);
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        java.lang.String str52 = dateTimeZone51.toString();
        int int54 = dateTimeZone51.getOffset(1L);
        boolean boolean56 = dateTimeZone51.isStandardOffset(0L);
        org.joda.time.DateTime dateTime57 = dateTime37.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears(1969);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks(1439);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime66 = dateTime64.withTimeAtStartOfDay();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, readableInstant70, periodType71);
        mutablePeriod72.setMonths((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime64.plus((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.LocalDate localDate76 = dateTime64.toLocalDate();
        int int77 = localDate76.size();
        org.joda.time.DateTime dateTime78 = dateTime61.withFields((org.joda.time.ReadablePartial) localDate76);
        org.joda.time.Weeks weeks79 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localDate33, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.Chronology chronology80 = localDate33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds81 = org.joda.time.Seconds.secondsBetween(readablePartial0, (org.joda.time.ReadablePartial) localDate33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(weeks79);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.joda.time.Days days1 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        mutablePeriod7.setMonths((int) '4');
        org.joda.time.Period period10 = mutablePeriod7.toPeriod();
        mutablePeriod7.setYears((int) (short) -1);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration15.toPeriodTo(readableInstant19);
        org.joda.time.Days days21 = duration15.toStandardDays();
        boolean boolean22 = mutablePeriod7.equals((java.lang.Object) days21);
        org.joda.time.Days days23 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.minutes();
        int int25 = days23.get(durationFieldType24);
        boolean boolean26 = days21.isGreaterThan(days23);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setHours((int) (byte) 100);
        org.joda.time.Days days35 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        int int37 = days35.get(durationFieldType36);
        mutablePeriod32.set(durationFieldType36, (int) 'x');
        int int40 = days23.get(durationFieldType36);
        boolean boolean41 = days1.isGreaterThan(days23);
        org.joda.time.Days days42 = org.joda.time.Days.FIVE;
        int int43 = days42.getDays();
        org.joda.time.Days days44 = days1.minus(days42);
        org.joda.time.Duration duration45 = days42.toStandardDuration();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.joda.time.Period period2 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period4 = period2.plusWeeks((int) (byte) 1);
        int int5 = period2.size();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Period period7 = period2.minus(readablePeriod6);
        org.joda.time.Period period9 = period2.minusWeeks(2);
        org.joda.time.Period period11 = period9.withHours(1969);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) 0, periodType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod13.set(durationFieldType16, 720);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'eras'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period7.get(durationFieldType9);
        int int11 = period7.getWeeks();
        org.joda.time.Duration duration12 = period7.toStandardDuration();
        int int13 = period7.getMinutes();
        org.joda.time.Period period15 = period7.minusDays(141012);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) period15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime20.withHourOfDay(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Seconds seconds9 = weeks8.toStandardSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(seconds9);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval7);
        mutablePeriod3.setPeriod((int) (byte) 10, 1972, (-1), 10, 86399, 31, 7, 4);
        mutablePeriod3.addYears(52);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        boolean boolean16 = dateTime14.isEqual(10L);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime20 = dateTime14.plusDays(100);
        org.joda.time.LocalTime localTime21 = dateTime14.toLocalTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZone(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime.Property property35 = dateTime25.property(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime25.getZone();
        org.joda.time.LocalDateTime localDateTime37 = dateTime25.toLocalDateTime();
        java.lang.Object obj38 = null;
        org.joda.time.Instant instant39 = new org.joda.time.Instant(obj38);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        int int43 = dateTimeZone40.getOffset(1L);
        boolean boolean45 = dateTimeZone40.isStandardOffset(0L);
        java.lang.String str47 = dateTimeZone40.getNameKey((long) 1);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone40);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset((long) 365);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.withZone(dateTimeZone56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.era();
        org.joda.time.DateTime dateTime62 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean64 = dateTime60.isSupported(dateTimeFieldType63);
        org.joda.time.DateTime.Property property65 = dateTime55.property(dateTimeFieldType63);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime55.getZone();
        org.joda.time.LocalDateTime localDateTime67 = dateTime55.toLocalDateTime();
        boolean boolean68 = dateTimeZone50.isLocalDateTimeGap(localDateTime67);
        boolean boolean69 = dateTimeZone40.isLocalDateTimeGap(localDateTime67);
        org.joda.time.Hours hours70 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime37, (org.joda.time.ReadablePartial) localDateTime67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 120000 + "'", int52 == 120000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(hours70);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration10.isEqual(readableDuration12);
        org.joda.time.Duration duration15 = duration10.minus((long) 1);
        org.joda.time.Duration duration17 = duration15.minus((long) '4');
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime20, periodType44);
        java.lang.String str46 = period45.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = periodFormatter2.print((org.joda.time.ReadablePeriod) period45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.010S" + "'", str46, "PT0.010S");
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 1970);
        int int2 = mutablePeriod1.getWeeks();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Instant instant8 = dateTime5.toInstant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 1969);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType14, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) 0, periodType14, chronology17);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (short) 10, periodType20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant23.toInstant();
        org.joda.time.DateTime dateTime25 = instant24.toDateTimeISO();
        org.joda.time.Duration duration26 = period21.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period31 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period33 = period31.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = period33.toDurationTo(readableInstant34);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration38.toPeriodFrom(readableInstant39);
        org.joda.time.Duration duration41 = duration29.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration26.plus((org.joda.time.ReadableDuration) duration29);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds47 = duration46.toStandardSeconds();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant51 = instant49.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime52 = instant49.toMutableDateTimeISO();
        org.joda.time.Period period53 = duration46.toPeriodTo((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property70 = dateTime69.monthOfYear();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType75, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType75, chronology78);
        org.joda.time.PeriodType periodType80 = periodType75.withDaysRemoved();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime69, periodType75);
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant84 = instant83.toInstant();
        org.joda.time.DateTime dateTime85 = instant84.toDateTimeISO();
        org.joda.time.Period period86 = duration46.toPeriodTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration87 = duration46.toDuration();
        boolean boolean88 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration87);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType91, chronology92);
        org.joda.time.PeriodType periodType94 = periodType91.withWeeksRemoved();
        org.joda.time.PeriodType periodType95 = periodType91.withSecondsRemoved();
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableDuration) duration87, periodType95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod1, periodType95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(periodType95);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(27969129L);
        int int2 = dateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        int int12 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) 86399999, (-2147483647));
        org.joda.time.TimeOfDay timeOfDay18 = dateTime14.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        long long24 = dateTimeField21.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField21.getMinimumValue(readablePartial25);
        long long29 = dateTimeField21.add(0L, 69);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant37 = instant35.minus(100L);
        org.joda.time.Instant instant39 = instant37.plus((long) 100);
        org.joda.time.Instant instant41 = instant37.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.LocalTime localTime43 = dateTime32.toLocalTime();
        int int44 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        int int48 = mutablePeriod47.getDays();
        org.joda.time.PeriodType periodType49 = mutablePeriod47.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay18, (org.joda.time.ReadablePartial) localTime43, periodType49);
        java.lang.Object obj51 = null;
        org.joda.time.Instant instant52 = new org.joda.time.Instant(obj51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        java.lang.String str54 = dateTimeZone53.toString();
        boolean boolean56 = dateTimeZone53.isStandardOffset((long) '4');
        boolean boolean57 = dateTimeZone53.isFixed();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime59 = dateTime58.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int60 = localTime43.compareTo((org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 43200000L + "'", long24 == 43200000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2980800000L + "'", long29 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(23);
        org.joda.time.Duration duration2 = weeks1.toStandardDuration();
        org.joda.time.Seconds seconds3 = weeks1.toStandardSeconds();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(70, 366, 7, 720, 432, (int) 'x', 86399999, 1972);
        mutablePeriod8.clear();
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addMinutes(1969);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.setPeriod((long) 'a', chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        boolean boolean25 = interval20.contains((org.joda.time.ReadableInterval) interval24);
        java.lang.String str26 = interval20.toString();
        long long27 = interval20.getEndMillis();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTime dateTime48 = dateTime35.minusWeeks((int) (byte) 1);
        int int49 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property50 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime35.withYear(1969);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        boolean boolean54 = interval20.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Days days55 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval20);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval20);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = mutablePeriod5.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str26, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1672531080000L + "'", long27 == 1672531080000L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days55);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = property31.withMinimumValue();
        int int33 = property31.getMaximumValueOverall();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale34.getDisplayCountry();
        int int37 = property31.getMaximumShortTextLength(locale34);
        org.joda.time.DateTime dateTime38 = property31.withMaximumValue();
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant43 = instant41.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime44 = instant41.toMutableDateTimeISO();
        java.lang.Object obj45 = null;
        org.joda.time.Instant instant46 = new org.joda.time.Instant(obj45);
        boolean boolean47 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean48 = localTime39.equals((java.lang.Object) mutableDateTime44);
        org.joda.time.Chronology chronology49 = localTime39.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean51 = localTime39.isSupported(dateTimeFieldType50);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category52, locale54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("11");
        java.util.Locale.setDefault(category52, locale57);
        java.util.Locale locale59 = java.util.Locale.getDefault(category52);
        java.util.Locale locale60 = java.util.Locale.getDefault(category52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localTime39, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.FORMAT + "'", category52.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfDay();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.year();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology36.getZone();
        org.joda.time.DateTime dateTime41 = dateTime7.toDateTime(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((-8), (-32), 363120000, 120, 26075160, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        java.lang.String str23 = interval15.toString();
        java.lang.Object obj24 = null;
        boolean boolean25 = interval15.equals(obj24);
        org.joda.time.DateTime dateTime26 = interval15.getStart();
        boolean boolean27 = dateTime26.isEqualNow();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str21, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str23, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours4 = hours2.minus((int) (short) 10);
        boolean boolean5 = hours0.isGreaterThan(hours4);
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        boolean boolean9 = hours4.equals((java.lang.Object) dateTimeZone8);
        long long12 = dateTimeZone8.convertLocalToUTC((long) 26033472, true);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26033472L + "'", long12 == 26033472L);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days2 = days0.dividedBy((int) (byte) 1);
        org.joda.time.Days days4 = days0.dividedBy((int) (short) -1);
        java.lang.String str5 = days4.toString();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.Period period14 = mutablePeriod11.toPeriod();
        mutablePeriod11.setYears((int) (short) -1);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Days days25 = duration19.toStandardDays();
        boolean boolean26 = mutablePeriod11.equals((java.lang.Object) days25);
        org.joda.time.Days days27 = org.joda.time.Days.FIVE;
        boolean boolean28 = days25.isLessThan(days27);
        org.joda.time.PeriodType periodType29 = days25.getPeriodType();
        org.joda.time.Days days30 = days4.plus(days25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days31 = days30.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P-2147483648D" + "'", str5, "P-2147483648D");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(days30);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.secondsIn(readableInterval1);
        org.joda.time.Seconds seconds4 = seconds2.plus((int) (byte) -1);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = seconds4.plus(seconds5);
        org.joda.time.Seconds seconds7 = seconds4.negated();
        org.joda.time.PeriodType periodType8 = seconds4.getPeriodType();
        org.joda.time.Period period9 = new org.joda.time.Period(obj0, periodType8);
        int int10 = period9.getMonths();
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        java.lang.String str20 = interval18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        boolean boolean29 = interval24.contains((org.joda.time.ReadableInterval) interval28);
        boolean boolean30 = interval18.isBefore((org.joda.time.ReadableInterval) interval28);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutablePeriod mutablePeriod32 = mutablePeriod10.copy();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod32, "2022", 676);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str20, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod4 = hours3.toMutablePeriod();
        org.joda.time.Hours hours5 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours6 = hours3.minus(hours5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = hours6.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        int int10 = period8.getMinutes();
        org.joda.time.Period period12 = period8.withDays((int) ' ');
        org.joda.time.Period period14 = period8.plusWeeks(10);
        org.joda.time.Period period16 = period8.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        java.lang.String str18 = dateTime2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime2.withDayOfYear((-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:01:59.999+00:02" + "'", str18, "1970-01-01T00:01:59.999+00:02");
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period6 = period1.withFieldAdded(durationFieldType4, (int) (short) 100);
        org.joda.time.Period period8 = period1.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.joda.time.Period period22 = period1.withField(durationFieldType20, 19);
        org.joda.time.Period period24 = period22.plusWeeks(3);
        org.joda.time.Days days25 = period24.toStandardDays();
        org.joda.time.Period period27 = period24.withWeeks((-27349920));
        org.joda.time.Period period29 = period24.minusHours((int) (byte) 0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale locale13 = builder0.build();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        java.lang.String str23 = interval15.toString();
        long long24 = interval15.getStartMillis();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str21, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str23, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1640995080000L + "'", long24 == 1640995080000L);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        java.io.IOException iOException1 = new java.io.IOException("\u5348\u524d");
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.Hours hours5 = hours3.minus(1969);
        org.joda.time.Hours hours6 = hours3.negated();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = duration9.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration9.toPeriodTo(readableInstant13);
        org.joda.time.Duration duration17 = duration9.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Hours hours18 = duration17.toStandardHours();
        org.joda.time.Hours hours19 = hours3.plus(hours18);
        org.joda.time.Hours hours20 = hours3.negated();
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder0.addUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder16 = builder0.removeUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder0.setRegion("P292278993D");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: P292278993D [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.withHours(1);
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.seconds(7);
        org.joda.time.Seconds seconds10 = seconds8.dividedBy(1969);
        org.joda.time.Period period11 = period6.minus((org.joda.time.ReadablePeriod) seconds8);
        java.lang.Object obj12 = null;
        boolean boolean13 = period11.equals(obj12);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-22T07:11:13.646Z");
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMinimumValueOverall();
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7" + "'", str9, "7");
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        org.joda.time.DateTime dateTime23 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(248400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248400000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        java.lang.String str9 = dateTimeZone2.getShortName(181025280000000000L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        long long16 = dateTimeZone14.nextTransition(43200000L);
        long long18 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 43200000L);
        java.lang.String str19 = dateTimeZone2.toString();
        long long21 = dateTimeZone2.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 43200000L + "'", long16 == 43200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 43200000L + "'", long18 == 43200000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 12);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.minusYears((int) (byte) 1);
        org.joda.time.Period period11 = period6.plusMonths((int) (byte) 0);
        org.joda.time.Period period13 = period6.withMillis((int) '#');
        org.joda.time.Weeks weeks14 = period6.toStandardWeeks();
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks17 = weeks15.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = weeks15.getFieldType(0);
        org.joda.time.Period period21 = period6.withField(durationFieldType19, 0);
        org.joda.time.Period period23 = period6.multipliedBy((int) '4');
        org.joda.time.Duration duration24 = period23.toStandardDuration();
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 1, (int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Duration duration29 = duration24.minus(readableDuration28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.PeriodType periodType32 = periodType30.withWeeksRemoved();
        org.joda.time.Period period33 = duration24.toPeriod(periodType32);
        boolean boolean34 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration24);
        java.lang.String str35 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT12S" + "'", str35, "PT12S");
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Period period9 = interval3.toPeriod();
        org.joda.time.DateTime dateTime10 = interval3.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = new org.joda.time.Instant((java.lang.Object) interval3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) 1672657200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.setWeeks(7);
        int int13 = mutablePeriod5.getMinutes();
        mutablePeriod5.clear();
        mutablePeriod5.clear();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.minutes();
        int int24 = days22.get(durationFieldType23);
        mutablePeriod21.add(durationFieldType23, 8);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod21.add(readablePeriod27);
        mutablePeriod21.setMonths(12);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.setPeriod((-110L));
        mutablePeriod21.setSeconds((-100));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1339199999), (-52), 24, (-292275054));
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period3.plusWeeks(10);
        org.joda.time.Period period11 = period3.minusMillis((int) (short) 1);
        int int12 = period11.size();
        org.joda.time.Hours hours13 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours15 = hours13.multipliedBy(0);
        org.joda.time.Hours hours17 = hours13.dividedBy(69);
        org.joda.time.Period period18 = hours13.toPeriod();
        org.joda.time.Period period20 = period18.minusSeconds(11);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        boolean boolean34 = interval29.contains((org.joda.time.ReadableInterval) interval33);
        java.lang.String str35 = interval33.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        boolean boolean44 = interval39.contains((org.joda.time.ReadableInterval) interval43);
        boolean boolean45 = interval33.isBefore((org.joda.time.ReadableInterval) interval43);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.days();
        mutablePeriod25.set(durationFieldType47, 19);
        java.lang.String str50 = durationFieldType47.toString();
        int int51 = period20.get(durationFieldType47);
        int int52 = period11.indexOf(durationFieldType47);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str35, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "days" + "'", str50, "days");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.US;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.lang.String str4 = locale1.getUnicodeLocaleType("AM");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale1.getDisplayScript(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, chronology1);
        org.joda.time.Period period4 = period2.plusHours(7);
        int int5 = period4.getHours();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0, periodType8, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = periodType8.indexOf(durationFieldType13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType8);
        boolean boolean16 = periodFormatter15.isPrinter();
        org.joda.time.format.PeriodParser periodParser17 = periodFormatter15.getParser();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        org.joda.time.Days days24 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        int int26 = days24.get(durationFieldType25);
        mutablePeriod23.add(durationFieldType25, 8);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutablePeriod23.add(readablePeriod29);
        int int31 = mutablePeriod23.getMillis();
        mutablePeriod23.addDays(292278993);
        mutablePeriod23.setYears(19);
        mutablePeriod23.setPeriod((int) 'a', (int) (byte) 0, 169, 1970, 0, (int) 'a', 141012, (int) (byte) 10);
        int int45 = mutablePeriod23.getMillis();
        mutablePeriod23.addSeconds(86398999);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = periodFormatter15.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod23, "PT-2147483551M", (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(periodParser17);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        org.joda.time.Instant instant17 = instant15.plus((long) 100);
        org.joda.time.Instant instant19 = instant15.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) instant15);
        org.joda.time.LocalTime localTime21 = dateTime10.toLocalTime();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.Period period31 = mutablePeriod28.toPeriod();
        int[] intArray32 = period31.getValues();
        int[] intArray34 = dateTimeField2.addWrapField((org.joda.time.ReadablePartial) localTime21, 0, intArray32, 3);
        org.joda.time.format.PeriodPrinter periodPrinter36 = null;
        org.joda.time.format.PeriodParser periodParser37 = null;
        org.joda.time.format.PeriodFormatter periodFormatter38 = new org.joda.time.format.PeriodFormatter(periodPrinter36, periodParser37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withParseType(periodType39);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType45, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType45, chronology48);
        org.joda.time.PeriodType periodType50 = periodType45.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter51 = periodFormatter40.withParseType(periodType50);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("1");
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter40.withLocale(locale53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.format.PeriodFormatter periodFormatter56 = periodFormatter40.withParseType(periodType55);
        org.joda.time.format.PeriodPrinter periodPrinter57 = periodFormatter56.getPrinter();
        java.lang.Object obj58 = null;
        org.joda.time.Instant instant59 = new org.joda.time.Instant(obj58);
        org.joda.time.DateTimeZone dateTimeZone60 = instant59.getZone();
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone60);
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = dateTimeZone60.getShortName(100L, locale64);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.String str70 = dateTimeZone60.getShortName((long) (short) -1, locale68);
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str76 = locale71.getDisplayCountry(locale75);
        java.lang.String str77 = locale75.getDisplayVariant();
        java.lang.String str78 = locale68.getDisplayVariant(locale75);
        java.lang.String str79 = locale75.getVariant();
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter56.withLocale(locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTimeField2.getAsShortText(433, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 433");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-120000L) + "'", long7 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodFormatter51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter54);
        org.junit.Assert.assertNotNull(periodFormatter56);
        org.junit.Assert.assertNull(periodPrinter57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italy" + "'", str76, "Italy");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(periodFormatter80);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        int int15 = durationField12.getDifference((long) 1970, 1645514015L);
        int int18 = durationField12.getDifference(40118716L, 0L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-19) + "'", int15 == (-19));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        org.joda.time.Period period13 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (byte) 10);
        mutablePeriod5.setPeriod((long) 23, (long) 23);
        mutablePeriod5.addMonths((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType22 = mutablePeriod5.getFieldType(432);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.joda.time.Period period8 = new org.joda.time.Period((-100), 363120000, 28995, 141012, (int) 'a', (int) '4', 24, (-1));
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getEra();
        org.joda.time.Instant instant3 = dateTime1.toInstant();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(instant3);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        java.lang.String str16 = instant15.toString();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Duration duration26 = duration19.withMillis((long) (short) 0);
        org.joda.time.Instant instant27 = instant15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime29 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 2);
        org.joda.time.DateTime dateTime31 = dateTime29.plus((long) 3);
        org.joda.time.DateTime dateTime33 = dateTime29.withMinuteOfHour((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond((-117));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -117 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str16, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        org.joda.time.Weeks weeks4 = period3.toStandardWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsIn(readableInterval16);
        org.joda.time.Seconds seconds19 = seconds17.plus((int) (byte) -1);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = seconds19.plus(seconds20);
        org.joda.time.Duration duration22 = seconds19.toStandardDuration();
        boolean boolean23 = seconds14.isGreaterThan(seconds19);
        org.joda.time.PeriodType periodType24 = seconds19.getPeriodType();
        int int25 = seconds19.getSeconds();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        mutablePeriod5.add(3599999000L, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyear();
        java.lang.String str24 = dateTimeField23.toString();
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[weekyear]" + "'", str24, "DateTimeField[weekyear]");
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType9, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) 0, periodType9, chronology12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        int int15 = periodType9.indexOf(durationFieldType14);
        org.joda.time.format.PeriodFormatter periodFormatter16 = periodFormatter3.withParseType(periodType9);
        boolean boolean17 = periodFormatter16.isPrinter();
        org.joda.time.format.PeriodParser periodParser18 = periodFormatter16.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = org.joda.time.Period.parse("YearDay", periodFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(periodParser18);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        mutablePeriod5.add(durationFieldType8, 8);
        org.joda.time.PeriodType periodType11 = mutablePeriod5.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((java.lang.Object) mutablePeriod5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("inglese");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"inglese\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 70);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(59L);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration6 = duration4.toDuration();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        boolean boolean9 = dateTime7.isEqual(10L);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime13 = dateTime7.plusHours(1969);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        java.lang.String str15 = chronology14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1439, 0, 3, (int) ' ', (-100), chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+00:02]" + "'", str15, "ISOChronology[+00:02]");
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("Januar");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Januar\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime2.era();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long26 = dateTimeField23.add(0L, (long) (short) 1);
        boolean boolean28 = dateTimeField23.isLeap(10L);
        int int30 = dateTimeField23.get((-1L));
        long long32 = dateTimeField23.remainder((long) (byte) 0);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        int int34 = dateTimeField23.getMaximumShortTextLength(locale33);
        java.lang.String str35 = property19.getAsText(locale33);
        org.joda.time.DateTime dateTime36 = property19.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField37 = property19.getRangeDurationField();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        boolean boolean48 = dateTime46.isEqual(10L);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType51, chronology52);
        org.joda.time.PeriodType periodType54 = periodType51.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime46, periodType54);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes59 = minutes57.minus((int) (short) -1);
        boolean boolean60 = minutes56.isGreaterThan(minutes57);
        org.joda.time.Minutes minutes61 = org.joda.time.Minutes.TWO;
        boolean boolean62 = minutes56.isLessThan(minutes61);
        org.joda.time.DateTime dateTime63 = dateTime46.plus((org.joda.time.ReadablePeriod) minutes56);
        org.joda.time.DateTime dateTime64 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property65 = dateTime46.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int66 = property19.getDifference((org.joda.time.ReadableInstant) dateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 43200000L + "'", long26 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 120000L + "'", long32 == 120000L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dopo Cristo" + "'", str35, "dopo Cristo");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        java.util.Locale locale9 = locale6.stripExtensions();
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italian (Italy)" + "'", str10, "Italian (Italy)");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((int) (short) 0);
        org.joda.time.Hours hours2 = seconds1.toStandardHours();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale9.getVariant();
        int int11 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DurationField durationField12 = dateTimeField2.getLeapDurationField();
        java.lang.String str14 = dateTimeField2.getAsShortText((long) 7);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration17.isEqual(readableDuration19);
        org.joda.time.Duration duration22 = duration17.minus((long) 1);
        org.joda.time.Duration duration24 = duration22.minus((long) '4');
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        boolean boolean42 = dateTime40.isEqual(10L);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime40, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31, periodType48);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        org.joda.time.TimeOfDay timeOfDay53 = dateTime27.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = timeOfDay53.toDateTime(readableInstant54);
        int int56 = timeOfDay53.size();
        int int58 = timeOfDay53.getValue(3);
        int int59 = timeOfDay53.size();
        int int60 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay53);
        org.joda.time.ReadablePartial readablePartial61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours62 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay53, readablePartial61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AM" + "'", str14, "AM");
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 999 + "'", int58 == 999);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.DateTime dateTime9 = instant8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(10);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType15, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) 0, periodType15, chronology18);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (short) 10, periodType21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTime dateTime26 = instant25.toDateTimeISO();
        org.joda.time.Duration duration27 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period32 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period34 = period32.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period34.toDurationTo(readableInstant35);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = duration39.toPeriodFrom(readableInstant40);
        org.joda.time.Duration duration42 = duration30.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = duration27.plus((org.joda.time.ReadableDuration) duration30);
        mutablePeriod19.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int57 = mutablePeriod56.getDays();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.Interval interval67 = property66.toInterval();
        boolean boolean68 = interval63.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        mutablePeriod56.setPeriod((long) 'u', (long) 1969, chronology69);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 100, chronology69);
        mutablePeriod19.setPeriod((long) 1, (long) 69, chronology69);
        org.joda.time.DateTimeField dateTimeField73 = chronology69.year();
        org.joda.time.DurationField durationField74 = chronology69.seconds();
        org.joda.time.DateTimeField dateTimeField75 = chronology69.dayOfYear();
        org.joda.time.DateTime dateTime76 = dateTime11.toDateTime(chronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((int) (short) 100, 26121540, (-2147483647), 1972, 141012, (-2147483551), chronology69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        int int9 = weeks8.size();
        org.joda.time.Weeks weeks11 = weeks8.minus(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType12.getDurationType();
        boolean boolean15 = weeks8.isSupported(durationFieldType14);
        java.lang.String str16 = durationFieldType14.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyearOfCentury" + "'", str13, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyears" + "'", str16, "weekyears");
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Chinese (China)' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Days days38 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        int int39 = days38.size();
        org.joda.time.Days days40 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.minutes();
        int int42 = days40.get(durationFieldType41);
        org.joda.time.MutablePeriod mutablePeriod43 = days40.toMutablePeriod();
        org.joda.time.Days days45 = days40.multipliedBy((int) (byte) 1);
        int int46 = days45.size();
        org.joda.time.Days days47 = days38.minus(days45);
        int int48 = days45.getDays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = chronology62.millis();
        long long70 = durationField67.subtract(8380845299L, 63808214400000L);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = durationField67.getValue(6091718400000L, (-2592000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6091718400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-63799833554701L) + "'", long70 == (-63799833554701L));
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = duration9.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration9.toPeriodTo(readableInstant13);
        org.joda.time.Duration duration17 = duration9.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.DateTime dateTime20 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration17, 23);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration25 = null;
        boolean boolean26 = duration23.isEqual(readableDuration25);
        org.joda.time.Duration duration28 = duration23.minus((long) 1);
        org.joda.time.Duration duration30 = duration28.minus((long) '4');
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        boolean boolean48 = dateTime46.isEqual(10L);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType51, chronology52);
        org.joda.time.PeriodType periodType54 = periodType51.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime46, periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration37, periodType54);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime33, periodType57);
        org.joda.time.TimeOfDay timeOfDay59 = dateTime33.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = timeOfDay59.toDateTime(readableInstant60);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant65 = instant63.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime66 = instant63.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime67 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        boolean boolean69 = dateTime67.isSupported(dateTimeFieldType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime73 = instant72.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.withZoneRetainFields(dateTimeZone74);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime78 = instant77.toDateTime();
        org.joda.time.DateTime.Property property79 = dateTime78.era();
        org.joda.time.DateTime dateTime80 = dateTime78.withTimeAtStartOfDay();
        org.joda.time.Duration duration83 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration83, readableInstant84, periodType85);
        mutablePeriod86.setMonths((int) '4');
        org.joda.time.DateTime dateTime89 = dateTime78.plus((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.joda.time.DateTime dateTime91 = dateTime78.minusWeeks((int) (byte) 1);
        int int92 = dateTime75.compareTo((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime.Property property93 = dateTime78.minuteOfHour();
        org.joda.time.DateTime dateTime95 = dateTime78.withYear(1969);
        org.joda.time.Chronology chronology96 = dateTime95.getChronology();
        org.joda.time.DurationField durationField97 = durationFieldType70.getField(chronology96);
        boolean boolean98 = dateTimeFieldType68.isSupported(chronology96);
        org.joda.time.Period period99 = duration17.toPeriod(chronology96);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        boolean boolean6 = property5.isLeap();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        mutablePeriod5.add(durationFieldType10, (int) (byte) 0);
        mutablePeriod5.addMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getRangeDurationType();
        int int17 = mutablePeriod5.get(durationFieldType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property40 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime25.withYear(1969);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.hourOfHalfday();
        org.joda.time.DurationField durationField47 = durationFieldType16.getField(chronology43);
        long long50 = durationField47.getValueAsLong((long) 19, (long) 999);
        java.lang.String str51 = durationField47.toString();
        java.lang.String str52 = durationField47.getName();
        long long55 = durationField47.subtract(34528799433058674L, (-100));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DurationField[weekyears]" + "'", str51, "DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyears" + "'", str52, "weekyears");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 34531955279458674L + "'", long55 == 34531955279458674L);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType2.withSecondsRemoved();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.Period period14 = mutablePeriod11.toPeriod();
        mutablePeriod11.setYears((int) (short) -1);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Days days25 = duration19.toStandardDays();
        boolean boolean26 = mutablePeriod11.equals((java.lang.Object) days25);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        int int29 = days27.get(durationFieldType28);
        boolean boolean30 = days25.isGreaterThan(days27);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, readableInstant34, periodType35);
        mutablePeriod36.setHours((int) (byte) 100);
        org.joda.time.Days days39 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.minutes();
        int int41 = days39.get(durationFieldType40);
        mutablePeriod36.set(durationFieldType40, (int) 'x');
        int int44 = days27.get(durationFieldType40);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withZoneRetainFields(dateTimeZone48);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant58, periodType59);
        mutablePeriod60.setMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime52.plus((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTime dateTime65 = dateTime52.minusWeeks((int) (byte) 1);
        int int66 = dateTime49.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property67 = dateTime52.minuteOfHour();
        org.joda.time.DateTime dateTime69 = dateTime52.withYear(1969);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.year();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.centuryOfEra();
        org.joda.time.DurationField durationField74 = durationFieldType40.getField(chronology70);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 100, 1672963800000L, periodType5, chronology70);
        org.joda.time.DateTimeField dateTimeField76 = chronology70.minuteOfDay();
        long long80 = chronology70.add(0L, 70L, 69);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 4830L + "'", long80 == 4830L);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds((-8));
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        java.lang.String str17 = property16.getAsText();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7" + "'", str17, "7");
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.secondsIn(readableInterval1);
        org.joda.time.Seconds seconds4 = seconds2.plus((int) (byte) -1);
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds6 = seconds4.plus(seconds5);
        org.joda.time.Seconds seconds7 = seconds4.negated();
        org.joda.time.PeriodType periodType8 = seconds4.getPeriodType();
        org.joda.time.Period period9 = new org.joda.time.Period(obj0, periodType8);
        org.joda.time.Days days10 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days12 = days10.dividedBy((int) (byte) 1);
        org.joda.time.Days days14 = days10.dividedBy((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        boolean boolean28 = interval23.contains((org.joda.time.ReadableInterval) interval27);
        java.lang.String str29 = interval27.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        boolean boolean38 = interval33.contains((org.joda.time.ReadableInterval) interval37);
        boolean boolean39 = interval27.isBefore((org.joda.time.ReadableInterval) interval37);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.days();
        mutablePeriod19.set(durationFieldType41, 19);
        java.lang.String str44 = durationFieldType41.toString();
        int int45 = days14.get(durationFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = period9.withFieldAdded(durationFieldType41, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str29, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "days" + "'", str44, "days");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2147483648) + "'", int45 == (-2147483648));
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.DateTime dateTime36 = dateTime6.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime38 = dateTime6.plus((long) (-2147483648));
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray43 = period42.getFieldTypes();
        org.joda.time.Period period45 = period42.minusYears((int) (byte) 1);
        org.joda.time.Period period47 = period42.plusMonths((int) (byte) 0);
        org.joda.time.Period period49 = period42.withMillis((int) '#');
        org.joda.time.Weeks weeks50 = period42.toStandardWeeks();
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks53 = weeks51.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = weeks51.getFieldType(0);
        org.joda.time.Period period57 = period42.withField(durationFieldType55, 0);
        org.joda.time.Period period59 = period42.multipliedBy((int) '4');
        org.joda.time.Duration duration60 = period59.toStandardDuration();
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant64 = instant62.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime65 = instant62.toMutableDateTimeISO();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.DateTime.Property property69 = dateTime67.weekOfWeekyear();
        boolean boolean70 = mutableDateTime65.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime72 = dateTime67.withMillisOfDay(0);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime74 = dateTime6.minus((org.joda.time.ReadableDuration) duration60);
        int int75 = dateTime6.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldTypeArray43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 999 + "'", int75 == 999);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-101L));
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        boolean boolean14 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration10);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime24.minusWeeks((int) (byte) 1);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property39 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime24.withYear(1969);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfHalfday();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology42);
        mutablePeriod1.setPeriod((long) 8, chronology42);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        java.lang.String str52 = dateTimeZone49.getName(8380845299L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) chronology42, dateTimeZone49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:02" + "'", str52, "+00:02");
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-27349920L), dateTimeZone3);
        java.util.TimeZone timeZone7 = dateTimeZone3.toTimeZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        mutablePeriod23.setMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime28 = dateTime15.minusWeeks((int) (byte) 1);
        int int29 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property30 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime15.withYear(1969);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.year();
        org.joda.time.DurationField durationField37 = chronology33.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) timeZone7, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.SimpleTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.DateTime dateTime36 = dateTime6.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTime dateTime38 = dateTime6.plus((long) (-2147483648));
        boolean boolean39 = dateTime6.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) (byte) 10);
        mutablePeriod1.setSeconds(7);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant7, periodType8);
        mutablePeriod9.setMonths((int) '4');
        org.joda.time.Period period12 = mutablePeriod9.toPeriod();
        org.joda.time.ReadableInterval readableInterval13 = null;
        mutablePeriod9.setPeriod(readableInterval13);
        mutablePeriod9.setWeeks(69);
        mutablePeriod9.addDays((int) 'x');
        mutablePeriod9.setYears((int) (short) 100);
        mutablePeriod9.clear();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setHours((int) (byte) 100);
        org.joda.time.Days days30 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.minutes();
        int int32 = days30.get(durationFieldType31);
        mutablePeriod27.set(durationFieldType31, (int) 'x');
        mutablePeriod9.set(durationFieldType31, 8);
        mutablePeriod1.add(durationFieldType31, (-19));
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.joda.time.Days days1 = org.joda.time.Days.days((-59));
        int int2 = days1.getDays();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-59) + "'", int2 == (-59));
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 8, chronology2);
        mutablePeriod3.addSeconds(1972);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withParseType(periodType7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime.Property property12 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime.Property property13 = dateTime10.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-22T07:11:13.646Z");
        int int16 = property13.getMaximumShortTextLength(locale15);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod19 = periodFormatter2.parseMutablePeriod("PT-124271280000S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(periodFormatter17);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(11, 28995, (-52), (-41297762));
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.DateTime.Property property18 = dateTime8.yearOfEra();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime21 = dateTime8.minusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime21.withDate((int) (short) 100, 9, 10);
        org.joda.time.DateTime dateTime27 = dateTime21.minusMinutes(70);
        org.joda.time.DateTime dateTime29 = dateTime21.minusMillis(24);
        int int30 = dateTime29.getDayOfMonth();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(2, 86399999, 1969, 0, 248400000, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248400000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(432000000L);
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType6, chronology7);
        org.joda.time.PeriodType periodType9 = periodType6.withWeeksRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType15, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) 0, periodType15, chronology18);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (short) 10, periodType21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTime dateTime26 = instant25.toDateTimeISO();
        org.joda.time.Duration duration27 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period32 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period34 = period32.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period34.toDurationTo(readableInstant35);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = duration39.toPeriodFrom(readableInstant40);
        org.joda.time.Duration duration42 = duration30.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = duration27.plus((org.joda.time.ReadableDuration) duration30);
        mutablePeriod19.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int57 = mutablePeriod56.getDays();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.Interval interval67 = property66.toInterval();
        boolean boolean68 = interval63.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        mutablePeriod56.setPeriod((long) 'u', (long) 1969, chronology69);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 100, chronology69);
        mutablePeriod19.setPeriod((long) 1, (long) 69, chronology69);
        org.joda.time.DurationField durationField73 = chronology69.hours();
        org.joda.time.Period period74 = duration3.toPeriod(periodType10, chronology69);
        org.joda.time.Period period75 = new org.joda.time.Period(12000L, periodType10);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period5.getFieldTypes();
        org.joda.time.Period period8 = period5.minusYears((int) (byte) 1);
        org.joda.time.Period period10 = period5.plusMonths((int) (byte) 0);
        org.joda.time.Period period12 = period5.withMillis((int) '#');
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType16, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) 0, periodType16, chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        int int22 = periodType16.indexOf(durationFieldType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType16.getFieldType((int) (short) 1);
        int int25 = period12.get(durationFieldType24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDayTime();
        int int27 = periodType26.size();
        org.joda.time.PeriodType periodType28 = periodType26.withSecondsRemoved();
        org.joda.time.Period period29 = period12.normalizedStandard(periodType26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(840000L, 4438800000L, periodType26);
        int int31 = mutablePeriod30.getDays();
        org.joda.time.Period period33 = org.joda.time.Period.hours(1969);
        org.joda.time.Period period35 = period33.minusDays(0);
        org.joda.time.DurationFieldType durationFieldType37 = period35.getFieldType((int) (byte) 0);
        int int38 = mutablePeriod30.indexOf(durationFieldType37);
        int int39 = mutablePeriod30.getSeconds();
        mutablePeriod30.setMinutes((-2147483647));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        boolean boolean5 = property2.isLeap();
        org.joda.time.DateTime dateTime6 = property2.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = dateTimeZone11.getShortName(100L, locale15);
        java.lang.String str18 = locale15.getScript();
        boolean boolean19 = locale15.hasExtensions();
        java.util.Set<java.lang.String> strSet20 = locale15.getUnicodeLocaleKeys();
        java.lang.String str21 = locale15.getISO3Country();
        int int22 = property7.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.Period period9 = minutes1.toPeriod();
        org.joda.time.Period period11 = period9.plusDays(120);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant12 = new org.joda.time.Instant((java.lang.Object) period11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(62135596800000L);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType11, chronology12);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 11, 0L, periodType11);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, readableInstant6, periodType11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        boolean boolean24 = interval19.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.seconds();
        org.joda.time.DurationField durationField29 = chronology25.centuries();
        long long33 = chronology25.add(1672531080000L, (long) 'u', (-10));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) periodType11, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1672531078830L + "'", long33 == 1672531078830L);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2021-11-14T07:14:25.501Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PT0S");
        org.joda.time.Days days2 = hours1.toStandardDays();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = interval3.toPeriod(periodType15);
        org.joda.time.Period period18 = period16.plusHours((-1339199999));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.Duration duration4 = new org.joda.time.Duration(432000000L);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        int int25 = dateTimeZone22.getOffset(1L);
        boolean boolean27 = dateTimeZone22.isStandardOffset(0L);
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(1969);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType35, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType35, chronology38);
        org.joda.time.PeriodType periodType40 = periodType35.withDaysRemoved();
        org.joda.time.Period period41 = duration4.toPeriodTo((org.joda.time.ReadableInstant) dateTime30, periodType35);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Instant instant47 = dateTime44.toInstant();
        org.joda.time.DateTime dateTime49 = dateTime44.withMillis((long) '4');
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period51 = duration4.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter2.withParseType(periodType50);
        org.joda.time.Seconds seconds53 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType54 = seconds53.getFieldType();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = duration57.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Period period62 = duration57.toPeriodTo(readableInstant61);
        org.joda.time.Duration duration65 = duration57.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds66 = duration65.toStandardSeconds();
        org.joda.time.Seconds seconds67 = seconds53.plus(seconds66);
        org.joda.time.MutablePeriod mutablePeriod68 = seconds67.toMutablePeriod();
        mutablePeriod68.setYears(59);
        mutablePeriod68.setPeriod(40118716L);
        int int73 = mutablePeriod68.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = periodFormatter52.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod68, "it-IT", 69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT432000S" + "'", str5, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(seconds66);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Instant instant6 = dateTime3.toInstant();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime3.toTimeOfDay();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Instant instant13 = dateTime10.toInstant();
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        org.joda.time.DateTime dateTime17 = dateTime10.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds18 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property19 = dateTime3.secondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime3.era();
        int int21 = property20.getMinimumValue();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        int int23 = property20.getMaximumTextLength(locale22);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Minutes minutes1 = null;
        org.joda.time.Minutes minutes2 = minutes0.plus(minutes1);
        org.joda.time.Minutes minutes4 = minutes0.plus(24);
        org.joda.time.Minutes minutes5 = minutes4.negated();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        mutablePeriod14.setMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime19 = dateTime6.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        java.lang.Object obj22 = null;
        org.joda.time.Instant instant23 = new org.joda.time.Instant(obj22);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getName((long) 10);
        java.lang.String str29 = dateTimeZone24.getName((long) 8);
        int int31 = dateTimeZone24.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime19.withZone(dateTimeZone24);
        java.lang.String str33 = dateTimeZone24.getID();
        java.lang.String str35 = dateTimeZone24.getName((long) 'x');
        boolean boolean36 = dateTimeZone24.isFixed();
        java.util.TimeZone timeZone37 = dateTimeZone24.toTimeZone();
        boolean boolean38 = languageRange1.equals((java.lang.Object) dateTimeZone24);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "days" + "'", str3, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        mutablePeriod2.setMinutes(6);
        mutablePeriod2.setHours(69);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.TimeOfDay timeOfDay35 = dateTime34.toTimeOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateMidnight dateMidnight40 = dateTime36.toDateMidnight();
        int int41 = dateTime36.getDayOfYear();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 365 + "'", int41 == 365);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        java.util.Locale locale7 = new java.util.Locale("+00:00");
        boolean boolean8 = dateTime3.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.withMillisOfDay(4);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType29, chronology30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime11, periodType29);
        boolean boolean35 = dateTime11.isEqual(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime11.getZone();
        long long38 = dateTimeZone36.previousTransition((-43200000L));
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 'x', dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals(locale7.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-43200000L) + "'", long38 == (-43200000L));
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Period period10 = period7.plusMonths((int) (short) 100);
        org.joda.time.Period period12 = period10.minusHours((int) (byte) -1);
        java.lang.String str13 = period12.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P100MT1H" + "'", str13, "P100MT1H");
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        boolean boolean16 = dateTime14.isEqual(10L);
        org.joda.time.DateTime dateTime18 = dateTime14.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime20 = dateTime14.plusDays(100);
        org.joda.time.LocalTime localTime21 = dateTime14.toLocalTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        long long28 = dateTimeField25.add(0L, (long) (short) 1);
        long long30 = dateTimeField25.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant38 = instant36.minus(100L);
        org.joda.time.Instant instant40 = instant38.plus((long) 100);
        org.joda.time.Instant instant42 = instant38.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) instant38);
        org.joda.time.LocalTime localTime44 = dateTime33.toLocalTime();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        mutablePeriod51.setMonths((int) '4');
        org.joda.time.Period period54 = mutablePeriod51.toPeriod();
        int[] intArray55 = period54.getValues();
        int[] intArray57 = dateTimeField25.addWrapField((org.joda.time.ReadablePartial) localTime44, 0, intArray55, 3);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField60 = localTime44.getField(365);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 365");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 43200000L + "'", long28 == 43200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes58);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.Days days5 = org.joda.time.Days.FIVE;
        org.joda.time.DateTime dateTime6 = dateTime4.plus((org.joda.time.ReadablePeriod) days5);
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Instant instant15 = dateTime12.toInstant();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTime dateTime19 = dateTime12.withDurationAdded(0L, (int) 'a');
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = period23.getFieldTypes();
        org.joda.time.Period period26 = period23.minusYears((int) (byte) 1);
        org.joda.time.Period period28 = period23.plusMonths((int) (byte) 0);
        int int29 = period23.size();
        org.joda.time.Period period31 = period23.plusYears(100);
        org.joda.time.Period period33 = period23.minusSeconds(292278993);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType38);
        mutablePeriod39.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        mutablePeriod39.add(durationFieldType42, 8);
        boolean boolean45 = period23.isSupported(durationFieldType42);
        org.joda.time.DateTime dateTime47 = dateTime12.withFieldAdded(durationFieldType42, (-2147483648));
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime12.toDateTime(chronology48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, readableInstant59, periodType60);
        mutablePeriod61.setMonths((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime53.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTime dateTime66 = dateTime53.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property67 = dateTime66.monthOfYear();
        org.joda.time.DateTime.Property property68 = dateTime66.weekyear();
        java.lang.Object obj69 = null;
        org.joda.time.Instant instant70 = new org.joda.time.Instant(obj69);
        org.joda.time.DateTimeZone dateTimeZone71 = instant70.getZone();
        java.lang.String str72 = dateTimeZone71.toString();
        java.lang.String str74 = dateTimeZone71.getName((long) 10);
        java.lang.String str76 = dateTimeZone71.getName((long) 8);
        int int78 = dateTimeZone71.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime79 = dateTime66.withZone(dateTimeZone71);
        java.lang.String str80 = dateTimeZone71.getID();
        java.lang.String str81 = dateTimeZone71.toString();
        boolean boolean82 = dateTimeZone71.isFixed();
        org.joda.time.DateTime dateTime83 = dateTime4.withZoneRetainFields(dateTimeZone71);
        int int84 = dateTime83.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 53 + "'", int84 == 53);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.joda.time.Period period8 = new org.joda.time.Period(363120000, 24, 169, 2022, (int) 'a', 10, (-41297762), (-292275054));
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        java.lang.String str28 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfDay();
        long long32 = dateTimeField29.add((long) '4', (long) 25985711);
        org.joda.time.format.PeriodPrinter periodPrinter35 = null;
        org.joda.time.format.PeriodParser periodParser36 = null;
        org.joda.time.format.PeriodFormatter periodFormatter37 = new org.joda.time.format.PeriodFormatter(periodPrinter35, periodParser36);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withParseType(periodType38);
        java.util.Locale locale40 = periodFormatter37.getLocale();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter44 = null;
        org.joda.time.format.PeriodParser periodParser45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = new org.joda.time.format.PeriodFormatter(periodPrinter44, periodParser45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter48 = periodFormatter46.withParseType(periodType47);
        java.util.Locale locale49 = periodFormatter46.getLocale();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter46.withLocale(locale50);
        java.util.Locale locale53 = locale50.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter43.withLocale(locale53);
        java.util.Locale locale55 = periodFormatter43.getLocale();
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        java.lang.String str57 = locale55.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeField29.set((-26179201000L), "1969-12-31", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-31\" for clockhourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 93548559600052L + "'", long32 == 93548559600052L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodFormatter48);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str57, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '4');
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.Object obj8 = locale7.clone();
        boolean boolean9 = dateTimeZone2.equals(obj8);
        int int11 = dateTimeZone2.getStandardOffset((-26151850080L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "ko");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = interval3.toPeriod();
        org.joda.time.Interval interval21 = interval3.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfHalfday();
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        int int44 = dateTimeField42.getLeapAmount((long) 100);
        int int46 = dateTimeField42.getLeapAmount((long) (byte) 100);
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.lang.String str49 = dateTimeField42.getAsText(0, locale48);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = property54.withMinimumValue();
        int int56 = property54.getMaximumValueOverall();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = property54.getMaximumShortTextLength(locale57);
        java.lang.String str61 = dateTimeField42.getAsShortText(0L, locale57);
        java.lang.String str62 = locale38.getDisplayName(locale57);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeField32.set(1640995080000L, "PT432000S", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT432000S\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5348\u524d" + "'", str49, "\u5348\u524d");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AM" + "'", str61, "AM");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "HI! (hi!)" + "'", str62, "HI! (hi!)");
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        mutablePeriod5.setDays(100);
        mutablePeriod5.add(8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4', (int) (short) 10);
        int int19 = mutablePeriod5.size();
        int int20 = mutablePeriod5.size();
        mutablePeriod5.setPeriod((int) (byte) -1, (int) 'a', (int) (byte) 1, (int) (short) 0, 0, 100, 0, (int) 'x');
        mutablePeriod5.addMonths((-52));
        mutablePeriod5.setYears(2);
        mutablePeriod5.setHours((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue(169, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 169");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        boolean boolean12 = dateTime10.isEqual(10L);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekOfWeekyear(8);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 0);
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period19 = period17.normalizedStandard();
        org.joda.time.DateTime dateTime21 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period19, (int) 'u');
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        java.util.Locale locale28 = new java.util.Locale("+00:00");
        boolean boolean29 = dateTime24.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant38, periodType39);
        mutablePeriod40.setMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime32.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTime dateTime45 = dateTime32.withMillisOfDay(4);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType50, chronology51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType50);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime32, periodType50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.Interval interval58 = property57.toInterval();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        org.joda.time.Interval interval62 = property61.toInterval();
        boolean boolean63 = interval58.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Chronology chronology64 = interval62.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime32.toMutableDateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.hourOfHalfday();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology64);
        boolean boolean68 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property69 = dateTime67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        org.joda.time.DateTime dateTime71 = property69.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals(locale28.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 1969);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds5 = duration4.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration6 = null;
        boolean boolean7 = duration4.isEqual(readableDuration6);
        org.joda.time.Duration duration9 = duration4.minus((long) 1);
        org.joda.time.Duration duration11 = duration9.minus((long) '4');
        org.joda.time.Duration duration12 = duration9.toDuration();
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration21.isEqual(readableDuration23);
        org.joda.time.Duration duration26 = duration21.minus((long) 1);
        org.joda.time.Duration duration28 = duration26.minus((long) '4');
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        boolean boolean46 = dateTime44.isEqual(10L);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType49, chronology50);
        org.joda.time.PeriodType periodType52 = periodType49.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime44, periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35, periodType52);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime31, periodType55);
        boolean boolean57 = duration18.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = property60.getAsText(locale62);
        boolean boolean64 = duration18.equals((java.lang.Object) property60);
        boolean boolean65 = duration12.isEqual((org.joda.time.ReadableDuration) duration18);
        boolean boolean66 = duration1.isEqual((org.joda.time.ReadableDuration) duration18);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022" + "'", str63, "2022");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withParseType(periodType10);
        java.util.Locale locale12 = periodFormatter9.getLocale();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = dateTimeField5.getAsShortText(31, locale16);
        java.lang.Object obj21 = null;
        org.joda.time.Instant instant22 = new org.joda.time.Instant(obj21);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone23);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = dateTimeZone23.getShortName(100L, locale27);
        java.lang.String str30 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.getDisplayName();
        java.lang.String str32 = locale27.getLanguage();
        java.lang.String str33 = dateTimeField5.getAsText(399L, locale27);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str17, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ita" + "'", str18, "ita");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "31" + "'", str19, "31");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str30, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str31, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        boolean boolean26 = dateTime24.isAfter((long) (short) -1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withFields(readablePartial31);
        org.joda.time.DateMidnight dateMidnight33 = dateTime32.toDateMidnight();
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateMidnight33);
        int int35 = dateMidnight33.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 69 + "'", int35 == 69);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        mutablePeriod5.addWeeks((int) 'a');
        mutablePeriod5.setPeriod(0, (int) 'u', 1, 1, 86399, (int) '4', (int) 'a', (int) (short) -1);
        mutablePeriod5.setSeconds(69);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = property4.withMinimumValue();
        int int6 = property4.getMaximumValueOverall();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale7.getDisplayCountry();
        int int10 = property4.getMaximumShortTextLength(locale7);
        org.joda.time.DateTime dateTime11 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.DateTime dateTime19 = dateTime15.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime21 = dateTime15.plusDays(100);
        org.joda.time.LocalTime localTime22 = dateTime15.toLocalTime();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksBetween(readablePartial0, (org.joda.time.ReadablePartial) localTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        mutablePeriod6.setMillis((int) (short) 1);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period12.getFieldTypes();
        org.joda.time.Period period15 = period12.minusYears((int) (byte) 1);
        org.joda.time.Period period17 = period12.plusMonths((int) (byte) 0);
        org.joda.time.Period period19 = period12.withMillis((int) '#');
        org.joda.time.Period period21 = period19.minusMinutes((int) 'u');
        boolean boolean22 = mutablePeriod6.equals((java.lang.Object) period19);
        boolean boolean23 = periodType0.equals((java.lang.Object) period19);
        int int24 = period19.getSeconds();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addYears((int) (short) 10);
        mutablePeriod5.setMonths((-59));
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        java.lang.Object obj30 = null;
        org.joda.time.Instant instant31 = new org.joda.time.Instant(obj30);
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        int int35 = dateTimeZone32.getOffset(1L);
        boolean boolean37 = dateTimeZone32.isStandardOffset(0L);
        org.joda.time.DateTime dateTime38 = dateTime18.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears(1969);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(1439);
        org.joda.time.DateTime dateTime44 = dateTime42.minusYears(0);
        org.joda.time.Duration duration45 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) dateTime44);
        java.lang.String str46 = duration45.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT160444800S" + "'", str46, "PT160444800S");
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.yearOfEra();
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.DurationField durationField31 = dateTimeField29.getRangeDurationField();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.lang.String str39 = locale37.getISO3Language();
        java.lang.String str40 = dateTimeField29.getAsShortText((long) 1311, locale37);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Italy" + "'", str38, "Italy");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant8 = instant6.minus(100L);
        java.lang.String str9 = instant8.toString();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = duration12.toPeriodTo(readableInstant16);
        org.joda.time.Duration duration19 = duration12.withMillis((long) (short) 0);
        org.joda.time.Instant instant20 = instant8.plus((org.joda.time.ReadableDuration) duration12);
        java.lang.String str21 = duration12.toString();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35, periodType36);
        mutablePeriod37.setMonths((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime29.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTime dateTime42 = dateTime29.minusWeeks((int) (byte) 1);
        int int43 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTimeISO();
        org.joda.time.Interval interval45 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        org.joda.time.DateTime dateTime47 = interval45.getStart();
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Weeks weeks49 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.Interval interval53 = property52.toInterval();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        boolean boolean58 = interval53.contains((org.joda.time.ReadableInterval) interval57);
        long long59 = interval57.getEndMillis();
        org.joda.time.Period period60 = interval57.toPeriod();
        boolean boolean61 = interval45.isBefore((org.joda.time.ReadableInterval) interval57);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str9, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1672531200000L + "'", long59 == 1672531200000L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = interval5.contains((org.joda.time.ReadableInterval) interval9);
        java.lang.String str11 = interval5.toString();
        long long12 = interval5.getEndMillis();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime dateTime33 = dateTime20.minusWeeks((int) (byte) 1);
        int int34 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property35 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime20.withYear(1969);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        boolean boolean39 = interval5.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = duration42.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = duration42.toPeriodTo(readableInstant46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant51 = instant49.minus(100L);
        java.lang.String str52 = instant51.toString();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration58 = duration55.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = duration55.toPeriodTo(readableInstant59);
        org.joda.time.Duration duration63 = duration55.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType66, chronology67);
        org.joda.time.PeriodType periodType69 = periodType66.withWeeksRemoved();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration63.toPeriod(periodType69, chronology70);
        org.joda.time.Period period72 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) instant51, periodType69);
        org.joda.time.Period period73 = interval5.toPeriod(periodType69);
        org.joda.time.Instant instant75 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime76 = instant75.toDateTime();
        org.joda.time.DateTime.Property property77 = dateTime76.era();
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime76.toMutableDateTime();
        org.joda.time.DateTime.Property property79 = dateTime76.minuteOfDay();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.yearOfEra();
        org.joda.time.Interval interval83 = property82.toInterval();
        org.joda.time.DateTime dateTime84 = interval83.getStart();
        org.joda.time.DateTime dateTime85 = dateTime84.toDateTimeISO();
        org.joda.time.Instant instant86 = dateTime84.toInstant();
        int int87 = property79.getDifference((org.joda.time.ReadableInstant) instant86);
        org.joda.time.Chronology chronology88 = instant86.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(59999L, 4320000000L, periodType69, chronology88);
        org.joda.time.PeriodType periodType90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) periodType69, periodType90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str11, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1672531200000L + "'", long12 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str52, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-27349920) + "'", int87 == (-27349920));
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period7 = duration6.toPeriod();
        boolean boolean8 = duration2.isEqual((org.joda.time.ReadableDuration) duration6);
        java.lang.String str9 = duration6.toString();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = duration12.toPeriodTo(readableInstant16);
        org.joda.time.Weeks weeks18 = period17.toStandardWeeks();
        org.joda.time.Period period20 = period17.plusMonths((int) (short) 100);
        org.joda.time.Period period22 = period20.minusHours((int) (byte) -1);
        boolean boolean23 = duration6.equals((java.lang.Object) period22);
        long long24 = duration6.getMillis();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0S" + "'", str9, "PT0S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes30 = minutes28.minus((int) (short) -1);
        boolean boolean31 = minutes27.isGreaterThan(minutes28);
        org.joda.time.Minutes minutes32 = null;
        org.joda.time.Minutes minutes33 = minutes28.minus(minutes32);
        org.joda.time.Minutes minutes35 = minutes28.plus((int) (short) 1);
        org.joda.time.PeriodType periodType36 = minutes35.getPeriodType();
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.TWO;
        boolean boolean38 = minutes35.isLessThan(minutes37);
        org.joda.time.Minutes minutes39 = minutes26.plus(minutes35);
        org.joda.time.DurationFieldType durationFieldType40 = minutes39.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(durationFieldType40);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType11);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod12.setValue(26075160, 9678);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26075160");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.joda.time.Period period1 = new org.joda.time.Period((-292275054L));
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 12);
        org.joda.time.Period period2 = duration1.toPeriod();
        long long3 = duration1.getMillis();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant6 = instant5.toInstant();
        org.joda.time.DateTime dateTime7 = instant6.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(10);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean21 = dateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime12.property(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime12.getZone();
        org.joda.time.LocalDateTime localDateTime24 = dateTime12.toLocalDateTime();
        int int25 = localDateTime24.size();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZone(dateTimeZone29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean37 = dateTime33.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime28.property(dateTimeFieldType36);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime28.getZone();
        org.joda.time.LocalDateTime localDateTime40 = dateTime28.toLocalDateTime();
        int int41 = localDateTime40.size();
        org.joda.time.Days days42 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDateTime24, (org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Period period44 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period46 = period44.minusMonths((int) (short) 10);
        int int47 = period44.getWeeks();
        org.joda.time.Days days48 = period44.toStandardDays();
        boolean boolean49 = days42.isGreaterThan(days48);
        org.joda.time.PeriodType periodType50 = days48.getPeriodType();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime9, periodType50);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 12000L + "'", long3 == 12000L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        boolean boolean17 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = duration20.toPeriodTo(readableInstant24);
        org.joda.time.Duration duration27 = duration20.minus(43200000L);
        org.joda.time.Duration duration29 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) ' ');
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType31 = periodType30.withMinutesRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration29, periodType31);
        boolean boolean34 = dateTime2.isEqual((long) 'a');
        org.joda.time.DateTime dateTime36 = dateTime2.minusYears(1969);
        int int37 = dateTime36.getYear();
        org.joda.time.DateTime.Property property38 = dateTime36.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        org.joda.time.DurationFieldType durationFieldType13 = durationField12.getType();
        boolean boolean14 = durationField12.isPrecise();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getName((long) 10);
        java.lang.String str13 = dateTimeZone8.getName((long) 8);
        java.lang.String str15 = dateTimeZone8.getShortName(181025280000000000L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant17.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        long long22 = dateTimeZone20.nextTransition(43200000L);
        long long24 = dateTimeZone8.getMillisKeepLocal(dateTimeZone20, 43200000L);
        java.lang.String str25 = dateTimeZone8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(141022, 5, 20, 20, 720, 86399999, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 720 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 43200000L + "'", long22 == 43200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 43200000L + "'", long24 == 43200000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P0D");
        java.lang.String str2 = seconds1.toString();
        org.joda.time.Days days3 = seconds1.toStandardDays();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1969, chronology1);
        org.joda.time.Period period3 = period2.normalizedStandard();
        int int4 = period3.getWeeks();
        org.joda.time.Period period6 = period3.minusDays(28995);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.withFields(readablePartial4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMillis((int) (short) 1);
        mutablePeriod13.setDays(100);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant21 = instant19.minus(100L);
        org.joda.time.Instant instant23 = instant21.plus((long) 100);
        boolean boolean24 = instant21.isBeforeNow();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        int int29 = dateTime27.getWeekOfWeekyear();
        int int30 = dateTime27.getMonthOfYear();
        int int31 = dateTime27.getDayOfWeek();
        org.joda.time.DateTime dateTime33 = dateTime27.plus(4190400000L);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property36 = dateTime35.centuryOfEra();
        mutablePeriod13.setPeriod((org.joda.time.ReadableInstant) instant21, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.Duration duration20 = duration12.toDuration();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.Instant instant26 = instant24.plus((long) 100);
        org.joda.time.Instant instant28 = instant24.withMillis((long) (byte) 1);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period32 = period30.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationTo(readableInstant33);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant41 = instant39.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime42 = instant39.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period44 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime42, periodType43);
        org.joda.time.Instant instant45 = instant28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant46 = instant28.toInstant();
        org.joda.time.Instant instant48 = instant46.withMillis((long) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant52 = instant50.minus(100L);
        org.joda.time.Instant instant54 = instant52.plus((long) 100);
        org.joda.time.Instant instant56 = instant52.withMillis((long) (byte) 1);
        org.joda.time.Period period58 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period60 = period58.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Duration duration62 = period60.toDurationTo(readableInstant61);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant69 = instant67.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime70 = instant67.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period72 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime70, periodType71);
        org.joda.time.Instant instant73 = instant56.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant74 = instant56.toInstant();
        org.joda.time.DateTime dateTime75 = instant74.toDateTime();
        int int76 = instant46.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Period period77 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration79 = new org.joda.time.Duration(432000000L);
        org.joda.time.Duration duration80 = duration79.toDuration();
        int int81 = duration20.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime84 = instant83.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = dateTime84.withZoneRetainFields(dateTimeZone85);
        org.joda.time.DateTime.Property property87 = dateTime86.centuryOfEra();
        boolean boolean89 = property87.equals((java.lang.Object) "1969-12-31T23:59:59.899Z");
        java.util.Locale locale90 = java.util.Locale.KOREA;
        int int91 = property87.getMaximumTextLength(locale90);
        org.joda.time.DateTime dateTime92 = property87.roundHalfEvenCopy();
        org.joda.time.Period period93 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType4, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType4, chronology7);
        org.joda.time.PeriodType periodType9 = periodType4.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((java.lang.Object) periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = duration8.toPeriodFrom(readableInstant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        boolean boolean28 = dateTime26.isEqual(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration8.toPeriod(periodType34, chronology37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, readableInstant47, periodType48);
        mutablePeriod49.setMonths((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime41.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTime dateTime54 = dateTime41.minusWeeks((int) (byte) 1);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period57 = period55.plusSeconds(31);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (short) 10, chronology59);
        org.joda.time.Period period62 = period60.minusYears((int) (byte) 100);
        org.joda.time.Period period64 = period60.plusYears(1439);
        org.joda.time.Period period65 = period55.withFields((org.joda.time.ReadablePeriod) period64);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(0L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType3 = hours2.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType5 = hours2.getFieldType(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType15, chronology16);
        org.joda.time.PeriodType periodType18 = periodType15.withWeeksRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = duration12.toPeriod(periodType18, chronology19);
        org.joda.time.PeriodType periodType21 = periodType18.withMinutesRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period(454L, 1842739200000L, periodType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = period22.withHours(25985711);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.Days days20 = period19.toStandardDays();
        org.joda.time.Minutes minutes21 = days20.toStandardMinutes();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes24 = minutes22.minus((int) (short) -1);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes27 = minutes25.plus((int) (byte) 1);
        org.joda.time.Minutes minutes28 = minutes22.minus(minutes27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = days20.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Minutes");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes28);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = duration40.toPeriodTo(readableInstant44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.minus(100L);
        java.lang.String str50 = instant49.toString();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = duration53.toPeriodTo(readableInstant57);
        org.joda.time.Duration duration61 = duration53.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withWeeksRemoved();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration61.toPeriod(periodType67, chronology68);
        org.joda.time.Period period70 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) instant49, periodType67);
        org.joda.time.Period period71 = interval3.toPeriod(periodType67);
        int int72 = periodType67.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str50, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(0);
        org.joda.time.Period period3 = period1.plusWeeks(2);
        org.joda.time.Period period5 = period3.withMillis(8);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        java.lang.String str10 = instant9.toString();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Duration duration20 = duration13.withMillis((long) (short) 0);
        org.joda.time.Instant instant21 = instant9.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant38 = instant37.toInstant();
        boolean boolean39 = dateTime24.isEqual((org.joda.time.ReadableInstant) instant38);
        boolean boolean40 = instant21.isAfter((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant41 = instant38.toInstant();
        org.joda.time.Chronology chronology42 = instant38.getChronology();
        org.joda.time.Chronology chronology43 = chronology42.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) period5, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str10, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        mutablePeriod5.setDays(100);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.Instant instant15 = instant13.plus((long) 100);
        boolean boolean16 = instant13.isBeforeNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        int int21 = dateTime19.getWeekOfWeekyear();
        int int22 = dateTime19.getMonthOfYear();
        int int23 = dateTime19.getDayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.plus(4190400000L);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant31 = instant13.plus(0L);
        org.joda.time.Instant instant34 = instant31.withDurationAdded(34528799433058674L, 11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("2021-11-14T07:14:25.501Z", (java.lang.Throwable) iOException4);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.minusSeconds((int) 'u');
        boolean boolean6 = dateTime5.isBeforeNow();
        boolean boolean8 = dateTime5.isEqual(0L);
        int int9 = dateTime5.getHourOfDay();
        org.joda.time.DateTime.Property property10 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        java.lang.String str47 = timeOfDay38.toString();
        org.joda.time.ReadablePartial readablePartial48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds49 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) timeOfDay38, readablePartial48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "T23:59:59.999" + "'", str47, "T23:59:59.999");
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.Days days5 = org.joda.time.Days.FIVE;
        org.joda.time.DateTime dateTime6 = dateTime4.plus((org.joda.time.ReadablePeriod) days5);
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) dateTime4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Instant instant15 = dateTime12.toInstant();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        org.joda.time.DateTime dateTime19 = dateTime12.withDurationAdded(0L, (int) 'a');
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = period23.getFieldTypes();
        org.joda.time.Period period26 = period23.minusYears((int) (byte) 1);
        org.joda.time.Period period28 = period23.plusMonths((int) (byte) 0);
        int int29 = period23.size();
        org.joda.time.Period period31 = period23.plusYears(100);
        org.joda.time.Period period33 = period23.minusSeconds(292278993);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType38);
        mutablePeriod39.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.days();
        mutablePeriod39.add(durationFieldType42, 8);
        boolean boolean45 = period23.isSupported(durationFieldType42);
        org.joda.time.DateTime dateTime47 = dateTime12.withFieldAdded(durationFieldType42, (-2147483648));
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime12.toDateTime(chronology48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime12);
        java.lang.Class<?> wildcardClass51 = dateTime4.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale7.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("P52M-12DT-100M0.011S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: P52M-12DT-100M0.011S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfSecond();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        java.lang.String str39 = duration35.toString();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant43 = instant41.minus(100L);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant46 = instant41.withMillis((long) 1970);
        org.joda.time.MutableDateTime mutableDateTime47 = instant41.toMutableDateTime();
        int int48 = property32.getDifference((org.joda.time.ReadableInstant) instant41);
        org.joda.time.ReadableInstant readableInstant49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = property32.getDifference(readableInstant49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645514137359");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.011S" + "'", str39, "PT0.011S");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology25.centuries();
        org.joda.time.DurationFieldType durationFieldType32 = durationField31.getType();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property27 = dateTime8.minuteOfDay();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        java.lang.String str32 = instant31.toString();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Instant instant43 = instant31.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = instant31.isSupported(dateTimeFieldType44);
        boolean boolean46 = dateTime8.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType44.getRangeDurationType();
        java.lang.String str48 = durationFieldType47.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str32, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eras" + "'", str48, "eras");
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int9 = dateTimeField2.get((-1L));
        long long11 = dateTimeField2.remainder((long) (byte) 0);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        int int13 = dateTimeField2.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getCountry();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Duration duration22 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant23, periodType24);
        mutablePeriod25.setMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime17.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTime dateTime30 = dateTime17.minusWeeks((int) (byte) 1);
        long long31 = dateTime17.getMillis();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property55 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime40.withYear(1969);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DurationField durationField59 = durationFieldType32.getField(chronology58);
        org.joda.time.DateTime dateTime60 = dateTime17.toDateTime(chronology58);
        org.joda.time.DurationField durationField61 = chronology58.days();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology58.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        java.util.Locale locale68 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str69 = dateTimeZone62.getName((-475200059L), locale68);
        java.lang.String str70 = locale12.getDisplayCountry(locale68);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals(locale68.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Italy" + "'", str70, "Italy");
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Language();
        java.lang.String str12 = locale6.getExtension('a');
        java.lang.String str13 = locale6.getCountry();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "giapponese" + "'", str9, "giapponese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jpn" + "'", str10, "jpn");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod4 = hours3.toMutablePeriod();
        mutablePeriod4.addYears(0);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours3 = hours1.minus((int) (short) 10);
        org.joda.time.Hours hours4 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours8 = hours6.minus((int) (short) 10);
        boolean boolean9 = hours4.isGreaterThan(hours8);
        boolean boolean10 = hours1.isLessThan(hours8);
        org.joda.time.Hours hours11 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours13 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours15 = hours13.minus((int) (short) 10);
        boolean boolean16 = hours11.isGreaterThan(hours15);
        boolean boolean17 = hours1.isGreaterThan(hours15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = hours15.getValue((-59));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        java.util.Locale locale3 = new java.util.Locale("T23:59:59.999", "java.io.IOException: java.io.IOException: PT0S", "1439-02-22T07:15:17.714Z");
        org.junit.Assert.assertEquals(locale3.toString(), "t23:59:59.999_JAVA.IO.IOEXCEPTION: JAVA.IO.IOEXCEPTION: PT0S_1439-02-22T07:15:17.714Z");
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        long long30 = durationField27.getMillis((-19), 248399910L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-599356800000L) + "'", long30 == (-599356800000L));
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime20.toMutableDateTimeISO();
        int int28 = mutableDateTime27.getHourOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getDurationField();
        long long10 = durationField8.getMillis((int) '4');
        long long13 = durationField8.add((long) (short) 10, 0L);
        long long14 = durationField8.getUnitMillis();
        long long16 = durationField8.getMillis(86399999);
        int int19 = durationField8.getValue(117L, (long) 321);
        int int22 = durationField8.getDifference((long) 169, (-4492799941L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2246400000L + "'", long10 == 2246400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 43200000L + "'", long14 == 43200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3732479956800000L + "'", long16 == 3732479956800000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 104 + "'", int22 == 104);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale6 = periodFormatter3.getLocale();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        org.joda.time.format.PeriodPrinter periodPrinter10 = null;
        org.joda.time.format.PeriodParser periodParser11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = new org.joda.time.format.PeriodFormatter(periodPrinter10, periodParser11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withParseType(periodType13);
        java.util.Locale locale15 = periodFormatter12.getLocale();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter12.withLocale(locale16);
        java.util.Locale locale19 = locale16.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter9.withLocale(locale19);
        org.joda.time.PeriodType periodType21 = periodFormatter20.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = org.joda.time.Period.parse("\u4e0a\u5348", periodFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodType21);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long11 = dateTimeField2.add(0L, 0L);
        boolean boolean12 = dateTimeField2.isSupported();
        long long14 = dateTimeField2.roundCeiling((-26179201000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long21 = dateTimeField18.add(0L, (long) (short) 1);
        long long24 = dateTimeField18.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.lang.String str26 = locale25.getVariant();
        int int27 = dateTimeField18.getMaximumShortTextLength(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        long long33 = dateTimeField30.add(0L, (long) (short) 1);
        long long36 = dateTimeField30.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale37.getVariant();
        int int39 = dateTimeField30.getMaximumShortTextLength(locale37);
        java.lang.String str40 = locale37.getDisplayLanguage();
        int int41 = dateTimeField18.getMaximumShortTextLength(locale37);
        java.util.Locale.setDefault(locale37);
        java.lang.String str43 = dateTimeField2.getAsText(201L, locale37);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = property47.withMinimumValue();
        int int49 = property47.getMaximumValueOverall();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale50.getDisplayCountry();
        int int53 = property47.getMaximumShortTextLength(locale50);
        org.joda.time.DateTime dateTime54 = property47.withMaximumValue();
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant59 = instant57.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime60 = instant57.toMutableDateTimeISO();
        java.lang.Object obj61 = null;
        org.joda.time.Instant instant62 = new org.joda.time.Instant(obj61);
        boolean boolean63 = mutableDateTime60.isAfter((org.joda.time.ReadableInstant) instant62);
        boolean boolean64 = localTime55.equals((java.lang.Object) mutableDateTime60);
        org.joda.time.Chronology chronology65 = localTime55.getChronology();
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime68 = instant67.toDateTime();
        org.joda.time.DateTime.Property property69 = dateTime68.era();
        org.joda.time.DateTime dateTime70 = property69.withMinimumValue();
        int int71 = property69.getMaximumValueOverall();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = locale72.getScript();
        java.lang.String str74 = locale72.getDisplayCountry();
        int int75 = property69.getMaximumShortTextLength(locale72);
        org.joda.time.DateTime dateTime76 = property69.withMaximumValue();
        org.joda.time.LocalTime localTime77 = dateTime76.toLocalTime();
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant81 = instant79.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime82 = instant79.toMutableDateTimeISO();
        java.lang.Object obj83 = null;
        org.joda.time.Instant instant84 = new org.joda.time.Instant(obj83);
        boolean boolean85 = mutableDateTime82.isAfter((org.joda.time.ReadableInstant) instant84);
        boolean boolean86 = localTime77.equals((java.lang.Object) mutableDateTime82);
        org.joda.time.Period period87 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime55, (org.joda.time.ReadablePartial) localTime77);
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localTime77, 435, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 435");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-26179200000L) + "'", long14 == (-26179200000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 43200000L + "'", long21 == 43200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 43200000L + "'", long33 == 43200000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "giapponese" + "'", str40, "giapponese");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u5348\u524d" + "'", str43, "\u5348\u524d");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        int[] intArray65 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay63, (long) (-1));
        org.joda.time.DateTimeField dateTimeField66 = chronology21.secondOfMinute();
        int int67 = dateTimeField66.getMinimumValue();
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime70 = instant69.toDateTime();
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime70.toMutableDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime70.getZone();
        int int76 = dateTimeZone74.getOffsetFromLocal((long) (short) 1);
        java.lang.Object obj77 = null;
        org.joda.time.Instant instant78 = new org.joda.time.Instant(obj77);
        org.joda.time.DateTimeZone dateTimeZone79 = instant78.getZone();
        java.lang.String str80 = dateTimeZone79.toString();
        int int82 = dateTimeZone79.getOffset(1L);
        java.lang.String str83 = dateTimeZone79.toString();
        boolean boolean84 = dateTimeZone79.isFixed();
        long long86 = dateTimeZone74.getMillisKeepLocal(dateTimeZone79, (long) 292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((java.lang.Object) dateTimeField66, dateTimeZone74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 292278993L + "'", long86 == 292278993L);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        java.util.Locale locale20 = periodFormatter8.getLocale();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = duration23.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = duration23.toPeriodTo(readableInstant27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant30.minus(100L);
        java.lang.String str33 = instant32.toString();
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = duration36.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = duration36.toPeriodTo(readableInstant40);
        org.joda.time.Duration duration44 = duration36.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType47, chronology48);
        org.joda.time.PeriodType periodType50 = periodType47.withWeeksRemoved();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = duration44.toPeriod(periodType50, chronology51);
        org.joda.time.Period period53 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) instant32, periodType50);
        org.joda.time.PeriodType periodType54 = periodType50.withMonthsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter8.withParseType(periodType54);
        java.lang.StringBuffer stringBuffer56 = null;
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Period period59 = minutes58.toPeriod();
        org.joda.time.DurationFieldType durationFieldType60 = minutes58.getFieldType();
        org.joda.time.Minutes minutes62 = minutes58.multipliedBy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter55.printTo(stringBuffer56, (org.joda.time.ReadablePeriod) minutes58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str33, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(minutes62);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.clockhourOfDay();
        org.joda.time.DurationField durationField60 = dateTimeField59.getDurationField();
        long long62 = durationField60.getMillis(292278993);
        boolean boolean63 = durationField60.isSupported();
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1052204374800000L + "'", long62 == 1052204374800000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        int int6 = property2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withParseType(periodType10);
        java.util.Locale locale12 = periodFormatter9.getLocale();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property2.getMaximumShortTextLength(locale13);
        org.joda.time.DateTime dateTime18 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis((int) (byte) 10);
        org.joda.time.DateTime.Property property21 = dateTime18.monthOfYear();
        org.joda.time.DateTime dateTime23 = property21.setCopy(5);
        java.lang.String str24 = property21.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hourOfHalfday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int9 = mutablePeriod5.getValue(321);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 321");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = property35.withMinimumValue();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod37.addDays(10);
        org.joda.time.DurationFieldType durationFieldType41 = mutablePeriod37.getFieldType(0);
        int[] intArray42 = mutablePeriod37.getValues();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod37.setValue((-2147483647), (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2147483647");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-3938, 0, 0, 10, 0, 0, 0, 0]");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval20 = interval3.toMutableInterval();
        long long21 = interval3.getEndMillis();
        long long22 = interval3.toDurationMillis();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime31 = dateTime25.plusDays(100);
        org.joda.time.LocalTime localTime32 = dateTime25.toLocalTime();
        org.joda.time.DateTime dateTime34 = dateTime25.withYearOfEra(1);
        boolean boolean35 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1672531200000L + "'", long21 == 1672531200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31536000000L + "'", long22 == 31536000000L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        int int38 = dateTime35.getDayOfMonth();
        org.joda.time.LocalTime localTime39 = dateTime35.toLocalTime();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.withZone(dateTimeZone43);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean51 = dateTime47.isSupported(dateTimeFieldType50);
        org.joda.time.DateTime.Property property52 = dateTime42.property(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime42.getZone();
        org.joda.time.LocalDateTime localDateTime54 = dateTime42.toLocalDateTime();
        int int55 = localDateTime54.size();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZone(dateTimeZone59);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        org.joda.time.DateTime.Property property68 = dateTime58.property(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime58.getZone();
        org.joda.time.LocalDateTime localDateTime70 = dateTime58.toLocalDateTime();
        int int71 = localDateTime70.size();
        org.joda.time.Days days72 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDateTime54, (org.joda.time.ReadablePartial) localDateTime70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds73 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) localTime39, (org.joda.time.ReadablePartial) localDateTime70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(days72);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = property25.withMinimumValue();
        int int27 = property25.getMaximumValueOverall();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getDisplayCountry();
        int int31 = property25.getMaximumShortTextLength(locale28);
        org.joda.time.DateTime dateTime32 = property25.withMaximumValue();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime32, periodType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(periodType33);
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = mutablePeriod36.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        org.joda.time.Days days15 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        int int17 = days15.get(durationFieldType16);
        mutablePeriod14.add(durationFieldType16, 8);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutablePeriod14.add(readablePeriod20);
        int int22 = mutablePeriod14.getMillis();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod14.add((long) 8, chronology24);
        mutablePeriod14.setMillis(1439);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant30.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTimeISO();
        java.lang.Object obj34 = null;
        org.joda.time.Instant instant35 = new org.joda.time.Instant(obj34);
        boolean boolean36 = mutableDateTime33.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withWeeksRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableDuration28, (org.joda.time.ReadableInstant) instant35, periodType42);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = period48.getFieldTypes();
        org.joda.time.Period period51 = period48.minusYears((int) (byte) 1);
        org.joda.time.Period period53 = period48.plusMonths((int) (byte) 0);
        int int54 = period48.size();
        org.joda.time.Period period56 = period48.plusYears(100);
        org.joda.time.Period period58 = period48.minusSeconds(292278993);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        mutablePeriod64.add(durationFieldType67, 8);
        boolean boolean70 = period48.isSupported(durationFieldType67);
        org.joda.time.Chronology chronology71 = null;
        boolean boolean72 = durationFieldType67.isSupported(chronology71);
        boolean boolean73 = periodType42.isSupported(durationFieldType67);
        mutablePeriod14.add(durationFieldType67, 1);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.setDays(28995);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-01T00:00:00.000+00:02/20...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2922789);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-35999635L), 0L);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        int int12 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) 86399999, (-2147483647));
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime dateTime33 = dateTime20.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        org.joda.time.DateTime.Property property35 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime39 = dateTime36.withZone(dateTimeZone38);
        int int41 = dateTimeZone38.getOffset(0L);
        int int43 = dateTimeZone38.getOffset((-35999635L));
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime14.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime14.withDurationAdded((long) (byte) 0, (int) ' ');
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfHalfday();
        long long31 = dateTimeField29.roundHalfEven(2980800000L);
        org.joda.time.format.PeriodPrinter periodPrinter33 = null;
        org.joda.time.format.PeriodParser periodParser34 = null;
        org.joda.time.format.PeriodFormatter periodFormatter35 = new org.joda.time.format.PeriodFormatter(periodPrinter33, periodParser34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatter35.withParseType(periodType36);
        java.util.Locale locale38 = periodFormatter35.getLocale();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter35.withLocale(locale39);
        java.util.Locale locale42 = locale39.stripExtensions();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        boolean boolean51 = interval46.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Chronology chronology52 = interval50.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfDay();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = dateTimeField54.getAsText((long) 'a', locale56);
        java.lang.String str58 = locale42.getDisplayLanguage(locale56);
        java.lang.String str59 = dateTimeField29.getAsShortText(366, locale42);
        long long62 = dateTimeField29.addWrapField(17536739580000L, (int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2980800000L + "'", long31 == 2980800000L);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str58, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "366" + "'", str59, "366");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 17536775580000L + "'", long62 == 17536775580000L);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("ITA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ITA\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DateTime.Property property24 = dateTime22.weekyear();
        java.lang.Object obj25 = null;
        org.joda.time.Instant instant26 = new org.joda.time.Instant(obj25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getName((long) 10);
        java.lang.String str32 = dateTimeZone27.getName((long) 8);
        int int34 = dateTimeZone27.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime22.withZone(dateTimeZone27);
        java.lang.String str36 = dateTimeZone27.getID();
        java.lang.String str37 = dateTimeZone27.toString();
        boolean boolean38 = dateTimeZone27.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(437, 35, (int) 'u', (int) 'u', 321, 1311, (int) ' ', dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = dateTime2.get(dateTimeFieldType7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.plusHours((int) 'u');
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withFields(readablePartial34);
        org.joda.time.DateTime dateTime37 = dateTime32.withYearOfEra(292278993);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean40 = dateTime29.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime.Property property41 = dateTime2.property(dateTimeFieldType39);
        org.joda.time.DateTime dateTime43 = dateTime2.plusMillis((int) (byte) 10);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime43.withTime(6, (-141012), 1800, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -141012 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.multipliedBy((int) (byte) 0);
        org.joda.time.Seconds seconds5 = seconds1.minus(86399999);
        org.joda.time.Seconds seconds7 = seconds5.multipliedBy(8);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        mutablePeriod5.addWeeks((int) 'a');
        mutablePeriod5.setPeriod(86399999, 1969, (int) 'u', (int) 'a', (-1), (-2147483648), 0, 2022);
        mutablePeriod5.setValue((int) (short) 0, (-19));
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType12, chronology13);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 11, 0L, periodType12);
        java.lang.String str16 = periodType12.getName();
        org.joda.time.PeriodType periodType17 = periodType12.withMonthsRemoved();
        java.lang.String str18 = periodType12.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1970, 7, (-8), 2, 100, 169, 28995, (int) (short) 1, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "YearDay" + "'", str16, "YearDay");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YearDay" + "'", str18, "YearDay");
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.joda.time.Period period1 = org.joda.time.Period.years(6);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = dateTime2.get(dateTimeFieldType7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.plusHours((int) 'u');
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withFields(readablePartial34);
        org.joda.time.DateTime dateTime37 = dateTime32.withYearOfEra(292278993);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean40 = dateTime29.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime.Property property41 = dateTime2.property(dateTimeFieldType39);
        java.lang.Object obj43 = null;
        org.joda.time.Instant instant44 = new org.joda.time.Instant(obj43);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        java.lang.String str46 = dateTimeZone45.toString();
        int int48 = dateTimeZone45.getOffset(1L);
        boolean boolean50 = dateTimeZone45.isStandardOffset(0L);
        java.lang.String str52 = dateTimeZone45.getNameKey((long) 1);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-1L), dateTimeZone45);
        org.joda.time.Period period56 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period58 = period56.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Duration duration60 = period58.toDurationTo(readableInstant59);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant67 = instant65.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime68 = instant65.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period70 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime68, periodType69);
        org.joda.time.Minutes minutes71 = duration63.toStandardMinutes();
        org.joda.time.DateTime dateTime72 = dateTime54.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) dateTime54, dateTimeZone73);
        int int75 = dateTime74.getYearOfEra();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime74, periodType76);
        org.joda.time.DateTime dateTime79 = dateTime2.plusMillis(365);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1969 + "'", int75 == 1969);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 100);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 100);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = dateTimeField2.getAsText(0, locale8);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        int int16 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = locale17.getScript();
        java.lang.String str19 = locale17.getDisplayCountry();
        int int20 = property14.getMaximumShortTextLength(locale17);
        java.lang.String str21 = dateTimeField2.getAsShortText(0L, locale17);
        int int23 = dateTimeField2.getMinimumValue(31449599999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u5348\u524d" + "'", str9, "\u5348\u524d");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AM" + "'", str21, "AM");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.MutablePeriod mutablePeriod15 = seconds14.toMutablePeriod();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.LocalDate localDate30 = dateTime18.toLocalDate();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Instant instant36 = dateTime33.toInstant();
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) instant36);
        org.joda.time.Seconds seconds38 = org.joda.time.Seconds.ONE;
        boolean boolean39 = seconds37.isLessThan(seconds38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.Seconds seconds41 = org.joda.time.Seconds.secondsIn(readableInterval40);
        org.joda.time.Seconds seconds43 = seconds41.plus((int) (byte) -1);
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds45 = seconds43.plus(seconds44);
        org.joda.time.Seconds seconds46 = seconds43.negated();
        org.joda.time.Seconds seconds47 = seconds46.negated();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.Seconds seconds49 = org.joda.time.Seconds.secondsIn(readableInterval48);
        org.joda.time.Seconds seconds51 = seconds49.plus((int) (byte) -1);
        org.joda.time.Seconds seconds52 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds53 = seconds51.plus(seconds52);
        org.joda.time.Seconds seconds54 = seconds51.negated();
        org.joda.time.Seconds seconds55 = seconds54.negated();
        org.joda.time.Seconds seconds56 = seconds47.plus(seconds55);
        org.joda.time.Seconds seconds57 = seconds38.plus(seconds55);
        org.joda.time.Seconds seconds59 = seconds38.minus((int) '#');
        org.joda.time.Seconds seconds60 = seconds14.minus(seconds59);
        org.joda.time.Seconds seconds61 = org.joda.time.Seconds.THREE;
        org.joda.time.PeriodType periodType62 = seconds61.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType63 = seconds61.getFieldType();
        org.joda.time.Seconds seconds64 = seconds14.plus(seconds61);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int74 = mutablePeriod73.getMonths();
        mutablePeriod73.setPeriod(8380845299L);
        org.joda.time.Seconds seconds77 = org.joda.time.Seconds.THREE;
        org.joda.time.PeriodType periodType78 = seconds77.getPeriodType();
        int int79 = seconds77.getSeconds();
        mutablePeriod73.add((org.joda.time.ReadablePeriod) seconds77);
        boolean boolean81 = seconds61.isLessThan(seconds77);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertNotNull(seconds60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNotNull(seconds77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded(0L, (int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours(69);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        boolean boolean26 = dateTime24.isAfter((long) (short) -1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withFields(readablePartial31);
        org.joda.time.DateMidnight dateMidnight33 = dateTime32.toDateMidnight();
        org.joda.time.Minutes minutes34 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateMidnight33);
        java.util.GregorianCalendar gregorianCalendar35 = dateMidnight33.toGregorianCalendar();
        int int36 = dateMidnight33.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime10.getZone();
        org.joda.time.DateTime.Property property13 = dateTime10.dayOfMonth();
        org.joda.time.Hours hours14 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours16 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours18 = hours16.minus((int) (short) 10);
        boolean boolean19 = hours14.isGreaterThan(hours18);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        boolean boolean23 = hours18.equals((java.lang.Object) dateTimeZone22);
        boolean boolean24 = property13.equals((java.lang.Object) dateTimeZone22);
        java.lang.Object obj25 = null;
        org.joda.time.Instant instant26 = new org.joda.time.Instant(obj25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = dateTimeZone27.getShortName(100L, locale31);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.String str37 = dateTimeZone27.getShortName((long) (short) -1, locale35);
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str43 = locale38.getDisplayCountry(locale42);
        java.lang.String str44 = locale42.getDisplayVariant();
        java.lang.String str45 = locale35.getDisplayVariant(locale42);
        java.lang.String str46 = property13.getAsText(locale42);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italy" + "'", str43, "Italy");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "31" + "'", str46, "31");
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 100);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 100);
        int int7 = dateTimeField2.getMinimumValue();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant10.minus(100L);
        org.joda.time.Instant instant14 = instant12.plus((long) 100);
        org.joda.time.Instant instant16 = instant12.withMillis((long) (byte) 1);
        org.joda.time.Period period18 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period20 = period18.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationTo(readableInstant21);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant29 = instant27.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period32 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime30, periodType31);
        org.joda.time.Instant instant33 = instant16.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant34 = instant16.toInstant();
        org.joda.time.Instant instant36 = instant34.withMillis((long) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant45, periodType46);
        mutablePeriod47.setMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime39.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTime dateTime52 = dateTime39.withMillisOfDay(4);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime39.getZone();
        org.joda.time.DateTime dateTime54 = instant36.toDateTime(dateTimeZone53);
        int int56 = dateTimeZone53.getOffsetFromLocal((long) 'u');
        java.lang.String str58 = dateTimeZone53.getName((long) (-100));
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale60);
        java.lang.String str62 = dateTimeZone53.getName(0L, locale60);
        java.lang.String str63 = dateTimeField2.getAsText(17536739580000L, locale60);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PM" + "'", str63, "PM");
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property22.withMinimumValue();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(0L);
        java.lang.Object obj27 = null;
        org.joda.time.Instant instant28 = new org.joda.time.Instant(obj27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = duration32.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = duration32.toPeriodTo(readableInstant36);
        org.joda.time.Duration duration39 = duration32.withMillis((long) (short) 0);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        boolean boolean47 = dateTime45.isEqual(10L);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime45, periodType48);
        org.joda.time.DateTime dateTime51 = dateTime45.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime45.withMinuteOfHour(0);
        int int54 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime45);
        int int55 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Seconds seconds56 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean58 = dateTime45.isAfter(6092150400009L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        java.lang.Object obj18 = null;
        org.joda.time.Instant instant19 = new org.joda.time.Instant(obj18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getName((long) 10);
        java.lang.String str25 = dateTimeZone20.getName((long) 8);
        int int27 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone20);
        java.lang.String str29 = dateTimeZone20.getID();
        java.lang.String str31 = dateTimeZone20.getName((long) 'x');
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        int int35 = mutablePeriod34.getDays();
        org.joda.time.PeriodType periodType36 = mutablePeriod34.getPeriodType();
        boolean boolean37 = dateTimeZone20.equals((java.lang.Object) mutablePeriod34);
        mutablePeriod34.addMinutes(2922789);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        boolean boolean45 = property42.isLeap();
        org.joda.time.DateTime dateTime46 = property42.withMinimumValue();
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime50 = dateTime46.toLocalDateTime();
        org.joda.time.Duration duration51 = mutablePeriod34.toDurationTo((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(duration51);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("PT3S");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = seconds1.getFieldType((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.Period period11 = period10.negated();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = duration14.plus((long) (byte) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        boolean boolean22 = dateTime20.isEqual(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime20, periodType28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Instant instant35 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime32.withMillis((long) '4');
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property39 = dateTime20.minuteOfDay();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant43 = instant41.minus(100L);
        java.lang.String str44 = instant43.toString();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = duration47.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = duration47.toPeriodTo(readableInstant51);
        org.joda.time.Duration duration54 = duration47.withMillis((long) (short) 0);
        org.joda.time.Instant instant55 = instant43.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean57 = instant43.isSupported(dateTimeFieldType56);
        boolean boolean58 = dateTime20.isSupported(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType56.getRangeDurationType();
        boolean boolean60 = period11.isSupported(durationFieldType59);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str44, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1672963800011L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        int int38 = dateTime35.getDayOfMonth();
        org.joda.time.LocalTime localTime39 = dateTime35.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime35.withYearOfCentury((-2147483648));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483648 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateTime27.getHourOfDay();
        org.joda.time.Days days33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.centuryOfEra();
        org.joda.time.DateTime.Property property35 = dateTime27.yearOfEra();
        boolean boolean36 = property35.isLeap();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        int int10 = period8.getMinutes();
        org.joda.time.Period period12 = period8.withDays((int) ' ');
        org.joda.time.Period period14 = period8.plusWeeks(10);
        org.joda.time.Period period16 = period8.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        java.lang.String str18 = dateTime2.toString();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration21.isEqual(readableDuration23);
        org.joda.time.Duration duration26 = duration21.minus((long) 1);
        org.joda.time.Duration duration28 = duration26.minus((long) '4');
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        boolean boolean46 = dateTime44.isEqual(10L);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType49, chronology50);
        org.joda.time.PeriodType periodType52 = periodType49.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime44, periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35, periodType52);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime31, periodType55);
        org.joda.time.Duration duration58 = duration26.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int69 = mutablePeriod68.getDays();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        boolean boolean80 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        mutablePeriod68.setPeriod((long) 'u', (long) 1969, chronology81);
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 100, chronology81);
        org.joda.time.Period period84 = duration58.toPeriod(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.weekyearOfCentury();
        org.joda.time.DurationField durationField86 = chronology81.millis();
        org.joda.time.DateTimeField dateTimeField87 = chronology81.yearOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology81.millisOfSecond();
        org.joda.time.DateTime dateTime89 = dateTime2.withChronology(chronology81);
        java.lang.String str90 = chronology81.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str18, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ISOChronology[UTC]" + "'", str90, "ISOChronology[UTC]");
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime28 = dateTime20.minusMillis((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.withMillis((long) (byte) -1);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime28.toGregorianCalendar();
        int int32 = dateTime28.getMinuteOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long14 = dateTimeField9.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.LocalTime localTime28 = dateTime17.toLocalTime();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period38 = mutablePeriod35.toPeriod();
        int[] intArray39 = period38.getValues();
        int[] intArray41 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime28, 0, intArray39, 3);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant46 = instant44.minus(100L);
        org.joda.time.Instant instant48 = instant46.plus((long) 100);
        boolean boolean49 = instant46.isBeforeNow();
        org.joda.time.DateTime dateTime50 = instant46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes((int) (short) 100);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        java.util.Locale locale13 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = property3.getAsText(locale13);
        java.lang.String str16 = property3.getAsString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertEquals(locale13.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AD" + "'", str15, "AD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        boolean boolean65 = dateTime2.isAfter((-115706875723198030L));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        boolean boolean21 = interval16.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology22.days();
        int int26 = durationField12.compareTo(durationField25);
        long long29 = durationField25.add(1672531200000L, 1970);
        long long32 = durationField25.getDifferenceAsLong(1672531080000L, (long) (short) 10);
        long long34 = durationField25.getMillis((long) (-2));
        long long36 = durationField25.getMillis(11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1842739200000L + "'", long29 == 1842739200000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 19357L + "'", long32 == 19357L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-172800000L) + "'", long34 == (-172800000L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 950400000L + "'", long36 == 950400000L);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        int int5 = property2.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 1969);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant3.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTimeISO();
        java.lang.Object obj7 = null;
        org.joda.time.Instant instant8 = new org.joda.time.Instant(obj7);
        boolean boolean9 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration13.isEqual(readableDuration15);
        org.joda.time.Duration duration18 = duration13.minus((long) 1);
        org.joda.time.Duration duration20 = duration18.minus((long) '4');
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = duration23.toPeriod(chronology24);
        boolean boolean26 = duration18.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant27 = instant10.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration18);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = period28.getValue(119999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.lang.Object obj3 = null;
        org.joda.time.Instant instant4 = new org.joda.time.Instant(obj3);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        java.lang.String str6 = dateTimeZone5.toString();
        int int8 = dateTimeZone5.getOffset(1L);
        boolean boolean10 = dateTimeZone5.isStandardOffset(0L);
        java.lang.String str12 = dateTimeZone5.getNameKey((long) 1);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = dateTimeZone5.getName((long) (byte) 10, locale14);
        java.lang.String str16 = locale14.getLanguage();
        java.util.Locale.Builder builder17 = builder1.setLocale(locale14);
        java.lang.String str18 = locale14.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Franz\366sisch" + "'", str18, "Franz\366sisch");
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime2.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime2.withHourOfDay((-2147483647));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483647 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.plus((long) (byte) 0);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType37, chronology38);
        org.joda.time.PeriodType periodType40 = periodType37.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime32, periodType40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Instant instant47 = dateTime44.toInstant();
        org.joda.time.DateTime dateTime49 = dateTime44.withMillis((long) '4');
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.TimeOfDay timeOfDay54 = dateTime53.toTimeOfDay();
        org.joda.time.DateTime dateTime55 = dateTime44.withFields((org.joda.time.ReadablePartial) timeOfDay54);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = property59.withMinimumValue();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property63 = dateTime22.monthOfYear();
        org.joda.time.Interval interval64 = property63.toInterval();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("P999D", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=p999d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = duration5.plus((long) (byte) 0);
        org.joda.time.Minutes minutes9 = duration5.toStandardMinutes();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration5, periodType10);
        org.joda.time.Duration duration13 = duration5.toDuration();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration18 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration16, 11);
        long long19 = duration16.getMillis();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '4');
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime8.toMutableDateTime(dateTimeZone23);
        java.lang.String str25 = dateTimeZone23.toString();
        long long27 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, 1L);
        java.util.TimeZone timeZone28 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("2022-02-22T07:13:16.745Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:13:16.745Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long69 = dateTimeField66.set((long) 104, "PT1H10M11.001S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT1H10M11.001S\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setLanguage("");
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setVariant("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[yearOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((-26151850080L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((-1));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = duration6.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = duration6.toPeriodTo(readableInstant10);
        org.joda.time.Duration duration13 = duration6.withMillis((long) (short) 0);
        org.joda.time.Duration duration16 = duration6.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        boolean boolean21 = dateTime19.isEqual(10L);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime19, periodType22);
        java.lang.Object obj24 = null;
        org.joda.time.Instant instant25 = new org.joda.time.Instant(obj24);
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMonths((int) '#');
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears(23);
        org.joda.time.DateTime dateTime34 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant38 = instant36.minus(100L);
        java.lang.String str39 = instant38.toString();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = duration42.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = duration42.toPeriodTo(readableInstant46);
        org.joda.time.Duration duration49 = duration42.withMillis((long) (short) 0);
        org.joda.time.Instant instant50 = instant38.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, readableInstant59, periodType60);
        mutablePeriod61.setMonths((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime53.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant67 = instant66.toInstant();
        boolean boolean68 = dateTime53.isEqual((org.joda.time.ReadableInstant) instant67);
        boolean boolean69 = instant50.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Instant instant71 = instant50.minus(0L);
        boolean boolean72 = dateTime33.isAfter((org.joda.time.ReadableInstant) instant71);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str39, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.weekOfWeekyear();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        org.joda.time.DateTime dateTime23 = dateTime15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime25 = dateTime15.withYearOfEra(9);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = period30.getFieldTypes();
        int int32 = period30.getMinutes();
        org.joda.time.Weeks weeks33 = period30.toStandardWeeks();
        boolean boolean34 = weeks26.isGreaterThan(weeks33);
        org.joda.time.Weeks weeks36 = weeks26.dividedBy((-2147483551));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weeks36);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Period period9 = interval3.toPeriod();
        org.joda.time.Period period11 = period9.plusYears((-1));
        org.joda.time.Period period13 = period9.plusHours(1972);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.centuryOfEra();
        boolean boolean21 = property19.equals((java.lang.Object) "1969-12-31T23:59:59.899Z");
        java.util.Locale locale22 = java.util.Locale.KOREA;
        int int23 = property19.getMaximumTextLength(locale22);
        org.joda.time.DateTime dateTime25 = property19.setCopy("11");
        org.joda.time.Duration duration26 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.plusMinutes((int) (byte) -1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(365);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 0);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period3 = period1.normalizedStandard();
        org.joda.time.Period period5 = period3.minusMillis(2);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = period5.getValue(19045);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19045");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded(0L, (int) 'a');
        java.lang.Object obj10 = null;
        org.joda.time.Instant instant11 = new org.joda.time.Instant(obj10);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        java.lang.String str13 = dateTimeZone12.toString();
        long long15 = dateTimeZone12.nextTransition((long) (short) 100);
        java.lang.String str16 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime17 = dateTime9.withZone(dateTimeZone12);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration22 = null;
        boolean boolean23 = duration20.isEqual(readableDuration22);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration26.isEqual(readableDuration28);
        org.joda.time.Duration duration30 = duration20.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration26);
        mutablePeriod31.setHours(437);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime7 = dateTime2.minusMonths((int) 'x');
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.withMillis((long) 4);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration10);
        java.util.Date date15 = dateTime2.toDate();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:59:59 UTC 1969");
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.lang.String str9 = locale6.getScript();
        boolean boolean10 = locale6.hasExtensions();
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleKeys();
        java.lang.String str12 = locale6.getDisplayScript();
        java.util.Set<java.lang.Character> charSet13 = locale6.getExtensionKeys();
        org.joda.time.Hours hours14 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours16 = hours14.multipliedBy(0);
        org.joda.time.Hours hours18 = hours14.dividedBy(69);
        org.joda.time.PeriodType periodType19 = hours18.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) charSet13, periodType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        mutablePeriod5.setSeconds(20);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-100));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (-2147483551));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        int int6 = dateTimeZone3.getOffset(1L);
        boolean boolean8 = dateTimeZone3.isStandardOffset(0L);
        java.lang.String str10 = dateTimeZone3.getNameKey((long) 1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant23.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime26 = instant23.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType27);
        org.joda.time.Minutes minutes29 = duration21.toStandardMinutes();
        org.joda.time.DateTime dateTime30 = dateTime12.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        java.lang.String str8 = dateTimeField2.toString();
        long long11 = dateTimeField2.addWrapField((long) 292278993, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField2.getType();
        org.joda.time.DurationField durationField13 = dateTimeField2.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str8, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 292278993L + "'", long11 == 292278993L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.joda.time.Duration duration9 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration11 = null;
        boolean boolean12 = duration9.isEqual(readableDuration11);
        org.joda.time.Duration duration14 = duration9.minus((long) 1);
        org.joda.time.Duration duration16 = duration14.minus((long) '4');
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.plus((long) (byte) 0);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType37, chronology38);
        org.joda.time.PeriodType periodType40 = periodType37.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime32, periodType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration23, periodType40);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime19, periodType43);
        org.joda.time.Duration duration46 = duration14.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int57 = mutablePeriod56.getDays();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.Interval interval67 = property66.toInterval();
        boolean boolean68 = interval63.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Chronology chronology69 = interval67.getChronology();
        mutablePeriod56.setPeriod((long) 'u', (long) 1969, chronology69);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 100, chronology69);
        org.joda.time.Period period72 = duration46.toPeriod(chronology69);
        org.joda.time.DateTimeField dateTimeField73 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.monthOfYear();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (short) 10, periodType76);
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant80 = instant79.toInstant();
        org.joda.time.DateTime dateTime81 = instant80.toDateTimeISO();
        org.joda.time.Duration duration82 = period77.toDurationFrom((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Period period84 = period77.plusMonths(1969);
        org.joda.time.Period period86 = period84.withMinutes(2);
        org.joda.time.Period period88 = period84.minusMonths((-1));
        int[] intArray90 = chronology69.get((org.joda.time.ReadablePeriod) period84, 100L);
        long long94 = chronology69.add((long) (-10), 31536000000L, (int) ' ');
        org.joda.time.DateTimeField dateTimeField95 = chronology69.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(141022, (-52), (int) ' ', 45, 52, 5, 100, chronology69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1009151999990L + "'", long94 == 1009151999990L);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("2022-02-22T07:15:20.148Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:15:20.148Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        int int7 = minutes1.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod8 = minutes1.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = minutes1.negated();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2147483648) + "'", int7 == (-2147483648));
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = duration5.plus((long) (byte) 0);
        org.joda.time.Minutes minutes9 = duration5.toStandardMinutes();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withMinutesRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration5, periodType10);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.Instant instant15 = instant1.withMillis((-965L));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period3.minusSeconds(292278993);
        org.joda.time.Period period14 = period3.negated();
        int int15 = period3.getDays();
        org.joda.time.Period period17 = period3.withHours((-41297762));
        org.joda.time.Period period19 = period3.minusMinutes(365);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-26179201L));
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.Period period7 = duration1.toPeriod(periodType6);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("minutes");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("1970-02-18T11:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1970-02-18T11:59:59.999Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int16 = mutablePeriod15.getDays();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        boolean boolean27 = interval22.contains((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        mutablePeriod15.setPeriod((long) 'u', (long) 1969, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(1970, 10, 26033472, (-141012), 99, (-120), (int) '#', chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -141012 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        long long10 = instant5.getMillis();
        org.joda.time.Instant instant12 = instant5.plus(0L);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MIN_VALUE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = weeks0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 604800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((-12707002));
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days2 = days0.dividedBy((int) (byte) 1);
        org.joda.time.Days days4 = days0.dividedBy((int) (short) -1);
        org.joda.time.Days days6 = days4.dividedBy(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours7 = days6.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -113025455 * 24");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(days6);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.joda.time.Period period1 = org.joda.time.Period.months(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Period period5 = period1.withField(durationFieldType3, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days6 = period1.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Days as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears(1969);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.DateTime dateTime31 = dateTime27.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        boolean boolean36 = dateTime34.isEqual(10L);
        org.joda.time.DateTime dateTime38 = dateTime34.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        long long44 = dateTimeField41.add(0L, (long) (short) 1);
        long long47 = dateTimeField41.add(1L, (-1));
        int int48 = dateTime34.get(dateTimeField41);
        boolean boolean49 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period51 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period53 = period51.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period53.toDurationTo(readableInstant54);
        org.joda.time.Duration duration58 = duration55.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = duration58.toPeriodFrom(readableInstant59);
        org.joda.time.DateTime dateTime61 = dateTime31.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Minutes minutes62 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Minutes minutes66 = duration65.toStandardMinutes();
        int int67 = minutes66.size();
        org.joda.time.Minutes minutes69 = minutes66.plus((int) (byte) 1);
        int int70 = minutes69.size();
        org.joda.time.Minutes minutes71 = minutes62.minus(minutes69);
        org.joda.time.Minutes minutes73 = minutes69.minus((-100));
        org.joda.time.Minutes minutes75 = minutes73.plus(0);
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes77 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes79 = minutes77.minus((int) (short) -1);
        boolean boolean80 = minutes76.isGreaterThan(minutes77);
        org.joda.time.Minutes minutes81 = null;
        org.joda.time.Minutes minutes82 = minutes77.minus(minutes81);
        org.joda.time.Minutes minutes84 = minutes77.plus((int) (short) 1);
        org.joda.time.Period period85 = minutes77.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes86 = minutes73.minus(minutes77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Integer.MIN_VALUE cannot be negated");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 43200000L + "'", long44 == 43200000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-43199999L) + "'", long47 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(minutes66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(minutes75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(minutes82);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) 'u', 86399, (int) 'x', 24, 25985711, 720, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        boolean boolean68 = dateTimeField66.isLeap(1969L);
        java.lang.String str70 = dateTimeField66.getAsText(128770560000000019L);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "46" + "'", str70, "46");
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '4');
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime8.toMutableDateTime(dateTimeZone23);
        java.lang.String str25 = dateTimeZone23.toString();
        long long27 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, 1L);
        boolean boolean29 = dateTimeZone23.isStandardOffset(0L);
        java.lang.String str31 = dateTimeZone23.getName((long) 97);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration26 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.plus((long) (byte) 0);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        boolean boolean37 = dateTime35.isEqual(10L);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType40, chronology41);
        org.joda.time.PeriodType periodType43 = periodType40.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35, periodType43);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.Instant instant50 = dateTime47.toInstant();
        org.joda.time.DateTime dateTime52 = dateTime47.withMillis((long) '4');
        org.joda.time.Minutes minutes53 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime47);
        int int54 = dateTime47.getYear();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = duration57.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Period period62 = duration57.toPeriodTo(readableInstant61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant66 = instant64.minus(100L);
        java.lang.String str67 = instant66.toString();
        org.joda.time.Duration duration70 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period71 = duration70.toPeriod();
        org.joda.time.Duration duration73 = duration70.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Period period75 = duration70.toPeriodTo(readableInstant74);
        org.joda.time.Duration duration78 = duration70.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType81, chronology82);
        org.joda.time.PeriodType periodType84 = periodType81.withWeeksRemoved();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = duration78.toPeriod(periodType84, chronology85);
        org.joda.time.Period period87 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) instant66, periodType84);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime47, periodType84);
        org.joda.time.Duration duration89 = duration16.plus((org.joda.time.ReadableDuration) duration26);
        java.lang.Class<?> wildcardClass90 = duration16.getClass();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1969 + "'", int54 == 1969);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str67, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.multipliedBy(0);
        org.joda.time.Hours hours4 = hours0.dividedBy(69);
        int int5 = hours4.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 0, 346022409602000L);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.joda.time.Period period1 = org.joda.time.Period.days(1);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        long long16 = dateTime2.getMillis();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property40 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime25.withYear(1969);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = durationFieldType17.getField(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime2.toDateTime(chronology43);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.monthOfYear();
        long long50 = dateTimeField47.add((long) (-2147483551), 23);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 58332516449L + "'", long50 == 58332516449L);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException("days", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.Throwable throwable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException5.addSuppressed(throwable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.getHours();
        org.joda.time.Period period11 = period3.multipliedBy((int) (byte) 1);
        org.joda.time.Days days12 = period3.toStandardDays();
        org.joda.time.Period period14 = period3.minusMonths(31);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateTime27.getHourOfDay();
        org.joda.time.Days days33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant35 = instant24.withMillis((long) 53);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = duration2.toPeriod(chronology3);
        java.lang.String str5 = duration2.toString();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        org.joda.time.DateTime.Property property23 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime21.plusHours((int) 'u');
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withFields(readablePartial31);
        org.joda.time.DateTime dateTime34 = dateTime29.withYearOfEra(292278993);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime29);
        int int36 = dateTime26.getMonthOfYear();
        org.joda.time.DateTime dateTime37 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period39 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime26, periodType38);
        org.joda.time.Period period41 = period39.plusDays((int) (short) 10);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.011S" + "'", str5, "PT0.011S");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.joda.time.Period period1 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period1);
        int int3 = weeks2.getWeeks();
        java.lang.String str4 = weeks2.toString();
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.weeks(1970);
        org.joda.time.Weeks weeks8 = weeks6.dividedBy((int) 'u');
        boolean boolean9 = weeks2.isGreaterThan(weeks8);
        org.joda.time.Weeks weeks11 = weeks2.multipliedBy(1800);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P11W" + "'", str4, "P11W");
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(weeks11);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(3732479956800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3732479956800000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Duration duration24 = duration20.toDuration();
        org.joda.time.Duration duration25 = duration5.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) 10, periodType27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTime dateTime32 = instant31.toDateTimeISO();
        org.joda.time.Duration duration33 = period28.toDurationFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period38 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period40 = period38.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = period40.toDurationTo(readableInstant41);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = duration45.toPeriodFrom(readableInstant46);
        org.joda.time.Duration duration48 = duration36.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration49 = duration33.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Days days50 = duration49.toStandardDays();
        org.joda.time.Duration duration52 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration49, 35);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(days50);
        org.junit.Assert.assertNotNull(duration52);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        java.util.Locale locale12 = new java.util.Locale("+00:00");
        boolean boolean13 = dateTime8.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.withMillisOfDay(4);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType34, chronology35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType34);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime16, periodType34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        boolean boolean47 = interval42.contains((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime16.toMutableDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.hourOfHalfday();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(141012, 0, 432, 1972, 292278993, 141022, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(locale12.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        long long39 = dateTime25.getMillis();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.withZoneRetainFields(dateTimeZone44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        org.joda.time.DateTime.Property property49 = dateTime48.era();
        org.joda.time.DateTime dateTime50 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, readableInstant54, periodType55);
        mutablePeriod56.setMonths((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime48.plus((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DateTime dateTime61 = dateTime48.minusWeeks((int) (byte) 1);
        int int62 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property63 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime65 = dateTime48.withYear(1969);
        org.joda.time.Chronology chronology66 = dateTime65.getChronology();
        org.joda.time.DurationField durationField67 = durationFieldType40.getField(chronology66);
        org.joda.time.DateTime dateTime68 = dateTime25.toDateTime(chronology66);
        int int69 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTime22.getDayOfYear();
        org.joda.time.DateTime dateTime71 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime73 = dateTime71.withMillis((long) 999);
        boolean boolean75 = dateTime73.isBefore(17038080020972L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 365 + "'", int70 == 365);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime26 = dateTime9.minusHours((-100));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime9.withWeekOfWeekyear(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.setSeconds(100);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        int int25 = dateTimeZone22.getOffset(1L);
        boolean boolean27 = dateTimeZone22.isStandardOffset(0L);
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(1969);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks(1439);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.LocalDate localDate47 = dateTime35.toLocalDate();
        int int48 = localDate47.size();
        org.joda.time.DateTime dateTime49 = dateTime32.withFields((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        boolean boolean54 = dateTime52.isEqual(10L);
        org.joda.time.DateTime dateTime56 = dateTime52.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime58 = dateTime52.plusDays(100);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadableInterval readableInterval60 = null;
        mutablePeriod3.add(readableInterval60);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.addMonths((int) (short) 1);
        mutablePeriod5.addMillis(0);
        mutablePeriod5.addDays((int) (short) -1);
        mutablePeriod5.add(22, 49, (int) (short) 0, 11, 120, 101, 366, 78719999);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("2010-02-18T11:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2010-02-18T11:59:59.999Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.toMutablePeriod();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        int int26 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property27 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime12.withYear(1969);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology30.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) mutablePeriod4, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(432);
        org.joda.time.Seconds seconds2 = weeks1.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = weeks1.getFieldType(26033472);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 26033472");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration10.toPeriod(periodType16, chronology17);
        org.joda.time.Minutes minutes19 = duration10.toStandardMinutes();
        long long20 = duration10.getStandardSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        int int16 = dateTime14.getWeekOfWeekyear();
        int int17 = dateTime14.getMonthOfYear();
        boolean boolean18 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        int int23 = dateTime20.get(dateTimeFieldType21);
        java.lang.String str24 = dateTimeFieldType21.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hourOfDay" + "'", str24, "hourOfDay");
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int9 = dateTimeField2.get((-1L));
        long long11 = dateTimeField2.remainder((long) (byte) 0);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        int int13 = dateTimeField2.getMaximumShortTextLength(locale12);
        boolean boolean14 = dateTimeField2.isSupported();
        boolean boolean16 = dateTimeField2.isLeap((long) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = dateTime19.toLocalDate();
        int int32 = localDate31.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        boolean boolean42 = interval37.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.yearOfEra();
        org.joda.time.DurationField durationField48 = chronology43.weeks();
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes52 = minutes50.minus((int) (short) -1);
        boolean boolean53 = minutes49.isGreaterThan(minutes50);
        org.joda.time.Minutes minutes54 = null;
        org.joda.time.Minutes minutes55 = minutes50.minus(minutes54);
        org.joda.time.Minutes minutes57 = minutes50.plus((int) (short) 1);
        org.joda.time.Minutes minutes59 = minutes57.plus((int) (short) 1);
        int[] intArray61 = chronology43.get((org.joda.time.ReadablePeriod) minutes59, (long) (short) 100);
        org.joda.time.format.PeriodPrinter periodPrinter63 = null;
        org.joda.time.format.PeriodParser periodParser64 = null;
        org.joda.time.format.PeriodFormatter periodFormatter65 = new org.joda.time.format.PeriodFormatter(periodPrinter63, periodParser64);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter65.withParseType(periodType66);
        java.util.Locale locale68 = periodFormatter65.getLocale();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = locale69.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter65.withLocale(locale69);
        org.joda.time.format.PeriodPrinter periodPrinter72 = null;
        org.joda.time.format.PeriodParser periodParser73 = null;
        org.joda.time.format.PeriodFormatter periodFormatter74 = new org.joda.time.format.PeriodFormatter(periodPrinter72, periodParser73);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter76 = periodFormatter74.withParseType(periodType75);
        java.util.Locale locale77 = periodFormatter74.getLocale();
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.lang.String str79 = locale78.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter74.withLocale(locale78);
        java.util.Locale locale81 = locale78.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter82 = periodFormatter71.withLocale(locale81);
        java.util.Locale locale83 = periodFormatter71.getLocale();
        java.util.Locale locale84 = locale83.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField2.set((org.joda.time.ReadablePartial) localDate31, (-117), intArray61, "p-1970w", locale83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"p-1970w\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNull(locale68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodFormatter76);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("P6D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(29227899301L, 141022L);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMillis();
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.add((long) 8, chronology15);
        mutablePeriod5.addMillis(86399999);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.joda.time.Period period1 = org.joda.time.Period.months(11);
        org.joda.time.Period period2 = period1.toPeriod();
        org.joda.time.Period period4 = period2.plusDays((int) 'x');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("0001-05-22T07:14:51.867Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0001-05-22t07:14:51.867z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        boolean boolean23 = dateTime21.isEqual(10L);
        org.joda.time.DateTime dateTime25 = dateTime21.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        long long31 = dateTimeField28.add(0L, (long) (short) 1);
        long long34 = dateTimeField28.add(1L, (-1));
        int int35 = dateTime21.get(dateTimeField28);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant44, periodType45);
        mutablePeriod46.setMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTime dateTime51 = dateTime38.minusWeeks((int) (byte) 1);
        long long52 = dateTime38.getMillis();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withZoneRetainFields(dateTimeZone57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.DateTime dateTime63 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.Duration duration66 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, readableInstant67, periodType68);
        mutablePeriod69.setMonths((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime61.plus((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DateTime dateTime74 = dateTime61.minusWeeks((int) (byte) 1);
        int int75 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property76 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime61.withYear(1969);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.joda.time.DurationField durationField80 = durationFieldType53.getField(chronology79);
        org.joda.time.DateTime dateTime81 = dateTime38.toDateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime21.toDateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime15.withChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField84 = chronology79.secondOfDay();
        boolean boolean86 = dateTimeField84.isLeap(378683424000009L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 43200000L + "'", long31 == 43200000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-43199999L) + "'", long34 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration10 = period9.toStandardDuration();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period12 = period9.normalizedStandard(periodType11);
        org.joda.time.Period period14 = period12.multipliedBy((int) '4');
        org.joda.time.Period period16 = period14.plusHours((int) '#');
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime19.minusMonths((int) 'x');
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.withMillis((long) 4);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration27);
        mutablePeriod31.addWeeks(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        mutablePeriod5.add(3599999000L, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue((-120), (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition(2980800000L);
        java.lang.Object obj4 = null;
        org.joda.time.Instant instant5 = new org.joda.time.Instant(obj4);
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getName((long) 10);
        long long12 = dateTimeZone6.convertLocalToUTC((long) (byte) -1, true);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-720L));
        boolean boolean16 = dateTimeZone6.isStandardOffset(676L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2980800000L + "'", long3 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-720L) + "'", long14 == (-720L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(2);
        org.joda.time.DateTime dateTime34 = dateTime30.withHourOfDay((int) (byte) 0);
        int int35 = dateTime34.getSecondOfMinute();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant44, periodType45);
        mutablePeriod46.setMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTime dateTime51 = dateTime38.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property52 = dateTime51.monthOfYear();
        org.joda.time.DateTime.Property property53 = dateTime51.weekyear();
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime57 = dateTime54.withZone(dateTimeZone56);
        boolean boolean58 = dateTime34.equals((java.lang.Object) dateTime57);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        mutablePeriod5.add(3599999000L, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfYear();
        org.joda.time.DurationField durationField24 = chronology18.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology18.getDateTimeMillis((int) (short) 0, 22, 24, 45, 435, 26235748, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        int int4 = dateTime2.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime2.withSecondOfMinute(201);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 201 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy(59);
        org.joda.time.Duration duration3 = weeks0.toStandardDuration();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        int int25 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property26 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime11.withYear(1969);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.hourOfHalfday();
        boolean boolean33 = duration3.equals((java.lang.Object) dateTimeField32);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("P0D");
        org.joda.time.Days days2 = seconds1.toStandardDays();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0, periodType8, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = periodType8.indexOf(durationFieldType13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType8);
        boolean boolean16 = periodFormatter15.isPrinter();
        org.joda.time.format.PeriodParser periodParser17 = periodFormatter15.getParser();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType20, chronology21);
        org.joda.time.PeriodType periodType23 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType25);
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter15.withParseType(periodType25);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.minutes();
        int int30 = days28.get(durationFieldType29);
        org.joda.time.MutablePeriod mutablePeriod31 = days28.toMutablePeriod();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.Interval interval35 = property34.toInterval();
        mutablePeriod31.add((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        boolean boolean50 = interval45.contains((org.joda.time.ReadableInterval) interval49);
        java.lang.String str51 = interval49.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.Interval interval59 = property58.toInterval();
        boolean boolean60 = interval55.contains((org.joda.time.ReadableInterval) interval59);
        boolean boolean61 = interval49.isBefore((org.joda.time.ReadableInterval) interval59);
        mutablePeriod41.setPeriod((org.joda.time.ReadableInterval) interval59);
        mutablePeriod41.addMinutes((int) (short) 10);
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = periodFormatter15.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod41, "19", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(periodParser17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str51, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        mutablePeriod5.add((int) (short) 100, (int) (byte) 0, 100, (int) (byte) 1, (int) 'a', (int) (byte) 0, 8, (int) (short) 10);
        mutablePeriod5.setWeeks(70);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = period28.getFieldTypes();
        org.joda.time.Period period31 = period28.minusYears((int) (byte) 1);
        org.joda.time.Period period33 = period28.plusMonths((int) (byte) 0);
        int int34 = period28.size();
        org.joda.time.Period period36 = period28.plusYears(100);
        org.joda.time.Period period37 = period28.normalizedStandard();
        org.joda.time.Period period38 = period28.normalizedStandard();
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) period38);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue(201, (-27349920));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 201");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Days days38 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Hours hours39 = days38.toStandardHours();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(hours39);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType6, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) 0, periodType6, chronology9);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (short) 10, periodType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.DateTime dateTime17 = instant16.toDateTimeISO();
        org.joda.time.Duration duration18 = period13.toDurationFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period23 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period25 = period23.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationTo(readableInstant26);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period32 = duration30.toPeriodFrom(readableInstant31);
        org.joda.time.Duration duration33 = duration21.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int48 = mutablePeriod47.getDays();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfEra();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.Interval interval58 = property57.toInterval();
        boolean boolean59 = interval54.contains((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        mutablePeriod47.setPeriod((long) 'u', (long) 1969, chronology60);
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 100, chronology60);
        mutablePeriod10.setPeriod((long) 1, (long) 69, chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.year();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, chronology60);
        org.joda.time.DateTimeField dateTimeField66 = chronology60.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(3L, 1970L, chronology60);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes21 = minutes19.minus((int) (short) -1);
        boolean boolean22 = minutes18.isGreaterThan(minutes19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.DateTime dateTime25 = dateTime8.plus((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DurationField durationField28 = property27.getLeapDurationField();
        int int29 = property27.getMaximumValueOverall();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        boolean boolean38 = interval33.contains((org.joda.time.ReadableInterval) interval37);
        java.lang.String str39 = interval33.toString();
        long long40 = interval33.getEndMillis();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        int int46 = dateTime44.getWeekOfWeekyear();
        int int47 = dateTime44.getMonthOfYear();
        boolean boolean48 = interval33.isBefore((org.joda.time.ReadableInstant) dateTime44);
        int int49 = property27.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalTime localTime50 = dateTime44.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime44.withCenturyOfEra((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str39, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1672531200000L + "'", long40 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        java.lang.Object obj11 = mutablePeriod5.clone();
        mutablePeriod5.addYears(12);
        mutablePeriod5.clear();
        mutablePeriod5.addSeconds(101);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT101S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT101S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT101S");
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes13 = minutes11.multipliedBy((-102267));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 525600 * -102267");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property27 = dateTime8.minuteOfDay();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        java.lang.String str32 = instant31.toString();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Instant instant43 = instant31.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = instant31.isSupported(dateTimeFieldType44);
        boolean boolean46 = dateTime8.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime dateTime48 = dateTime8.minusHours(432);
        int int49 = dateTime8.getSecondOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str32, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 86399 + "'", int49 == 86399);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("PT-2147483647M");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: PT-2147483647M [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.setWeeks(7);
        int int13 = mutablePeriod5.getHours();
        mutablePeriod5.setPeriod((int) (short) 0, (int) (byte) 100, 1969, (-1), 0, (int) (byte) 100, 169, 1969);
        int int23 = mutablePeriod5.getMonths();
        mutablePeriod5.addSeconds(11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.joda.time.Period period1 = org.joda.time.Period.months((-2));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days2 = days0.dividedBy((int) (byte) 1);
        org.joda.time.Days days4 = days0.dividedBy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours5 = days0.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 24");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days4);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period4 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period6 = period4.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationTo(readableInstant7);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration11.toPeriodFrom(readableInstant12);
        org.joda.time.Duration duration14 = duration2.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant18 = instant16.minus(100L);
        org.joda.time.Instant instant20 = instant18.plus((long) 100);
        org.joda.time.Instant instant22 = instant18.withMillis((long) (byte) 1);
        org.joda.time.Period period24 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period26 = period24.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationTo(readableInstant27);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant35 = instant33.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime36 = instant33.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period38 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime36, periodType37);
        org.joda.time.Instant instant39 = instant22.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant40 = instant22.toInstant();
        org.joda.time.Instant instant42 = instant40.withMillis((long) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant46 = instant44.minus(100L);
        org.joda.time.Instant instant48 = instant46.plus((long) 100);
        org.joda.time.Instant instant50 = instant46.withMillis((long) (byte) 1);
        org.joda.time.Period period52 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period54 = period52.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Duration duration56 = period54.toDurationTo(readableInstant55);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant63 = instant61.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime64 = instant61.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period66 = duration59.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime64, periodType65);
        org.joda.time.Instant instant67 = instant50.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Instant instant68 = instant50.toInstant();
        org.joda.time.DateTime dateTime69 = instant68.toDateTime();
        int int70 = instant40.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTime();
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval73 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(365, 26235748, 69, (-41297762));
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.joda.time.Period period2 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period4 = period2.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationTo(readableInstant5);
        org.joda.time.Duration duration9 = duration6.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = duration9.toPeriodFrom(readableInstant10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18, periodType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration9.toPeriod(periodType35, chronology38);
        org.joda.time.Hours hours40 = org.joda.time.Hours.TWO;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        boolean boolean43 = hours40.isSupported(durationFieldType42);
        boolean boolean44 = periodType35.isSupported(durationFieldType42);
        org.joda.time.Period period45 = new org.joda.time.Period((long) 7, periodType35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = period45.withMonths(26075160);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int6 = mutableDateTime4.get(dateTimeFieldType5);
        int int7 = mutableDateTime4.getYearOfEra();
        int int8 = mutableDateTime4.getWeekOfWeekyear();
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 999 + "'", int9 == 999);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime1.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime5 = dateTime1.toLocalDateTime();
        org.joda.time.DateTime.Property property6 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime1.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 1, (int) (short) 10, 11, 1);
        mutablePeriod4.add(100L);
        mutablePeriod4.addMinutes((-2147483648));
        java.lang.String str9 = mutablePeriod4.toString();
        mutablePeriod4.addMonths(86399);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1H-2147483638M11.101S" + "'", str9, "PT1H-2147483638M11.101S");
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.DateTime dateTime13 = instant12.toDateTimeISO();
        boolean boolean14 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime13.withMillisOfDay(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime18.withDate(119999, 100, (-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        int int47 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property48 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime33.withYear(1969);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType25.getField(chronology51);
        mutablePeriod5.add((-43199999L), chronology51);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod5.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue(365, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 365");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(mutablePeriod54);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.joda.time.Period period8 = new org.joda.time.Period((int) 'u', (-19), 432, 26235748, 1969, (int) '4', 26075160, 8);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period5 = period1.minusMonths(1972);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((java.lang.Object) period1);
        int int7 = period1.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Seconds seconds5 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval4);
        org.joda.time.Chronology chronology6 = interval4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(4518853044L, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology6.getDateTimeMillis((-102267), (int) (short) 1, 0, 321, 19, 3, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 321 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.DateTime dateTime3 = instant2.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(10);
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy((-10));
        java.lang.String str9 = property6.getAsString();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        java.lang.String str16 = duration12.toString();
        org.joda.time.Seconds seconds17 = duration12.toStandardSeconds();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = duration20.toPeriodTo(readableInstant24);
        org.joda.time.Duration duration27 = duration20.withMillis((long) (short) 0);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType36);
        long long38 = dateTime33.getMillis();
        org.joda.time.Instant instant39 = dateTime33.toInstant();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType43, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) 0, periodType43, chronology46);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        int int49 = periodType43.indexOf(durationFieldType48);
        org.joda.time.PeriodType periodType50 = periodType43.withYearsRemoved();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime33, periodType50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime33.getZone();
        org.joda.time.DateTime dateTime54 = dateTime33.plusDays((-292275054));
        org.joda.time.DateTime dateTime56 = dateTime54.withYear(52);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = property6.getDifference((org.joda.time.ReadableInstant) dateTime54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 420876077760");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.011S" + "'", str16, "PT0.011S");
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-10), 97, 99, 69);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutablePeriod4.set(durationFieldType6, 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale6 = periodFormatter3.getLocale();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        org.joda.time.format.PeriodPrinter periodPrinter10 = null;
        org.joda.time.format.PeriodParser periodParser11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = new org.joda.time.format.PeriodFormatter(periodPrinter10, periodParser11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withParseType(periodType13);
        java.util.Locale locale15 = periodFormatter12.getLocale();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter12.withLocale(locale16);
        java.util.Locale locale19 = locale16.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter9.withLocale(locale19);
        boolean boolean21 = periodFormatter9.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = org.joda.time.Period.parse("Januar", periodFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval7);
        mutablePeriod3.setPeriod((int) (byte) 10, 1972, (-1), 10, 86399, 31, 7, 4);
        mutablePeriod3.addYears(35);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus((int) (short) -1);
        boolean boolean16 = minutes12.isGreaterThan(minutes13);
        org.joda.time.Minutes minutes17 = null;
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        int int19 = minutes13.getMinutes();
        org.joda.time.DateTime dateTime21 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) minutes13, 19);
        org.joda.time.DateTime dateTime23 = dateTime11.plusMinutes(3);
        int int24 = dateTime23.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime23.withMonthOfYear((-102267));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -102267 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 440 + "'", int24 == 440);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime7.withDayOfWeek(28995);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28995 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 1970);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withFields(readablePartial9);
        org.joda.time.DateMidnight dateMidnight11 = dateTime10.toDateMidnight();
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period(2980800000L, 2678400000L, periodType4, chronology12);
        org.joda.time.DurationField durationField14 = chronology12.seconds();
        org.joda.time.Period period15 = duration1.toPeriod(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology12.getDateTimeMillis(1970, 26033472, 2, 999, 365, 20, (-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus((int) (short) -1);
        boolean boolean16 = minutes12.isGreaterThan(minutes13);
        org.joda.time.Minutes minutes17 = null;
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        int int19 = minutes13.getMinutes();
        org.joda.time.DateTime dateTime21 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) minutes13, 19);
        org.joda.time.DateTime dateTime23 = dateTime11.plusMinutes(3);
        int int24 = dateTime23.getSecondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26449 + "'", int24 == 26449);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int8 = dateTimeField2.getMinimumValue();
        long long10 = dateTimeField2.roundHalfEven((long) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localTime16, 0, locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        boolean boolean29 = interval24.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.TimeOfDay timeOfDay36 = dateTime35.toTimeOfDay();
        int int37 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.Hours hours38 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        int int44 = property42.getMaximumValueOverall();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.getScript();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = property42.getMaximumShortTextLength(locale45);
        org.joda.time.DateTime dateTime49 = property42.withMaximumValue();
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant54 = instant52.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime55 = instant52.toMutableDateTimeISO();
        java.lang.Object obj56 = null;
        org.joda.time.Instant instant57 = new org.joda.time.Instant(obj56);
        boolean boolean58 = mutableDateTime55.isAfter((org.joda.time.ReadableInstant) instant57);
        boolean boolean59 = localTime50.equals((java.lang.Object) mutableDateTime55);
        org.joda.time.Chronology chronology60 = localTime50.getChronology();
        org.joda.time.Period period61 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period63 = period61.withYears(24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-120000L) + "'", long10 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AM" + "'", str20, "AM");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        int int1 = days0.getDays();
        org.joda.time.Weeks weeks2 = days0.toStandardWeeks();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        boolean boolean12 = dateTime10.isEqual(10L);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType15, chronology16);
        org.joda.time.PeriodType periodType18 = periodType15.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10, periodType18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Instant instant25 = dateTime22.toInstant();
        org.joda.time.DateTime dateTime27 = dateTime22.withMillis((long) '4');
        org.joda.time.Minutes minutes28 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime22);
        int int29 = dateTime22.getYear();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = duration32.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = duration32.toPeriodTo(readableInstant36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant41 = instant39.minus(100L);
        java.lang.String str42 = instant41.toString();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration48 = duration45.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = duration45.toPeriodTo(readableInstant49);
        org.joda.time.Duration duration53 = duration45.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType56, chronology57);
        org.joda.time.PeriodType periodType59 = periodType56.withWeeksRemoved();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration53.toPeriod(periodType59, chronology60);
        org.joda.time.Period period62 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) instant41, periodType59);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime22, periodType59);
        int int64 = dateTime22.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime22.withDayOfYear(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(minutes28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str42, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(86399999, 26075160, (int) 'u', 366, 52, 1970, 292278993, 248400000);
        mutablePeriod8.addYears(11);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue((int) (byte) 100, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.joda.time.Period period2 = new org.joda.time.Period(0L, 1512000000L);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        mutablePeriod4.add(6, (-102267), (int) 'u', 1972, 366, (int) 'x', 11, 169);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) 'a', (-1339199999), 1439, 26075160);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime30 = dateTime20.plusWeeks(25985711);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant34 = instant32.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone35.nextTransition(43200000L);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = property43.withMinimumValue();
        int int45 = property43.getMaximumValueOverall();
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str51 = locale46.getDisplayCountry(locale50);
        java.lang.String str52 = locale50.getDisplayVariant();
        int int53 = property43.getMaximumShortTextLength(locale50);
        java.util.Locale.setDefault(category39, locale50);
        java.lang.String str55 = dateTimeZone35.getShortName((long) (-1), locale50);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZone(dateTimeZone59);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean67 = dateTime63.isSupported(dateTimeFieldType66);
        org.joda.time.DateTime.Property property68 = dateTime58.property(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime58.getZone();
        org.joda.time.LocalDateTime localDateTime70 = dateTime58.toLocalDateTime();
        boolean boolean71 = dateTimeZone35.isLocalDateTimeGap(localDateTime70);
        org.joda.time.DateTime dateTime72 = dateTime30.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime74 = dateTime30.withYearOfCentury(0);
        int int75 = dateTime30.getHourOfDay();
        org.joda.time.DateTime dateTime77 = dateTime30.minusWeeks(365);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime30.withDayOfMonth(19045);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19045 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 43200000L + "'", long37 == 43200000L);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Italy" + "'", str51, "Italy");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        boolean boolean11 = periodType6.equals((java.lang.Object) builder10);
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("und");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("1969-12-31T23:59:59.899Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T23:59:59.899Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.setWeeks(7);
        mutablePeriod5.clear();
        org.joda.time.Period period14 = mutablePeriod5.toPeriod();
        mutablePeriod5.addYears(78719999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days17 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) mutablePeriod5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P78719999Y");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        int int9 = dateTimeField2.getMaximumTextLength(locale8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        long long15 = dateTimeField12.add(0L, (long) (short) 1);
        boolean boolean17 = dateTimeField12.isLeap(10L);
        int int18 = dateTimeField12.getMinimumValue();
        long long20 = dateTimeField12.roundHalfEven((long) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayScript();
        java.lang.String str30 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localTime26, 0, locale28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        boolean boolean39 = interval34.contains((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfHour();
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.TimeOfDay timeOfDay46 = dateTime45.toTimeOfDay();
        int int47 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay46);
        org.joda.time.Hours hours48 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) timeOfDay46);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int59 = mutablePeriod58.getDays();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        mutablePeriod58.setPeriod((long) 'u', (long) 1969, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.millisOfDay();
        org.joda.time.Period period75 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period77 = period75.minusMonths((int) (short) 10);
        int[] intArray80 = chronology71.get((org.joda.time.ReadablePeriod) period75, (long) 70, (long) (-8));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField2.addWrapPartial((org.joda.time.ReadablePartial) localTime26, 910, intArray80, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 910");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 43200000L + "'", long15 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-120000L) + "'", long20 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AM" + "'", str30, "AM");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 0, 0, -78]");
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period10 = period3.toPeriod();
        org.joda.time.Period period12 = period10.withDays(0);
        org.joda.time.Period period14 = period10.minusWeeks(2);
        org.joda.time.Period period15 = period14.negated();
        int int16 = period14.getHours();
        org.joda.time.Period period18 = period14.minusHours(35);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval7);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        java.lang.String str23 = interval21.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        boolean boolean32 = interval27.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean33 = interval21.isBefore((org.joda.time.ReadableInterval) interval31);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInterval) interval31);
        mutablePeriod13.addMinutes((int) (short) 10);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        int int38 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str23, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime2.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.withFields(readablePartial4);
        org.joda.time.DateTime dateTime7 = dateTime2.withYearOfEra(292278993);
        int int8 = dateTime7.getHourOfDay();
        org.joda.time.Seconds seconds9 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod11 = seconds10.toMutablePeriod();
        boolean boolean12 = seconds9.isGreaterThan(seconds10);
        java.lang.String str13 = seconds9.toString();
        org.joda.time.PeriodType periodType14 = seconds9.getPeriodType();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime35 = dateTime22.minusWeeks((int) (byte) 1);
        int int36 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property37 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime22.withYear(1969);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfHalfday();
        long long48 = chronology40.add((long) 86399999, (long) 9, (int) '4');
        org.joda.time.DurationField durationField49 = chronology40.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) int8, periodType14, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 86400467L + "'", long48 == 86400467L);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.joda.time.Period period2 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period4 = period2.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationTo(readableInstant5);
        org.joda.time.Duration duration9 = duration6.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = duration9.toPeriodFrom(readableInstant10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18, periodType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration9.toPeriod(periodType35, chronology38);
        org.joda.time.Hours hours40 = org.joda.time.Hours.TWO;
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        boolean boolean43 = hours40.isSupported(durationFieldType42);
        boolean boolean44 = periodType35.isSupported(durationFieldType42);
        org.joda.time.Period period45 = new org.joda.time.Period((long) 7, periodType35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = period45.minusHours(910);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        long long7 = dateTimeField4.add(0L, (long) (short) 1);
        long long9 = dateTimeField4.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant17 = instant15.minus(100L);
        org.joda.time.Instant instant19 = instant17.plus((long) 100);
        org.joda.time.Instant instant21 = instant17.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.LocalTime localTime23 = dateTime12.toLocalTime();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.Period period33 = mutablePeriod30.toPeriod();
        int[] intArray34 = period33.getValues();
        int[] intArray36 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) localTime23, 0, intArray34, 3);
        long long38 = dateTimeField4.roundFloor((long) 12);
        boolean boolean39 = minutes1.equals((java.lang.Object) dateTimeField4);
        org.joda.time.Minutes minutes41 = minutes1.multipliedBy(141022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType43 = minutes41.getFieldType(248400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 248400000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 43200000L + "'", long7 == 43200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-120000L) + "'", long9 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 52, 0, 0, 0, 0, 0, 11]");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-120000L) + "'", long38 == (-120000L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes41);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.setYears((int) (short) 100);
        org.joda.time.Period period11 = org.joda.time.Period.seconds((int) (short) 0);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.Period period20 = mutablePeriod17.toPeriod();
        org.joda.time.Period period21 = period11.withFields((org.joda.time.ReadablePeriod) period20);
        mutablePeriod5.add((org.joda.time.ReadablePeriod) period11);
        mutablePeriod5.setYears((int) (short) 10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0, periodType8, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = periodType8.indexOf(durationFieldType13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType8);
        org.joda.time.PeriodType periodType16 = periodFormatter2.getParseType();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        org.joda.time.Days days23 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.minutes();
        int int25 = days23.get(durationFieldType24);
        mutablePeriod22.add(durationFieldType24, 8);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutablePeriod22.add(readablePeriod28);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod22, "Italienisch", 78719999);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNull(periodType16);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        int int19 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime15.minus((long) (short) 100);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withChronology(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(433);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 433 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 119 + "'", int19 == 119);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("java.io.IOException: java.io.IOException: +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: java.io.IOE...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime23 = dateTime15.withMinuteOfHour(0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant32, periodType33);
        mutablePeriod34.setMonths((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime26.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.lang.Object obj38 = null;
        org.joda.time.Instant instant39 = new org.joda.time.Instant(obj38);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        int int43 = dateTimeZone40.getOffset(1L);
        boolean boolean45 = dateTimeZone40.isStandardOffset(0L);
        org.joda.time.DateTime dateTime46 = dateTime26.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime48 = dateTime46.plusYears(1969);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks(1439);
        java.util.GregorianCalendar gregorianCalendar51 = dateTime48.toGregorianCalendar();
        boolean boolean52 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime48);
        java.util.Locale.Category category54 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category54, locale56);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("11");
        java.util.Locale.setDefault(category54, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTime15.toString("p-1970w", locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.FORMAT + "'", category54.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Weeks weeks6 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks8 = weeks6.multipliedBy((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        java.lang.String str18 = interval12.toString();
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval12);
        org.joda.time.PeriodType periodType20 = weeks19.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod21 = weeks19.toMutablePeriod();
        org.joda.time.Weeks weeks22 = weeks8.plus(weeks19);
        int int23 = weeks22.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str18, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        org.joda.time.Days days21 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        int int23 = days21.get(durationFieldType22);
        boolean boolean24 = days19.isGreaterThan(days21);
        org.joda.time.Days days26 = days19.dividedBy((int) (byte) 1);
        org.joda.time.Days days27 = org.joda.time.Days.SIX;
        boolean boolean28 = days26.isLessThan(days27);
        org.joda.time.Days days30 = days27.plus(10);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = days30.getValue(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(days30);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.joda.time.Period period1 = org.joda.time.Period.months(676);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        long long13 = dateTimeField2.remainder(432000000L);
        int int14 = dateTimeField2.getMaximumValue();
        int int16 = dateTimeField2.getMinimumValue((long) 12);
        org.joda.time.DurationField durationField17 = dateTimeField2.getRangeDurationField();
        int int20 = durationField17.getDifference(17536739580000L, (-16752242083571L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 120000L + "'", long13 == 120000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 396863 + "'", int20 == 396863);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.years();
        boolean boolean2 = periodType0.isSupported(durationFieldType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.minusWeeks((int) (byte) 1);
        int int24 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property25 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime10.withYear(1969);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology28.seconds();
        boolean boolean33 = durationFieldType1.isSupported(chronology28);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant37 = instant35.minus(100L);
        java.lang.String str38 = instant37.toString();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = duration41.toPeriodTo(readableInstant45);
        org.joda.time.Duration duration48 = duration41.withMillis((long) (short) 0);
        org.joda.time.Instant instant49 = instant37.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.Interval interval53 = property52.toInterval();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        boolean boolean58 = interval53.contains((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Chronology chronology59 = interval57.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weeks();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.minuteOfHour();
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.TimeOfDay timeOfDay65 = dateTime64.toTimeOfDay();
        int int66 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay65);
        java.lang.String str67 = dateTimeField61.toString();
        int int68 = instant37.get(dateTimeField61);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.TimeOfDay timeOfDay72 = dateTime71.toTimeOfDay();
        int int73 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay72);
        long long75 = chronology28.set((org.joda.time.ReadablePartial) timeOfDay72, (long) 78719999);
        org.joda.time.DurationField durationField76 = chronology28.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long78 = durationField76.getMillis((-292275054L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -292275054 * 3155695200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str38, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str67, "DateTimeField[minuteOfHour]");
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale6 = periodFormatter3.getLocale();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        org.joda.time.format.PeriodPrinter periodPrinter10 = null;
        org.joda.time.format.PeriodParser periodParser11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = new org.joda.time.format.PeriodFormatter(periodPrinter10, periodParser11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withParseType(periodType13);
        java.util.Locale locale15 = periodFormatter12.getLocale();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter12.withLocale(locale16);
        java.util.Locale locale19 = locale16.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter9.withLocale(locale19);
        org.joda.time.PeriodType periodType21 = periodFormatter20.getParseType();
        boolean boolean22 = periodFormatter20.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period23 = org.joda.time.Period.parse("ko", periodFormatter20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.multipliedBy((int) (byte) 0);
        org.joda.time.Seconds seconds5 = seconds1.minus(86399999);
        int int6 = seconds1.size();
        java.lang.String str7 = seconds1.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int8 = dateTimeField2.getMinimumValue();
        long long10 = dateTimeField2.roundHalfEven((long) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localTime16, 0, locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        boolean boolean29 = interval24.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology30 = interval28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.TimeOfDay timeOfDay36 = dateTime35.toTimeOfDay();
        int int37 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.Hours hours38 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) timeOfDay36);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        int int44 = property42.getMaximumValueOverall();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = locale45.getScript();
        java.lang.String str47 = locale45.getDisplayCountry();
        int int48 = property42.getMaximumShortTextLength(locale45);
        org.joda.time.DateTime dateTime49 = property42.withMaximumValue();
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant54 = instant52.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime55 = instant52.toMutableDateTimeISO();
        java.lang.Object obj56 = null;
        org.joda.time.Instant instant57 = new org.joda.time.Instant(obj56);
        boolean boolean58 = mutableDateTime55.isAfter((org.joda.time.ReadableInstant) instant57);
        boolean boolean59 = localTime50.equals((java.lang.Object) mutableDateTime55);
        org.joda.time.Chronology chronology60 = localTime50.getChronology();
        org.joda.time.Period period61 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType63 = localTime50.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-120000L) + "'", long10 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AM" + "'", str20, "AM");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.setWeeks(7);
        int int13 = mutablePeriod5.getHours();
        mutablePeriod5.setPeriod((int) (short) 0, (int) (byte) 100, 1969, (-1), 0, (int) (byte) 100, 169, 1969);
        int int23 = mutablePeriod5.getMonths();
        mutablePeriod5.add(9, (int) 'x', 3, 86398999, (-100), (-52), 6, 169);
        mutablePeriod5.add((-16752242083571L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.joda.time.Period period1 = org.joda.time.Period.hours(3);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Period period9 = period7.minusMillis(20);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime2.plusHours(1969);
        org.joda.time.TimeOfDay timeOfDay9 = dateTime2.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = timeOfDay9.getField(104);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 104");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-52));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long10 = dateTimeField2.remainder(720000L);
        long long13 = dateTimeField2.getDifferenceAsLong(29227899301L, (long) (-1));
        java.lang.String str15 = dateTimeField2.getAsShortText((-2592000001L));
        long long18 = dateTimeField2.addWrapField(30452889602000L, 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 840000L + "'", long10 == 840000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 676L + "'", long13 == 676L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AM" + "'", str15, "AM");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 30452889602000L + "'", long18 == 30452889602000L);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration10.toPeriod(periodType16, chronology17);
        org.joda.time.Minutes minutes19 = duration10.toStandardMinutes();
        org.joda.time.Minutes minutes21 = minutes19.minus(59);
        org.joda.time.Minutes minutes23 = minutes21.dividedBy(100);
        org.joda.time.Minutes minutes24 = minutes21.negated();
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        int int27 = days25.get(durationFieldType26);
        org.joda.time.Days days28 = org.joda.time.Days.FIVE;
        boolean boolean29 = days25.isLessThan(days28);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = minutes24.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Days");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        long long12 = duration10.getStandardSeconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime14.weekOfWeekyear();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = duration37.plus((long) (byte) 0);
        org.joda.time.Duration duration41 = duration37.toDuration();
        org.joda.time.Duration duration42 = duration22.minus((org.joda.time.ReadableDuration) duration37);
        long long43 = duration22.getStandardDays();
        org.joda.time.Period period44 = duration22.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime14.minus((org.joda.time.ReadablePeriod) period44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval46 = duration10.toIntervalFrom((org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (short) 10);
        int int2 = period1.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("4");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours4 = hours2.minus((int) (short) 10);
        boolean boolean5 = hours0.isGreaterThan(hours4);
        java.lang.String str6 = hours4.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT-10H" + "'", str6, "PT-10H");
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        mutablePeriod6.setMillis((int) (short) 1);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period12.getFieldTypes();
        org.joda.time.Period period15 = period12.minusYears((int) (byte) 1);
        org.joda.time.Period period17 = period12.plusMonths((int) (byte) 0);
        org.joda.time.Period period19 = period12.withMillis((int) '#');
        org.joda.time.Period period21 = period19.minusMinutes((int) 'u');
        boolean boolean22 = mutablePeriod6.equals((java.lang.Object) period19);
        boolean boolean23 = periodType0.equals((java.lang.Object) period19);
        org.joda.time.Period period25 = period19.minusMonths(0);
        org.joda.time.Period period27 = period19.plusYears((-52));
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMonths((-117));
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        java.lang.String str16 = duration7.toString();
        long long17 = duration7.getStandardHours();
        org.joda.time.Period period18 = duration7.toPeriod();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes5);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(59);
        org.joda.time.Period period3 = period1.minusYears((int) (byte) 100);
        int int4 = period3.getYears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = period3.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-100) + "'", int4 == (-100));
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        org.joda.time.Days days10 = days8.multipliedBy((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        int int29 = property27.getMaximumValueOverall();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getDisplayCountry();
        int int33 = property27.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime34 = property27.withMaximumValue();
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        long long37 = chronology20.set((org.joda.time.ReadablePartial) localTime35, (long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) days8, chronology20);
        int int39 = mutablePeriod38.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod38.addYears(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Weeks weeks5 = period3.toStandardWeeks();
        org.joda.time.Hours hours6 = weeks5.toStandardHours();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(hours6);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.Hours hours6 = org.joda.time.Hours.ZERO;
        int int7 = hours6.size();
        org.joda.time.DurationFieldType durationFieldType9 = hours6.getFieldType(0);
        boolean boolean10 = languageRange1.equals((java.lang.Object) durationFieldType9);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "days" + "'", str5, "days");
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.joda.time.Period period1 = org.joda.time.Period.days(437);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder8 = builder6.setLocale(locale7);
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder8.clearExtensions();
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.Builder builder12 = builder5.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder5.setLanguageTag("secondOfMinute");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: secondOfMinute [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addYears((int) (short) 10);
        mutablePeriod5.setMonths((-59));
        mutablePeriod5.clear();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("2022-02-21T23:37:25.781-07:35:49.920");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T23:37:25.781-07:35:49...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.joda.time.Period period2 = new org.joda.time.Period(3599999L, 31535999687L);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField14 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        long long20 = dateTimeField17.add(0L, (long) (short) 1);
        boolean boolean22 = dateTimeField17.isLeap(10L);
        int int23 = dateTimeField17.getMinimumValue();
        long long25 = dateTimeField17.roundHalfEven((long) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localTime31, 0, locale33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        boolean boolean44 = interval39.contains((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Chronology chronology45 = interval43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfHour();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.TimeOfDay timeOfDay51 = dateTime50.toTimeOfDay();
        int int52 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.Hours hours53 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localTime31, (org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = property57.withMinimumValue();
        int int59 = property57.getMaximumValueOverall();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = locale60.getScript();
        java.lang.String str62 = locale60.getDisplayCountry();
        int int63 = property57.getMaximumShortTextLength(locale60);
        org.joda.time.DateTime dateTime64 = property57.withMaximumValue();
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant69 = instant67.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime70 = instant67.toMutableDateTimeISO();
        java.lang.Object obj71 = null;
        org.joda.time.Instant instant72 = new org.joda.time.Instant(obj71);
        boolean boolean73 = mutableDateTime70.isAfter((org.joda.time.ReadableInstant) instant72);
        boolean boolean74 = localTime65.equals((java.lang.Object) mutableDateTime70);
        org.joda.time.Chronology chronology75 = localTime65.getChronology();
        org.joda.time.Period period76 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime31, (org.joda.time.ReadablePartial) localTime65);
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder77.clearExtensions();
        java.util.Locale.Builder builder79 = builder78.clearExtensions();
        java.util.Locale locale80 = builder79.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime31, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 43200000L + "'", long20 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-120000L) + "'", long25 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period3.plusWeeks(10);
        org.joda.time.Period period11 = period3.minusMillis((int) (short) 1);
        org.joda.time.Period period13 = period11.plusMinutes(7);
        org.joda.time.Period period15 = period13.withYears(120);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        int int26 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property27 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime12.withYear(1969);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(1311, 9678, 86399999, (int) 'a', (-27349920), chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        mutablePeriod5.add(3599999000L, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfYear();
        java.lang.Object obj24 = null;
        org.joda.time.Instant instant25 = new org.joda.time.Instant(obj24);
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        java.lang.String str27 = dateTimeZone26.toString();
        boolean boolean29 = dateTimeZone26.isStandardOffset((long) '4');
        java.util.TimeZone timeZone30 = dateTimeZone26.toTimeZone();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.Object obj32 = locale31.clone();
        boolean boolean33 = dateTimeZone26.equals(obj32);
        java.lang.String str34 = dateTimeZone26.getID();
        java.lang.String str36 = dateTimeZone26.getNameKey((-625L));
        java.lang.String str37 = dateTimeZone26.toString();
        org.joda.time.Chronology chronology38 = chronology18.withZone(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology38.getDateTimeMillis((long) 1439, 45, 70, (-10), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "ko");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("DurationField[weeks]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DurationField[weeks]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0, periodType8, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = periodType8.indexOf(durationFieldType13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType8);
        boolean boolean16 = periodFormatter15.isPrinter();
        org.joda.time.format.PeriodParser periodParser17 = periodFormatter15.getParser();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType20, chronology21);
        org.joda.time.PeriodType periodType23 = periodType20.withWeeksRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType25);
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter15.withParseType(periodType25);
        java.lang.StringBuffer stringBuffer28 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray33 = period32.getFieldTypes();
        int int34 = period32.getMinutes();
        org.joda.time.Period period36 = period32.withDays((int) ' ');
        org.joda.time.Period period38 = period32.plusWeeks(10);
        org.joda.time.Period period40 = period32.withMonths((int) (short) 10);
        org.joda.time.Period period42 = period40.plusMillis(1);
        org.joda.time.Period period44 = period42.plusDays(19045);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter27.printTo(stringBuffer28, (org.joda.time.ReadablePeriod) period42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(periodParser17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = null;
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        boolean boolean9 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatter2.getParser();
        org.joda.time.Seconds seconds11 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod13 = seconds12.toMutablePeriod();
        boolean boolean14 = seconds11.isGreaterThan(seconds12);
        java.lang.String str15 = seconds11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = periodFormatter2.print((org.joda.time.ReadablePeriod) seconds11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(periodParser10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod5.setPeriod(readableInterval9);
        int int11 = mutablePeriod5.getMillis();
        int int12 = mutablePeriod5.getWeeks();
        mutablePeriod5.setMonths(12);
        mutablePeriod5.setMonths(365);
        mutablePeriod5.clear();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        long long13 = dateTimeField2.remainder(432000000L);
        int int14 = dateTimeField2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter15 = null;
        org.joda.time.format.PeriodParser periodParser16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = new org.joda.time.format.PeriodFormatter(periodPrinter15, periodParser16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter17.withParseType(periodType18);
        java.util.Locale locale20 = periodFormatter17.getLocale();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter17.withLocale(locale21);
        org.joda.time.format.PeriodPrinter periodPrinter24 = null;
        org.joda.time.format.PeriodParser periodParser25 = null;
        org.joda.time.format.PeriodFormatter periodFormatter26 = new org.joda.time.format.PeriodFormatter(periodPrinter24, periodParser25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withParseType(periodType27);
        java.util.Locale locale29 = periodFormatter26.getLocale();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter26.withLocale(locale30);
        java.util.Locale locale33 = locale30.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter23.withLocale(locale33);
        int int35 = dateTimeField2.getMaximumShortTextLength(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale33.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 120000L + "'", long13 == 120000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(30452889602000L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra(9);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(8);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant10, periodType11);
        mutablePeriod12.setPeriod((long) 1, (-1L));
        mutablePeriod12.setMillis((int) (short) 0);
        int int18 = mutablePeriod12.getDays();
        mutablePeriod12.addMinutes(1969);
        org.joda.time.Chronology chronology22 = null;
        mutablePeriod12.setPeriod((long) 'a', chronology22);
        mutablePeriod12.setYears((int) 'u');
        mutablePeriod12.add((long) '4');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        boolean boolean33 = dateTime31.isEqual(10L);
        org.joda.time.DateTime dateTime35 = dateTime31.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime31.plusHours(1969);
        org.joda.time.DateTime dateTime40 = dateTime31.withDurationAdded((-101L), 86399);
        mutablePeriod12.setPeriod(readableInstant28, (org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours42 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) dateTime4, readableInstant28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadableInstant objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes21 = minutes19.minus((int) (short) -1);
        boolean boolean22 = minutes18.isGreaterThan(minutes19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.DateTime dateTime25 = dateTime8.plus((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        boolean boolean27 = property26.isLeap();
        java.lang.String str28 = property26.getName();
        int int29 = property26.getLeapAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property26.setCopy("2022-01-01T00:00:00.000-07:35:49.920/2023-01-01T00:00:00.000-07:35:49.920");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-01-01T00:00:00.000-07:35:49.920/2023-01-01T00:00:00.000-07:35:49.920\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "year" + "'", str28, "year");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.setHours(1969);
        mutablePeriod3.setWeeks((-59));
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        int int2 = weeks0.getWeeks();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.Object obj2 = null;
        org.joda.time.Instant instant3 = new org.joda.time.Instant(obj2);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = dateTimeZone4.getShortName(100L, locale8);
        java.lang.String str11 = locale0.getDisplayVariant(locale8);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale0.getDisplayScript(locale12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it" + "'", str13, "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 11, periodType1);
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = duration5.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = duration5.toPeriodTo(readableInstant9);
        org.joda.time.Duration duration12 = duration5.withMillis((long) (short) 0);
        org.joda.time.Duration duration15 = duration5.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration5, chronology16);
        mutablePeriod2.addHours(78719999);
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = mutablePeriod2.getFieldTypes();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        java.util.Locale locale3 = new java.util.Locale("Years", "japonais", "Chinese (China)");
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "years_JAPONAIS_Chinese (China)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "years_JAPONAIS_Chinese (China)" + "'", str5, "years_JAPONAIS_Chinese (China)");
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration10.isEqual(readableDuration12);
        org.joda.time.Duration duration15 = duration10.minus((long) 1);
        org.joda.time.Duration duration17 = duration15.minus((long) '4');
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime20, periodType44);
        org.joda.time.Duration duration47 = duration15.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int58 = mutablePeriod57.getDays();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.Interval interval64 = property63.toInterval();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime.Property property67 = dateTime66.yearOfEra();
        org.joda.time.Interval interval68 = property67.toInterval();
        boolean boolean69 = interval64.contains((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Chronology chronology70 = interval68.getChronology();
        mutablePeriod57.setPeriod((long) 'u', (long) 1969, chronology70);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 100, chronology70);
        org.joda.time.Period period73 = duration47.toPeriod(chronology70);
        org.joda.time.DateTimeField dateTimeField74 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.monthOfYear();
        org.joda.time.DurationField durationField76 = chronology70.weeks();
        org.joda.time.DateTimeField dateTimeField77 = chronology70.dayOfYear();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 0, chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(35, 22, 78719999, 432, 432, (int) (short) 0, 0, chronology70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 432 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        boolean boolean22 = days19.isLessThan(days21);
        org.joda.time.PeriodType periodType23 = days19.getPeriodType();
        org.joda.time.Days days25 = org.joda.time.Days.days(0);
        org.joda.time.Days days27 = days25.dividedBy((int) (short) 10);
        org.joda.time.Days days28 = days19.plus(days25);
        org.joda.time.Period period29 = days19.toPeriod();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period9 = period3.withDays(10);
        org.joda.time.Period period11 = period3.minusSeconds((-141012));
        org.joda.time.Period period13 = period11.withWeeks(4);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int14 = dateTime2.getMinuteOfDay();
        org.joda.time.DateTime dateTime16 = dateTime2.withMillisOfSecond((int) '#');
        long long17 = dateTime16.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime16.withHourOfDay(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-965L) + "'", long17 == (-965L));
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getYears();
        org.joda.time.Period period7 = period3.minusDays(2);
        org.joda.time.Period period9 = period3.plusWeeks(3);
        int int10 = period3.getDays();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT0H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0H\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 31, false, (-3676492805054399977L));
        int int13 = dateTimeZone2.getStandardOffset(5L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31L + "'", long11 == 31L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Period period1 = minutes0.toPeriod();
        org.joda.time.Days days2 = minutes0.toStandardDays();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod4.copy();
        mutablePeriod26.setSeconds((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod26.copy();
        mutablePeriod29.addYears((int) (short) 10);
        mutablePeriod29.add((long) 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str14, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod29);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.Minutes minutes10 = minutes8.plus((int) (short) 1);
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Minutes minutes13 = minutes10.plus(1969);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        int int17 = dateTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 1, 2, 78719999, 2922789);
        mutablePeriod4.clear();
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.plus(1311);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.setHours(1969);
        mutablePeriod3.addWeeks(10);
        mutablePeriod3.setPeriod((int) (short) 1, 11, (-52), 1, (int) (byte) 0, 432, 1972, (-120));
        org.joda.time.PeriodType periodType17 = mutablePeriod3.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withMinutesRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withYearsRemoved();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.addMonths((int) (short) 1);
        mutablePeriod5.addMonths(910);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-22T07:11:13.646Z");
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = locale6.toLanguageTag();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addMinutes(1969);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.setPeriod((long) 'a', chronology15);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod5.add((long) 'u', chronology18);
        mutablePeriod5.addMinutes((int) (short) -1);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMillis((int) (short) 1);
        int int30 = mutablePeriod27.getSeconds();
        mutablePeriod27.addYears(2);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        boolean boolean46 = interval41.contains((org.joda.time.ReadableInterval) interval45);
        java.lang.String str47 = interval45.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        boolean boolean57 = interval45.isBefore((org.joda.time.ReadableInterval) interval55);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        mutablePeriod37.set(durationFieldType59, 19);
        int int62 = mutablePeriod27.get(durationFieldType59);
        mutablePeriod5.add(durationFieldType59, 10);
        mutablePeriod5.setDays((int) (byte) 0);
        mutablePeriod5.addMinutes(432);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str47, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((int) 'u');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withFields(readablePartial25);
        org.joda.time.DateTime dateTime28 = dateTime23.withYearOfEra(292278993);
        org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration31 = new org.joda.time.Duration(432000000L);
        java.lang.String str32 = duration31.toString();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.Object obj47 = null;
        org.joda.time.Instant instant48 = new org.joda.time.Instant(obj47);
        org.joda.time.DateTimeZone dateTimeZone49 = instant48.getZone();
        java.lang.String str50 = dateTimeZone49.toString();
        int int52 = dateTimeZone49.getOffset(1L);
        boolean boolean54 = dateTimeZone49.isStandardOffset(0L);
        org.joda.time.DateTime dateTime55 = dateTime35.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime57 = dateTime55.plusYears(1969);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType62, chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType62, chronology65);
        org.joda.time.PeriodType periodType67 = periodType62.withDaysRemoved();
        org.joda.time.Period period68 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime57, periodType62);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.era();
        org.joda.time.DateTime dateTime73 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.Instant instant74 = dateTime71.toInstant();
        org.joda.time.DateTime dateTime76 = dateTime71.withMillis((long) '4');
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period78 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateTime71, periodType77);
        org.joda.time.DateTime dateTime79 = dateTime20.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime.Property property80 = dateTime79.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = dateTime79.withYearOfEra((-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT432000S" + "'", str32, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.Period period3 = period1.minusMinutes(23);
        org.joda.time.Period period5 = period1.minusWeeks(101);
        org.joda.time.Period period7 = period1.plusYears((-1339199999));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setScript("java.io.IOException: java.io.IOException: +00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.io.IOException: java.io.IOException: +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property28 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime13.withYear(1969);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType5.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(28995, 45, (-32), (-2), (-59), chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        int int11 = period10.getHours();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property40 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime25.withYear(1969);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.year();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.year();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology43.getZone();
        org.joda.time.DateTime dateTime48 = dateTime14.toDateTime(dateTimeZone47);
        long long52 = dateTimeZone47.convertLocalToUTC((long) '4', false, (long) 25985711);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) period10, dateTimeZone47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-119948L) + "'", long52 == (-119948L));
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.io.Writer writer6 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        boolean boolean15 = duration9.isEqual((org.joda.time.ReadableDuration) duration13);
        java.lang.String str16 = duration13.toString();
        org.joda.time.Period period17 = duration13.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter5.printTo(writer6, (org.joda.time.ReadablePeriod) period17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        java.lang.String str6 = dateTimeField2.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "halfdayOfDay" + "'", str6, "halfdayOfDay");
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(399L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        long long31 = dateTimeField28.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField28.getMinimumValue(readablePartial32);
        long long36 = dateTimeField28.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField28.getType();
        long long39 = dateTimeField28.remainder(432000000L);
        int int40 = dateTimeField28.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter41 = null;
        org.joda.time.format.PeriodParser periodParser42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = new org.joda.time.format.PeriodFormatter(periodPrinter41, periodParser42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter43.withParseType(periodType44);
        java.util.Locale locale46 = periodFormatter43.getLocale();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter49 = periodFormatter43.withLocale(locale47);
        org.joda.time.format.PeriodPrinter periodPrinter50 = null;
        org.joda.time.format.PeriodParser periodParser51 = null;
        org.joda.time.format.PeriodFormatter periodFormatter52 = new org.joda.time.format.PeriodFormatter(periodPrinter50, periodParser51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter52.withParseType(periodType53);
        java.util.Locale locale55 = periodFormatter52.getLocale();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter58 = periodFormatter52.withLocale(locale56);
        java.util.Locale locale59 = locale56.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter49.withLocale(locale59);
        int int61 = dateTimeField28.getMaximumShortTextLength(locale59);
        java.lang.String str62 = dateTimeField23.getAsShortText((long) (short) -1, locale59);
        java.util.Locale locale63 = java.util.Locale.US;
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale63.getDisplayScript(locale64);
        java.lang.String str66 = locale59.getDisplayLanguage(locale63);
        java.lang.String str67 = locale59.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 43200000L + "'", long31 == 43200000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 120000L + "'", long39 == 120000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(periodFormatter49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodFormatter54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(periodFormatter58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "70" + "'", str62, "70");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Italian" + "'", str66, "Italian");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Italie" + "'", str67, "Italie");
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        org.joda.time.DateTime dateTime12 = dateTime4.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime14 = dateTime4.withYearOfEra(9);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime35 = dateTime22.minusWeeks((int) (byte) 1);
        int int36 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property37 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime22.withYear(1969);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology40.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime4, dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant46 = new org.joda.time.Instant((java.lang.Object) dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = timeOfDay38.getValue(99);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.weeksIn(readableInterval8);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) weeks9);
        org.joda.time.Weeks weeks12 = weeks9.multipliedBy(292278993);
        java.lang.String str13 = weeks12.toString();
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P0W" + "'", str13, "P0W");
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        boolean boolean11 = interval6.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType2.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1672963800000L, (long) (short) 1, chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        java.lang.String str13 = durationField12.getName();
        int int16 = durationField12.getValue((long) (-2147483551), (long) 363120000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyears" + "'", str13, "weekyears");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Instant instant31 = dateTime28.toInstant();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        int int33 = dateTime28.getEra();
        org.joda.time.Chronology chronology34 = dateTime28.getChronology();
        org.joda.time.DateTime.Property property35 = dateTime28.dayOfMonth();
        boolean boolean37 = dateTime28.isEqual(31536000000L);
        boolean boolean38 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(85104000117L, periodType1);
        mutablePeriod3.addHours(26033472);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-01T00:00:00.000+00:02/20...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property22.withMinimumValue();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(0L);
        java.lang.Object obj27 = null;
        org.joda.time.Instant instant28 = new org.joda.time.Instant(obj27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = duration32.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = duration32.toPeriodTo(readableInstant36);
        org.joda.time.Duration duration39 = duration32.withMillis((long) (short) 0);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        boolean boolean47 = dateTime45.isEqual(10L);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime45, periodType48);
        org.joda.time.DateTime dateTime51 = dateTime45.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime53 = dateTime45.withMinuteOfHour(0);
        int int54 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime45);
        int int55 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Seconds seconds56 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Weeks weeks57 = seconds56.toStandardWeeks();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(weeks57);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("PT0S");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DateTimeField[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("P120M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str6 = locale3.getDisplayName();
        java.lang.String str7 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))" + "'", str6, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale42.toLanguageTag();
        java.lang.String str46 = locale42.getVariant();
        boolean boolean47 = fraction39.equals((java.lang.Object) locale42);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str52 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int57 = fraction56.intValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction53.subtract(fraction56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction51.add(fraction53);
        int int60 = fraction59.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction63 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction59.multiply(fraction63);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance();
        boolean boolean66 = numberFormat65.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat65);
        boolean boolean68 = numberFormat65.isParseIntegerOnly();
        boolean boolean69 = fraction63.equals((java.lang.Object) boolean68);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction48.multiply(fraction63);
        long long71 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction39.multiply(fraction63);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str76 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int81 = fraction80.intValue();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction77.subtract(fraction80);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction75.add(fraction77);
        int int84 = fraction83.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction87 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction88 = fraction83.multiply(fraction87);
        int int89 = fraction83.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction92 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction93 = fraction83.add(fraction92);
        boolean boolean94 = fraction63.equals((java.lang.Object) fraction92);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction63.reciprocal();
        java.lang.String str96 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ko" + "'", str45, "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-117 / 1" + "'", str52, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-117) + "'", int57 == (-117));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-117 / 1" + "'", str76, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-117) + "'", int81 == (-117));
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-117) + "'", int89 == (-117));
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "-1 / 35" + "'", str96, "-1 / 35");
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.lang.String str7 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cor\351en" + "'", str6, "cor\351en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        numberFormat48.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field56, (int) (short) 0);
        java.lang.String str59 = fieldPosition58.toString();
        java.lang.String str60 = fieldPosition58.toString();
        fieldPosition58.setBeginIndex((int) (byte) 10);
        fieldPosition58.setBeginIndex((int) '4');
        boolean boolean66 = fieldPosition58.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field67 = fieldPosition58.getFieldAttribute();
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition(field67, 117);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition(field67);
        fieldPosition70.setBeginIndex(117);
        fieldPosition70.setEndIndex(51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = numberFormat48.format(0.0d, stringBuffer55, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais" + "'", str33, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(field67);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.setLanguageTag("coreano");
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale16.getVariant();
        java.lang.String str18 = locale16.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.util.Locale locale28 = locale26.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.lang.String str30 = locale21.getDisplayLanguage(locale28);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale21.getDisplayLanguage(locale31);
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field34, (int) (short) 0);
        java.lang.String str37 = fieldPosition36.toString();
        java.lang.String str38 = fieldPosition36.toString();
        fieldPosition36.setBeginIndex((int) (byte) 10);
        fieldPosition36.setBeginIndex((int) '4');
        int int43 = fieldPosition36.getBeginIndex();
        java.text.Format.Field field44 = fieldPosition36.getFieldAttribute();
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        boolean boolean47 = field44.equals((java.lang.Object) locale45);
        java.util.Locale.setDefault(locale45);
        java.lang.String str49 = locale21.getDisplayVariant(locale45);
        java.lang.String str50 = locale16.getDisplayVariant(locale21);
        boolean boolean51 = locale13.equals((java.lang.Object) locale21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u97d3\u6587" + "'", str33, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str37, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str38, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u5fb7\u56fd", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field19, (int) (short) 0);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj30 = numberFormat26.parseObject("hi!", parsePosition29);
        java.lang.Number number31 = numberFormat22.parse("10,000%", parsePosition29);
        boolean boolean32 = field19.equals((java.lang.Object) parsePosition29);
        int int33 = parsePosition29.getIndex();
        java.lang.String str34 = parsePosition29.toString();
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat17.parse("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", parsePosition29);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale36.getDisplayCountry(locale37);
        java.lang.String str42 = locale37.toLanguageTag();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale37);
        int int44 = numberFormat43.getMaximumFractionDigits();
        properFractionFormat17.setDenominatorFormat(numberFormat43);
        org.apache.commons.math.fraction.Fraction fraction47 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.multiply(fraction51);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((java.text.Format.Field) field54);
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field54, (int) (byte) -113);
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field54, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer60 = properFractionFormat17.format(fraction47, stringBuffer53, fieldPosition59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str34, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(field54);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayLanguage(locale2);
        java.lang.String str9 = locale2.getDisplayCountry();
        java.util.Locale locale11 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.lang.String str14 = locale2.getDisplayVariant(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        boolean boolean17 = numberFormat15.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "chinois" + "'", str1, "chinois");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "anglais" + "'", str7, "anglais");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Royaume-Uni" + "'", str9, "Royaume-Uni");
        org.junit.Assert.assertEquals(locale11.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uce90\ub098\ub2e4" + "'", str13, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder5.setLocale(locale7);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction13.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction27.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction43.multiply(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction40.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction25.multiply(fraction40);
        java.util.Locale locale53 = java.util.Locale.UK;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayLanguage(locale55);
        java.lang.String str57 = locale53.getDisplayScript(locale55);
        java.lang.String str58 = locale55.toLanguageTag();
        java.lang.String str59 = locale55.getVariant();
        boolean boolean60 = fraction52.equals((java.lang.Object) locale55);
        java.lang.String str61 = locale7.getDisplayScript(locale55);
        boolean boolean62 = locale7.hasExtensions();
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale65.getScript();
        java.lang.String str68 = locale65.getVariant();
        java.util.Locale.setDefault(category63, locale65);
        java.util.Locale locale70 = java.util.Locale.getDefault(category63);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.util.Locale.setDefault(category63, locale71);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale71);
        java.lang.String str75 = locale7.getDisplayLanguage(locale71);
        java.lang.String str76 = locale0.getDisplayCountry(locale71);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getNumberInstance(locale71);
        java.lang.Object obj78 = null;
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.NumberFormat.Field field80 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition82 = new java.text.FieldPosition((java.text.Format.Field) field80, (int) (short) 0);
        int int83 = fieldPosition82.getEndIndex();
        java.lang.String str84 = fieldPosition82.toString();
        int int85 = fieldPosition82.getEndIndex();
        int int86 = fieldPosition82.getEndIndex();
        int int87 = fieldPosition82.getEndIndex();
        int int88 = fieldPosition82.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = numberFormat77.format(obj78, stringBuffer79, fieldPosition82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-117 / 1" + "'", str17, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ko" + "'", str58, "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category63.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "cor\351en" + "'", str75, "cor\351en");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str84, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        java.util.Locale locale1 = new java.util.Locale("deu");
        org.junit.Assert.assertEquals(locale1.toString(), "deu");
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        numberFormat10.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale20.getDisplayScript(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        boolean boolean29 = numberFormat10.equals((java.lang.Object) locale22);
        java.lang.String str31 = numberFormat10.format(0.0d);
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.PERCENT;
        java.lang.String str33 = field32.toString();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        numberFormat34.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits((-1));
        java.util.Currency currency41 = numberFormat38.getCurrency();
        numberFormat37.setCurrency(currency41);
        numberFormat34.setCurrency(currency41);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance();
        java.lang.String str46 = numberFormat44.format(100L);
        int int47 = numberFormat44.getMinimumFractionDigits();
        numberFormat44.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode53 = numberFormat50.getRoundingMode();
        numberFormat44.setRoundingMode(roundingMode53);
        numberFormat34.setRoundingMode(roundingMode53);
        boolean boolean56 = field32.equals((java.lang.Object) roundingMode53);
        numberFormat10.setRoundingMode(roundingMode53);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str33, "java.text.NumberFormat$Field(percent)");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        java.util.Locale locale12 = locale6.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale6.getUnicodeLocaleType("java.text.ParsePosition[index=10,errorIndex=117]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParsePosition[index=10,errorIndex=117]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.setLanguageTag("coreano");
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguageTag("anglais (Etats-Unis)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: anglais (Etats [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, (int) (short) 1);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("35 / 1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        numberFormat6.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode12 = numberFormat9.getRoundingMode();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale13.getVariant();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat9, numberFormat15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        int int46 = parsePosition43.getErrorIndex();
        java.lang.Object obj47 = properFractionFormat34.parseObject("French", parsePosition43);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.text.NumberFormat numberFormat52 = fractionFormat51.getNumeratorFormat();
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 10);
        parsePosition55.setErrorIndex((int) (byte) 1);
        parsePosition55.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat51.parse("French", parsePosition55);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat34.parse("", parsePosition55);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale63);
        java.lang.Object obj66 = numberFormat65.clone();
        properFractionFormat34.setWholeFormat(numberFormat65);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        java.lang.String str73 = locale68.getDisplayCountry(locale69);
        java.lang.String str74 = locale69.toLanguageTag();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getCurrencyInstance(locale69);
        boolean boolean76 = numberFormat75.isParseIntegerOnly();
        properFractionFormat34.setDenominatorFormat(numberFormat75);
        boolean boolean78 = numberFormat75.isParseIntegerOnly();
        int int79 = numberFormat75.getMaximumFractionDigits();
        properFractionFormat16.setWholeFormat(numberFormat75);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance(locale81);
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getNumberInstance(locale81);
        numberFormat83.setMinimumFractionDigits((int) ' ');
        numberFormat83.setMaximumIntegerDigits((int) (byte) -35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat75, numberFormat83);
        int int89 = numberFormat3.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u6cd5\u6587" + "'", str50, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertNull(fraction61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "kor" + "'", str72, "kor");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ko" + "'", str74, "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        boolean boolean8 = locale7.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (short) -4, (double) (-0.028571429f), (-29));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -4 to fraction (5/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        int int3 = numberFormat0.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        boolean boolean5 = numberFormat0.isParseIntegerOnly();
        java.lang.String str7 = numberFormat0.format((double) 2147483647);
        java.lang.String str9 = numberFormat0.format(52.0d);
        java.util.Locale locale12 = new java.util.Locale("java.text.ParseException: java.text.ParseException: 100", "-1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        numberFormat15.setMaximumFractionDigits((int) (short) -117);
        int int22 = numberFormat15.getMinimumFractionDigits();
        numberFormat15.setMinimumFractionDigits((int) (byte) -35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat14, numberFormat15);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale27.getDisplayCountry();
        java.lang.String str29 = locale26.getDisplayCountry(locale27);
        java.util.Locale.setDefault(locale27);
        java.lang.String str31 = locale27.getScript();
        java.lang.String str32 = locale27.getDisplayScript();
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((int) (byte) 100);
        fieldPosition35.setEndIndex(4095);
        java.lang.String str38 = fieldPosition35.toString();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = locale41.getVariant();
        java.util.Locale.setDefault(category39, locale41);
        java.util.Locale locale46 = java.util.Locale.getDefault(category39);
        java.util.Locale locale47 = java.util.Locale.UK;
        java.util.Locale.setDefault(category39, locale47);
        java.util.Locale locale49 = java.util.Locale.getDefault(category39);
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale52.getVariant();
        java.util.Locale.setDefault(category50, locale52);
        java.util.Locale locale57 = java.util.Locale.getDefault(category50);
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.util.Locale.setDefault(category50, locale58);
        java.util.Locale locale64 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category50, locale64);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getNumberInstance();
        boolean boolean67 = numberFormat66.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat66);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        boolean boolean70 = numberFormat66.equals((java.lang.Object) locale69);
        java.util.Locale.setDefault(category50, locale69);
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale74.getDisplayLanguage(locale75);
        java.lang.String str77 = locale74.getISO3Language();
        java.lang.String str78 = locale74.getCountry();
        java.lang.String str79 = locale72.getDisplayName(locale74);
        java.util.Locale.setDefault(category50, locale74);
        java.util.Locale.setDefault(category39, locale74);
        boolean boolean82 = fieldPosition35.equals((java.lang.Object) category39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer83 = numberFormat0.format((java.lang.Object) str32, stringBuffer33, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\244 2,147,483,647.00" + "'", str7, "\244 2,147,483,647.00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\244 52.00" + "'", str9, "\244 52.00");
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseexception: java.text.parseexception: 100_-1");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u52a0\u62ff\u5927" + "'", str28, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "China" + "'", str29, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=4095]" + "'", str38, "java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=4095]");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category50.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat59);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str76, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "kor" + "'", str77, "kor");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str79, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.lang.String str10 = field9.toString();
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field9);
        fieldPosition11.setEndIndex((int) (short) -117);
        int int14 = fieldPosition11.getField();
        java.text.Format.Field field15 = fieldPosition11.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str10, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(field15);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale8);
        int int12 = numberFormat11.getMinimumIntegerDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat17.getDenominatorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -116);
        java.text.Format.Field field77 = fieldPosition76.getFieldAttribute();
        java.lang.String str78 = field77.toString();
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition(field77, (int) (byte) -117);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u6cd5\u6587" + "'", str2, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
// flaky:         org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
// flaky:         org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
// flaky:         org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u6cd5\u6587" + "'", str42, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
// flaky:         org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
// flaky:         org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0%" + "'", str69, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str78, "java.text.NumberFormat$Field(percent)");
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=116,attribute=null,beginIndex=0,endIndex=0]", (int) (byte) 32);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat40 = properFractionFormat38.getWholeFormat();
        java.text.NumberFormat numberFormat41 = properFractionFormat38.getNumeratorFormat();
        fractionFormat5.setDenominatorFormat(numberFormat41);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        numberFormat43.setMaximumIntegerDigits((int) (short) 100);
        numberFormat43.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.math.RoundingMode roundingMode51 = numberFormat43.getRoundingMode();
        numberFormat43.setGroupingUsed(true);
        fractionFormat5.setNumeratorFormat(numberFormat43);
        java.text.AttributedCharacterIterator.Attribute attribute55 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale56);
        boolean boolean58 = attribute55.equals((java.lang.Object) numberFormat57);
        int int59 = numberFormat57.getMinimumIntegerDigits();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getNumberInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat57, numberFormat62);
        numberFormat57.setMaximumFractionDigits(11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + roundingMode51 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode51.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(attribute55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u6cd5\u6587" + "'", str61, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(numberFormat62);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale12.getDisplayName(locale13);
        java.lang.String str16 = locale9.getDisplayName(locale13);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale13);
        java.util.Locale locale19 = builder6.build();
        java.util.Locale.Builder builder21 = builder6.setVariant("Japan");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cor\351en" + "'", str16, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getNumeratorFormat();
        int int47 = numberFormat46.getMinimumFractionDigits();
        numberFormat46.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        numberFormat46.setMaximumIntegerDigits((int) 'u');
        properFractionFormat17.setWholeFormat(numberFormat46);
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field55, (int) (short) 0);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance();
        java.lang.String str60 = numberFormat58.format(100L);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj66 = numberFormat62.parseObject("hi!", parsePosition65);
        java.lang.Number number67 = numberFormat58.parse("10,000%", parsePosition65);
        boolean boolean68 = field55.equals((java.lang.Object) parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat17.parse("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction72 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        java.lang.String str73 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction72);
        double double74 = fraction72.doubleValue();
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.NumberFormat.Field field76 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field76, (int) (short) 0);
        java.lang.String str79 = fieldPosition78.toString();
        java.lang.String str80 = fieldPosition78.toString();
        fieldPosition78.setBeginIndex((int) (byte) 10);
        fieldPosition78.setEndIndex((int) (byte) 1);
        java.text.Format.Field field85 = fieldPosition78.getFieldAttribute();
        java.text.FieldPosition fieldPosition87 = new java.text.FieldPosition(field85, 32);
        fieldPosition87.setEndIndex(4095);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer90 = properFractionFormat17.format(fraction72, stringBuffer75, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u6cd5\u6587" + "'", str33, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "52 / 35" + "'", str73, "52 / 35");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.4857142857142858d + "'", double74 == 1.4857142857142858d);
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str79, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str80, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field85);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) 'x', (int) (short) 13689);
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.util.Locale locale9 = new java.util.Locale("java.text.ParseException: kor", "0 %", "francese");
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("zh_TW");
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale9.getDisplayVariant(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        boolean boolean16 = fraction2.equals((java.lang.Object) locale3);
        java.lang.String str17 = locale3.getISO3Language();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals(locale9.toString(), "java.text.parseexception: kor_0 %_francese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und-francese" + "'", str10, "und-francese");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "francese" + "'", str14, "francese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.lang.String str9 = locale2.getDisplayName();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale2);
        int int11 = numberFormat10.getMinimumFractionDigits();
        java.lang.String str13 = numberFormat10.format(0.32989690721649484d);
        java.lang.String str15 = numberFormat10.format((long) (byte) -113);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0.33" + "'", str13, "0.33");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-113" + "'", str15, "-113");
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (short) -1);
        double double2 = fraction1.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction1.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction11.add(fraction13);
        int int20 = fraction19.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int28 = fraction27.intValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction19.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction8.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale44, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        boolean boolean54 = fraction39.equals((java.lang.Object) localeList53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction8.divide(fraction39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat57 = fractionFormat56.getNumeratorFormat();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMaximumIntegerDigits((-1));
        java.util.Currency currency64 = numberFormat61.getCurrency();
        numberFormat60.setCurrency(currency64);
        java.lang.String str67 = numberFormat60.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59, numberFormat60, numberFormat69);
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (short) 10);
        parsePosition73.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat70.parse("fran\347ais", parsePosition73);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance();
        numberFormat77.setMaximumIntegerDigits((-1));
        java.util.Currency currency80 = numberFormat77.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = new org.apache.commons.math.fraction.FractionFormat(numberFormat77);
        boolean boolean82 = parsePosition73.equals((java.lang.Object) fractionFormat81);
        java.lang.Object obj83 = numberFormat57.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition73);
        boolean boolean84 = fraction8.equals(obj83);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction3.divide(fraction8);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction3.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-117 / 1" + "'", str12, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-117) + "'", int28 == (-117));
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(currency64);
// flaky:         org.junit.Assert.assertEquals(currency64.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10.000%" + "'", str67, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(currency80);
// flaky:         org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 10);
        parsePosition66.setErrorIndex((int) (byte) 1);
        java.lang.Object obj69 = fractionFormat63.parseObject("United Kingdom", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat17.parse("32", parsePosition66);
        java.text.NumberFormat numberFormat71 = properFractionFormat17.getDenominatorFormat();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayLanguage(locale73);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getNumberInstance(locale73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance();
        numberFormat77.setMaximumIntegerDigits((-1));
        java.util.Currency currency80 = numberFormat77.getCurrency();
        numberFormat76.setCurrency(currency80);
        numberFormat75.setCurrency(currency80);
        java.lang.String str84 = numberFormat75.format((double) (byte) -1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat71, numberFormat75);
        java.text.NumberFormat numberFormat86 = fractionFormat85.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = new org.apache.commons.math.fraction.FractionFormat(numberFormat86);
        java.text.NumberFormat numberFormat89 = java.text.NumberFormat.getInstance();
        java.lang.String str91 = numberFormat89.format(100L);
        java.text.NumberFormat numberFormat93 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition96 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj97 = numberFormat93.parseObject("hi!", parsePosition96);
        java.lang.Number number98 = numberFormat89.parse("10,000%", parsePosition96);
        java.lang.Object obj99 = numberFormat86.parseObject("12", parsePosition96);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str74, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(currency80);
// flaky:         org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1" + "'", str84, "-1");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "100" + "'", str91, "100");
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertNull(number98);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat5.setCurrency(currency12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat5);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        numberFormat16.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean22 = numberFormat21.isGroupingUsed();
        numberFormat21.setParseIntegerOnly(false);
        java.lang.Number number26 = numberFormat21.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat16, numberFormat21);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        numberFormat29.setCurrency(currency33);
        java.lang.String str36 = numberFormat29.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat38 = fractionFormat37.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28, numberFormat29, numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat21);
        int int42 = numberFormat21.getMaximumFractionDigits();
        java.text.Format.Field field43 = null;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition(field43, (int) (short) 10);
        boolean boolean46 = numberFormat21.equals((java.lang.Object) field43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uce90\ub098\ub2e4" + "'", str1, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 0L + "'", number26, 0L);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
// flaky:         org.junit.Assert.assertEquals(currency33.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "10.000%" + "'", str36, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        numberFormat58.setMaximumIntegerDigits((int) 'u');
        boolean boolean63 = numberFormat58.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.util.Locale locale11 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        java.lang.String str18 = numberFormat13.format((double) 10);
        boolean boolean20 = numberFormat13.equals((java.lang.Object) "");
        fractionFormat12.setNumeratorFormat(numberFormat13);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(2147483647);
        java.lang.Object obj25 = numberFormat13.parseObject("\uc601\uad6d", parsePosition24);
        java.lang.Object obj26 = numberFormat7.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction27 = fractionFormat5.parse("\u5fb7\u56fd", parsePosition24);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
// flaky:         org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(fraction27);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        java.util.Locale locale3 = new java.util.Locale("120", "zh_tw", "java.text.ParseException: ");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale5);
        java.lang.String str9 = locale3.getDisplayVariant(locale5);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale3.getDisplayVariant(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((int) (byte) -35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer17 = numberFormat12.format((long) (short) 35, stringBuffer14, fieldPosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "120_ZH_TW_java.text.ParseException: ");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParseException: " + "'", str9, "java.text.ParseException: ");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParseException: " + "'", str11, "java.text.ParseException: ");
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.ParseException: 1", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseexception:1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        java.util.Locale locale2 = new java.util.Locale("", "java.text.ParsePosition[index=-117,errorIndex=9]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = numberFormat3.parseObject("$100.00", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_JAVA.TEXT.PARSEPOSITION[INDEX=-117,ERRORINDEX=9]");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c", "java.text.ParseException: ko", "\u671d\u9c9c\u6587\u671d\u9c9c\u6587)");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException12 = new java.text.ParseException("anglais", (-117));
        parseException9.addSuppressed((java.lang.Throwable) parseException12);
        int int14 = parseException9.getErrorOffset();
        boolean boolean15 = fieldPosition6.equals((java.lang.Object) parseException9);
        int int16 = fieldPosition6.getBeginIndex();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = locale19.getVariant();
        java.util.Locale.setDefault(category17, locale19);
        java.util.Locale locale24 = java.util.Locale.getDefault(category17);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.util.Locale.setDefault(category17, locale25);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale.setDefault(category17, locale28);
        java.util.Locale locale31 = java.util.Locale.getDefault(category17);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.lang.String str36 = locale32.getCountry();
        java.lang.String str37 = locale32.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale.setDefault(category17, locale32);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale32);
        boolean boolean41 = fieldPosition6.equals((java.lang.Object) locale32);
        java.lang.String str42 = locale3.getDisplayName(locale32);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\u671d\u9c9c\u6587\u671d\u9c9c\u6587)");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ub3c5\uc77c\u671d\u9c9c\u6587\u671d\u9c9c\u6587))" + "'", str42, "\ub3c5\uc77c\u671d\u9c9c\u6587\u671d\u9c9c\u6587))");
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        java.util.Locale locale1 = new java.util.Locale("fr");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale3.getDisplayScript(locale5);
        java.lang.String str8 = locale5.toLanguageTag();
        java.lang.String str9 = locale2.getDisplayLanguage(locale5);
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale5.getDisplayCountry(locale10);
        java.util.Locale locale12 = locale5.stripExtensions();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale12);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale15.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale15.getDisplayVariant(locale21);
        java.lang.String str23 = locale21.getVariant();
        java.lang.String str25 = locale21.getExtension('u');
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) (short) 0);
        java.lang.String str30 = fieldPosition29.toString();
        java.lang.String str31 = fieldPosition29.toString();
        fieldPosition29.setBeginIndex((int) (byte) 10);
        fieldPosition29.setBeginIndex((int) '4');
        int int36 = fieldPosition29.getBeginIndex();
        java.text.Format.Field field37 = fieldPosition29.getFieldAttribute();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        int int40 = numberFormat39.getMinimumFractionDigits();
        numberFormat39.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        numberFormat46.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        numberFormat49.setCurrency(currency53);
        numberFormat46.setCurrency(currency53);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMaximumIntegerDigits((-1));
        java.util.Currency currency59 = numberFormat56.getCurrency();
        java.lang.String str61 = numberFormat56.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat46, numberFormat56);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance();
        java.lang.String str66 = numberFormat64.format(100L);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj72 = numberFormat68.parseObject("hi!", parsePosition71);
        java.lang.Number number73 = numberFormat64.parse("10,000%", parsePosition71);
        int int74 = parsePosition71.getErrorIndex();
        java.lang.Object obj75 = properFractionFormat62.parseObject("French", parsePosition71);
        java.lang.Object obj76 = fractionFormat43.parseObject("kor", parsePosition71);
        boolean boolean77 = fieldPosition29.equals((java.lang.Object) parsePosition71);
        java.lang.String str78 = fieldPosition29.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = numberFormat14.format((java.lang.Object) str25, stringBuffer26, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str9, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0%" + "'", str61, "0%");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(number73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=52,endIndex=0]" + "'", str78, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=52,endIndex=0]");
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str7 = locale3.getExtension('u');
        java.lang.String str8 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getDenominatorFormat();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.util.Currency currency9 = numberFormat6.getCurrency();
        numberFormat5.setCurrency(currency9);
        java.lang.String str12 = numberFormat5.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat5, numberFormat14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj21 = numberFormat17.parseObject("hi!", parsePosition20);
        java.lang.String str22 = parsePosition20.toString();
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat15.parse("\244 32.00", parsePosition20);
        java.text.NumberFormat numberFormat24 = properFractionFormat15.getDenominatorFormat();
        fractionFormat2.setDenominatorFormat(numberFormat24);
        int int26 = numberFormat24.getMinimumFractionDigits();
        java.lang.String str28 = numberFormat24.format((long) (-3499));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10,000%" + "'", str12, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str22, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-3,499" + "'", str28, "-3,499");
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        float float2 = fraction1.floatValue();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder5.setVariant("French");
        java.util.Locale.Builder builder9 = builder5.setVariant("Chinese");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category10);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale23);
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale23.getDisplayScript(locale26);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale23);
        java.util.Set<java.lang.Character> charSet30 = locale23.getExtensionKeys();
        java.util.Locale.Builder builder31 = builder22.setLocale(locale23);
        java.lang.String str32 = locale23.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = fraction1.compareTo((java.lang.Object) locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.addUnicodeLocaleAttribute("DEU");
        java.util.Locale.Builder builder17 = builder11.setRegion("");
        java.util.Locale.Builder builder19 = builder11.setLanguageTag("anglais");
        java.util.Locale.Builder builder20 = builder19.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 1000L, (double) 51, 4);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 115, 117.0d, 4095);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction(4, 2);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        int int18 = fraction17.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction21.add(fraction23);
        int int30 = fraction29.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction17.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int40 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction39);
        boolean boolean43 = fraction39.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction6.subtract(fraction17);
        int int47 = fraction3.compareTo((java.lang.Object) fraction17);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction(51, 9);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int55 = fraction54.intValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction51.subtract(fraction54);
        boolean boolean58 = fraction54.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction50.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction3.add(fraction54);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-117 / 1" + "'", str22, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-117) + "'", int40 == (-117));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-117) + "'", int55 == (-117));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und-Canada");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und-canada" + "'", str2, "und-canada");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und-canada" + "'", str3, "und-canada");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.lang.String str35 = numberFormat33.format(0L);
        int int36 = numberFormat33.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en", (double) 14.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=14.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.util.Locale.setDefault(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str7 = locale2.getDisplayScript();
        java.lang.String str8 = locale2.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.lang.String str13 = locale11.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale11.getDisplayCountry(locale15);
        boolean boolean19 = fraction2.equals((java.lang.Object) locale11);
        java.util.Set<java.lang.String> strSet20 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale11.getDisplayScript();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str23 = locale11.getCountry();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        java.util.Locale locale2 = new java.util.Locale("", "TW");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale2);
        numberFormat4.setMaximumIntegerDigits((int) (short) 13689);
        java.lang.Object obj7 = numberFormat4.clone();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        numberFormat13.setCurrency(currency17);
        numberFormat10.setCurrency(currency17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        java.lang.String str25 = numberFormat20.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat10, numberFormat20);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj36 = numberFormat32.parseObject("hi!", parsePosition35);
        java.lang.Number number37 = numberFormat28.parse("10,000%", parsePosition35);
        int int38 = parsePosition35.getErrorIndex();
        int int39 = parsePosition35.getIndex();
        org.apache.commons.math.fraction.Fraction fraction40 = properFractionFormat26.parse("French", parsePosition35);
        parsePosition35.setIndex((int) (short) -1);
        int int43 = parsePosition35.getErrorIndex();
        java.lang.Number number44 = numberFormat4.parse("\u5fb7\u6587", parsePosition35);
        org.junit.Assert.assertEquals(locale2.toString(), "_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0%" + "'", str25, "0%");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNull(fraction40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNull(number44);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.getISO3Language();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat8);
        numberFormat8.setGroupingUsed(true);
        java.lang.Number number13 = numberFormat8.parse("4 / 1");
        java.lang.Object obj14 = numberFormat8.clone();
        boolean boolean15 = numberFormat8.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + number13 + "' != '" + 4L + "'", number13, 4L);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = locale4.hasExtensions();
        java.lang.Object obj7 = locale4.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "en");
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-29), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -29 to fraction (-9,223,372,036,854,775,778/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long3 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.reciprocal();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 11.7f);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int10 = fraction9.intValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.subtract(fraction9);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.add(fraction6);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction4.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction1.divide(fraction13);
        double double16 = fraction1.doubleValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-117 / 1" + "'", str5, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-117) + "'", int10 == (-117));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 11.7d + "'", double16 == 11.7d);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale0.getDisplayScript(locale2);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale0.getDisplayVariant(locale6);
        java.lang.String str8 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str16 = locale13.getISO3Country();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.lang.String str19 = locale18.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ita" + "'", str19, "ita");
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TW");
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("French");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList5 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3, filteringMode4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.getDisplayScript();
        java.lang.String str12 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13, filteringMode14);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder16.setVariant("");
        java.util.Locale.Builder builder21 = builder19.setVariant("Canada");
        java.util.Locale locale22 = builder21.build();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = locale32.getVariant();
        java.util.Locale.setDefault(category30, locale32);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        java.lang.String str39 = locale37.getDisplayScript();
        java.util.Locale.setDefault(category30, locale37);
        java.lang.String str41 = locale28.getDisplayCountry(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale43.getDisplayCountry();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale28.getDisplayLanguage(locale43);
        java.util.Set<java.lang.String> strSet47 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode48 = null;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet47, filteringMode48);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und-Canada" + "'", str23, "und-Canada");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u5fb7\u56fd" + "'", str41, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u52a0\u62ff\u5927" + "'", str44, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "German" + "'", str46, "German");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        java.util.Locale.FilteringMode filteringMode6 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection5, filteringMode6);
        boolean boolean8 = field0.equals((java.lang.Object) localeCollection5);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field0, (-4));
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field0, 2147483647);
        java.lang.Class<?> wildcardClass13 = field0.getClass();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + filteringMode6 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode6.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: 100", "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        java.lang.String str3 = locale2.getCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: 100_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]" + "'", str3, "JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str1, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale78);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        java.text.NumberFormat numberFormat81 = fractionFormat79.getNumeratorFormat();
        properFractionFormat17.setDenominatorFormat(numberFormat81);
        java.util.Locale locale83 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getIntegerInstance(locale83);
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getInstance(locale83);
        properFractionFormat17.setWholeFormat(numberFormat85);
        numberFormat85.setMaximumFractionDigits(1);
        int int89 = numberFormat85.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str65, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        java.util.Locale locale3 = new java.util.Locale("", "en-GB", "java.text.AttributedCharacterIterator$Attribute(language)");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale11.getDisplayLanguage(locale16);
        java.lang.String str18 = locale5.getDisplayName(locale16);
        java.lang.String str19 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale21 = locale5.stripExtensions();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str23 = locale3.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str25 = locale3.getISO3Language();
        org.junit.Assert.assertEquals(locale3.toString(), "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u671d\u9c9c\u6587" + "'", str17, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat1.setGroupingUsed(false);
        boolean boolean4 = numberFormat1.isGroupingUsed();
        numberFormat1.setMaximumIntegerDigits((int) 'a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        int int23 = fraction22.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        int int29 = fraction28.intValue();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.NumberFormat.Field field31 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field31, (int) (short) 0);
        java.lang.String str34 = fieldPosition33.toString();
        java.lang.String str35 = fieldPosition33.toString();
        fieldPosition33.setBeginIndex((int) (byte) 10);
        int int38 = fieldPosition33.getEndIndex();
        java.lang.String str39 = fieldPosition33.toString();
        int int40 = fieldPosition33.getBeginIndex();
        java.text.Format.Field field41 = fieldPosition33.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer42 = fractionFormat2.format(fraction28, stringBuffer30, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str35, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(field41);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 97);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction1.divide(fraction4);
        double double7 = fraction6.doubleValue();
        short short8 = fraction6.shortValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-117 / 1" + "'", str5, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.8290598290598291d) + "'", double7 == (-0.8290598290598291d));
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getVariant();
        java.util.Locale.setDefault(category21, locale23);
        java.lang.String str28 = locale23.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.lang.String str34 = locale23.getDisplayVariant(locale29);
        java.lang.String str35 = locale23.getDisplayName();
        java.util.Locale.Builder builder36 = builder20.setLocale(locale23);
        java.util.Locale locale37 = builder36.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder36.setVariant("korean (south korea)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: korean (south korea) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "United Kingdom" + "'", str33, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 116.991455f, (int) (byte) -97);
        float float3 = fraction2.floatValue();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 116.0f + "'", float3 == 116.0f);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        java.util.Locale locale2 = new java.util.Locale("china", "DEU");
        org.junit.Assert.assertEquals(locale2.toString(), "china_DEU");
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 9, (int) (short) 116);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 9 to fraction (9,223,372,036,854,775,800/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = numberFormat11.parseObject("\ubbf8\uad6d");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.negate();
        int int21 = fraction18.getDenominator();
        float float22 = fraction18.floatValue();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.clearExtensions();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.util.Locale.Builder builder32 = builder23.setLocale(locale28);
        boolean boolean33 = fraction18.equals((java.lang.Object) locale28);
        java.util.Set<java.lang.Character> charSet34 = locale28.getExtensionKeys();
        java.util.Locale locale35 = locale28.stripExtensions();
        java.util.Locale locale36 = locale28.stripExtensions();
        java.util.Locale.Builder builder37 = builder0.setLocale(locale36);
        java.util.Locale.Builder builder38 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder38.setUnicodeLocaleKeyword("java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0]", "0 % / 0 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.FieldPosition[field=13689,attribute=null,beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 117.0f + "'", float22 == 117.0f);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((-315));
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj9 = numberFormat5.parseObject("hi!", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat1.parse("-117 / 1", parsePosition8);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj16 = numberFormat12.parseObject("hi!", parsePosition15);
        parsePosition15.setErrorIndex(10);
        java.lang.String str19 = parsePosition15.toString();
        parsePosition15.setErrorIndex((int) ' ');
        java.lang.Object obj22 = fractionFormat1.parseObject("\244 0.00", parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int31 = fraction30.intValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction25.add(fraction27);
        int int34 = fraction33.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.multiply(fraction37);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance();
        boolean boolean40 = numberFormat39.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39);
        boolean boolean42 = numberFormat39.isParseIntegerOnly();
        boolean boolean43 = fraction37.equals((java.lang.Object) boolean42);
        int int44 = fraction37.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.negate();
        java.lang.StringBuffer stringBuffer46 = null;
        java.text.NumberFormat.Field field47 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale48);
        java.text.NumberFormat numberFormat51 = fractionFormat50.getNumeratorFormat();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 10);
        parsePosition54.setErrorIndex((int) (byte) 1);
        parsePosition54.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction59 = fractionFormat50.parse("French", parsePosition54);
        boolean boolean60 = field47.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field47, (int) (short) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat64 = fractionFormat63.getNumeratorFormat();
        int int65 = numberFormat64.getMinimumFractionDigits();
        numberFormat64.setParseIntegerOnly(false);
        int int68 = numberFormat64.getMaximumIntegerDigits();
        numberFormat64.setMaximumFractionDigits(100);
        numberFormat64.setMaximumIntegerDigits(0);
        boolean boolean73 = field47.equals((java.lang.Object) 0);
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field47);
        java.text.Format.Field field75 = fieldPosition74.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = fractionFormat1.format(fraction37, stringBuffer46, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str19, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-117 / 1" + "'", str26, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-117) + "'", int31 == (-117));
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u6cd5\u6587" + "'", str49, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(field75);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 97, (int) (byte) 10);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction18.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        boolean boolean32 = parsePosition7.equals((java.lang.Object) fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction5.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int38 = fraction37.getDenominator();
        float float39 = fraction37.floatValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.multiply(fraction37);
        int int41 = fraction31.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction31.abs();
        int int43 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.add(fraction48);
        int int55 = fraction54.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        int int67 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction54.subtract(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '#', (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction72.multiply(fraction75);
        java.lang.String str77 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction76);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction42.add(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction2.subtract(fraction42);
        double double80 = fraction42.doubleValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-117 / 1" + "'", str47, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-4,212 / 97" + "'", str77, "-4,212 / 97");
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance();
        java.lang.String str3 = numberFormat1.format(100L);
        int int4 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setMaximumIntegerDigits(1);
        boolean boolean8 = numberFormat1.equals((java.lang.Object) (-117));
        java.lang.String str10 = numberFormat1.format((double) (-1));
        fractionFormat0.setDenominatorFormat(numberFormat1);
        java.text.NumberFormat numberFormat12 = fractionFormat0.getNumeratorFormat();
        numberFormat12.setMaximumFractionDigits((int) (byte) 1);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1" + "'", str10, "-1");
        org.junit.Assert.assertNotNull(numberFormat12);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.getDisplayScript();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale0);
        int int9 = numberFormat8.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        java.lang.String str47 = numberFormat36.format((java.lang.Object) 0.0f);
        properFractionFormat32.setNumeratorFormat(numberFormat36);
        numberFormat36.setParseIntegerOnly(false);
        java.lang.String str52 = numberFormat36.format((double) 3);
        java.lang.Object obj54 = numberFormat36.parseObject("-1,357,200%");
        numberFormat36.setMinimumFractionDigits((-4096));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "3" + "'", str52, "3");
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + (-1357200L) + "'", obj54, (-1357200L));
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: ", "-\244 13,572.00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=100,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=100,endIndex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: _-\244 13,572.00");
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale17 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale17);
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587" + "'", str20, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat5, numberFormat11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat17.setCurrency(currency21);
        numberFormat14.setCurrency(currency21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        java.lang.String str29 = numberFormat24.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance();
        java.lang.String str34 = numberFormat32.format(100L);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj40 = numberFormat36.parseObject("hi!", parsePosition39);
        java.lang.Number number41 = numberFormat32.parse("10,000%", parsePosition39);
        int int42 = parsePosition39.getErrorIndex();
        java.lang.Object obj43 = properFractionFormat30.parseObject("French", parsePosition39);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.text.NumberFormat numberFormat48 = fractionFormat47.getNumeratorFormat();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 10);
        parsePosition51.setErrorIndex((int) (byte) 1);
        parsePosition51.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction56 = fractionFormat47.parse("French", parsePosition51);
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat30.parse("", parsePosition51);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale59);
        java.lang.Object obj62 = numberFormat61.clone();
        properFractionFormat30.setWholeFormat(numberFormat61);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        java.lang.String str70 = locale65.toLanguageTag();
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getCurrencyInstance(locale65);
        boolean boolean72 = numberFormat71.isParseIntegerOnly();
        properFractionFormat30.setDenominatorFormat(numberFormat71);
        boolean boolean74 = numberFormat71.isParseIntegerOnly();
        int int75 = numberFormat71.getMaximumFractionDigits();
        properFractionFormat12.setWholeFormat(numberFormat71);
        java.math.RoundingMode roundingMode77 = numberFormat71.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(number41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u6cd5\u6587" + "'", str46, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNull(fraction57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ko" + "'", str70, "ko");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + roundingMode77 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode77.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fr", strMap1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance();
        java.lang.String str5 = numberFormat3.format(100L);
        int int6 = numberFormat3.getMinimumFractionDigits();
        numberFormat3.setMaximumIntegerDigits(1);
        boolean boolean10 = numberFormat3.equals((java.lang.Object) (-117));
        java.lang.String str12 = numberFormat3.format((double) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale17, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.lang.String[] strArray34 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap38);
        boolean boolean40 = numberFormat3.equals((java.lang.Object) languageRangeList14);
        java.util.Collection<java.lang.String> strCollection41 = null;
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale46.getScript();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale46, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList52, filteringMode54);
        java.lang.String[] strArray63 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList64);
        java.util.Locale locale67 = java.util.Locale.UK;
        java.lang.String str68 = locale67.getDisplayScript();
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet69, filteringMode82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection41, filteringMode82);
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList85);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "100" + "'", str5, "100");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.lang.String str21 = locale17.getCountry();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale17);
        java.util.Currency currency23 = numberFormat22.getCurrency();
        numberFormat22.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        int int28 = numberFormat27.getMinimumFractionDigits();
        numberFormat27.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        numberFormat27.setMaximumIntegerDigits((int) 'u');
        numberFormat27.setMinimumFractionDigits(3);
        numberFormat27.setMaximumIntegerDigits(32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat22, numberFormat27);
        numberFormat22.setMinimumIntegerDigits((int) (byte) -4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        java.lang.String str17 = numberFormat14.format((double) (byte) -1);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getNumberInstance(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.util.Currency currency26 = numberFormat23.getCurrency();
        numberFormat22.setCurrency(currency26);
        numberFormat21.setCurrency(currency26);
        boolean boolean29 = numberFormat21.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat21);
        fractionFormat12.setNumeratorFormat(numberFormat14);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance();
        boolean boolean34 = numberFormat33.isParseIntegerOnly();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        int int46 = parsePosition43.getErrorIndex();
        int int47 = parsePosition43.getIndex();
        int int48 = parsePosition43.getErrorIndex();
        java.lang.Object obj49 = numberFormat33.parseObject("-1 / 1", parsePosition43);
        java.lang.Number number50 = numberFormat14.parse("\uc601\uc5b4\uc601\uad6d)", parsePosition43);
        parsePosition43.setIndex(3);
        boolean boolean53 = languageRange1.equals((java.lang.Object) 3);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "can" + "'", str5, "can");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "can" + "'", str6, "can");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1" + "'", str17, "-1");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(number50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int28 = fraction27.intValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.add(fraction24);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction19.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int40 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction32.add(fraction36);
        double double44 = fraction32.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.multiply(fraction32);
        float float46 = fraction45.floatValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        int int49 = fraction47.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-117 / 1" + "'", str23, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-117) + "'", int28 == (-117));
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-117) + "'", int40 == (-117));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-116.0d) + "'", double44 == (-116.0d));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + (-116.0f) + "'", float46 == (-116.0f));
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 116 + "'", int49 == 116);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        int int2 = numberFormat1.getMaximumIntegerDigits();
        java.lang.String str4 = numberFormat1.format((long) (byte) 1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        java.lang.String str21 = numberFormat16.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat6, numberFormat16);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj32 = numberFormat28.parseObject("hi!", parsePosition31);
        java.lang.Number number33 = numberFormat24.parse("10,000%", parsePosition31);
        int int34 = parsePosition31.getErrorIndex();
        java.lang.Object obj35 = properFractionFormat22.parseObject("French", parsePosition31);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        parsePosition43.setErrorIndex((int) (byte) 1);
        parsePosition43.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction48 = fractionFormat39.parse("French", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat22.parse("", parsePosition43);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        java.lang.Object obj54 = numberFormat53.clone();
        properFractionFormat22.setWholeFormat(numberFormat53);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale56.getDisplayCountry(locale57);
        java.lang.String str62 = locale57.toLanguageTag();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getCurrencyInstance(locale57);
        boolean boolean64 = numberFormat63.isParseIntegerOnly();
        properFractionFormat22.setDenominatorFormat(numberFormat63);
        boolean boolean66 = numberFormat63.isParseIntegerOnly();
        numberFormat63.setMinimumIntegerDigits((int) (short) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat63);
        java.lang.Object obj70 = numberFormat63.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        int int72 = numberFormat63.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100%" + "'", str4, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0%" + "'", str21, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(number33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u6cd5\u6587" + "'", str38, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ko" + "'", str62, "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.lang.String str16 = locale1.getLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Set<java.lang.Character> charSet18 = locale1.getExtensionKeys();
        java.lang.String str20 = locale1.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko" + "'", str16, "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 52, 117.0d, 10);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        java.text.ParseException parseException2 = new java.text.ParseException("-113", 4);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale4.toLanguageTag();
        java.lang.String str8 = locale3.getDisplayName(locale4);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        numberFormat13.setMaximumIntegerDigits((int) (short) 100);
        numberFormat13.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.math.RoundingMode roundingMode21 = numberFormat13.getRoundingMode();
        numberFormat13.setGroupingUsed(true);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        int int27 = numberFormat24.getMinimumFractionDigits();
        numberFormat24.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode33 = numberFormat30.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode33);
        numberFormat13.setRoundingMode(roundingMode33);
        numberFormat12.setRoundingMode(roundingMode33);
        java.lang.StringBuffer stringBuffer37 = null;
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition((java.text.Format.Field) field38, (int) (short) 0);
        java.lang.String str41 = fieldPosition40.toString();
        java.lang.String str42 = fieldPosition40.toString();
        fieldPosition40.setBeginIndex((int) (byte) 10);
        fieldPosition40.setBeginIndex((int) '4');
        int int47 = fieldPosition40.getBeginIndex();
        java.text.Format.Field field48 = fieldPosition40.getFieldAttribute();
        java.lang.String str49 = fieldPosition40.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer50 = fractionFormat10.format((java.lang.Object) roundingMode33, stringBuffer37, fieldPosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))" + "'", str8, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode21.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str41, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=52,endIndex=0]" + "'", str49, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=52,endIndex=0]");
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) (-117));
        java.lang.String str9 = numberFormat0.format((double) (-1));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = numberFormat11.parse("CA");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"CA\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.String str26 = numberFormat24.format((-0.008547008547008548d));
        java.lang.Object obj27 = numberFormat24.clone();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        numberFormat28.setMaximumIntegerDigits((int) (short) 100);
        numberFormat28.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        boolean boolean37 = numberFormat28.isParseIntegerOnly();
        java.util.Currency currency38 = numberFormat28.getCurrency();
        numberFormat24.setCurrency(currency38);
        int int40 = numberFormat24.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-0%" + "'", str26, "-0%");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc911\uad6d\uc5b4\ub300\ub9cc)", 1368.9d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1368.9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale2);
        numberFormat4.setMaximumIntegerDigits((int) (short) -13572);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(120);
        java.lang.Object obj11 = numberFormat4.parseObject("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)", parsePosition10);
        int int12 = parsePosition10.getErrorIndex();
        java.lang.String str13 = parsePosition10.toString();
        java.lang.String str14 = parsePosition10.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120 + "'", int12 == 120);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=120]" + "'", str13, "java.text.ParsePosition[index=120,errorIndex=120]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=120]" + "'", str14, "java.text.ParsePosition[index=120,errorIndex=120]");
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.util.Locale locale8 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj17 = numberFormat13.parseObject("hi!", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat11.parse("\244 32.00", parsePosition16);
        java.text.NumberFormat numberFormat20 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        int int24 = numberFormat21.getMinimumFractionDigits();
        numberFormat21.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode30 = numberFormat27.getRoundingMode();
        numberFormat21.setRoundingMode(roundingMode30);
        boolean boolean32 = numberFormat21.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat21);
        java.text.NumberFormat numberFormat34 = properFractionFormat11.getWholeFormat();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.text.NumberFormat numberFormat37 = fractionFormat36.getNumeratorFormat();
        properFractionFormat11.setNumeratorFormat(numberFormat37);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = locale41.getVariant();
        java.util.Locale.setDefault(category39, locale41);
        java.util.Locale locale46 = java.util.Locale.getDefault(category39);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.util.Locale.setDefault(category39, locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale.setDefault(category39, locale50);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale53.getDisplayScript();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.lang.String str59 = locale57.getISO3Country();
        java.lang.String str60 = locale57.getDisplayLanguage();
        java.util.Locale.setDefault(category39, locale57);
        boolean boolean62 = numberFormat37.equals((java.lang.Object) locale57);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str18, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder12.clear();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.lang.String str6 = locale5.getLanguage();
        java.util.Locale.setDefault(locale5);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.lang.Object obj18 = numberFormat11.clone();
        int int19 = numberFormat11.getMinimumFractionDigits();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale20);
        java.lang.String str24 = numberFormat22.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat26 = null;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        numberFormat31.setCurrency(currency35);
        numberFormat28.setCurrency(currency35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits((-1));
        java.util.Currency currency41 = numberFormat38.getCurrency();
        java.lang.String str43 = numberFormat38.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat28, numberFormat38);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        properFractionFormat44.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance();
        java.lang.String str51 = numberFormat49.format(100L);
        int int52 = numberFormat49.getMinimumFractionDigits();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.lang.String str58 = numberFormat56.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat49, numberFormat56);
        java.text.NumberFormat numberFormat60 = properFractionFormat59.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat62 = fractionFormat61.getNumeratorFormat();
        int int63 = numberFormat62.getMinimumFractionDigits();
        properFractionFormat59.setWholeFormat(numberFormat62);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance();
        numberFormat65.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        boolean boolean71 = numberFormat65.equals((java.lang.Object) locale69);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getNumberInstance(locale69);
        boolean boolean73 = numberFormat62.equals((java.lang.Object) numberFormat72);
        numberFormat72.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat26, numberFormat72);
        java.util.Locale.Category category77 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale78 = java.util.Locale.getDefault(category77);
        java.lang.String str79 = locale78.getDisplayCountry();
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getNumberInstance(locale78);
        properFractionFormat76.setWholeFormat(numberFormat80);
        boolean boolean82 = numberFormat11.equals((java.lang.Object) numberFormat80);
        int int83 = numberFormat11.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Canada" + "'", str21, "Canada");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$52.00" + "'", str24, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0%" + "'", str43, "0%");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32" + "'", str58, "32");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + category77 + "' != '" + java.util.Locale.Category.FORMAT + "'", category77.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder58.setScript("TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        boolean boolean6 = locale0.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getDisplayCountry();
        java.lang.String str12 = locale0.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder16 = builder13.setVariant("");
        java.util.Locale.Builder builder17 = builder13.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("anglais");
        java.util.Locale locale20 = builder19.build();
        java.lang.String str21 = locale7.getDisplayLanguage(locale20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale36 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category22, locale36);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getNumberInstance();
        boolean boolean39 = numberFormat38.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        boolean boolean42 = numberFormat38.equals((java.lang.Object) locale41);
        java.util.Locale.setDefault(category22, locale41);
        java.lang.String str44 = locale41.getDisplayName();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = locale7.getDisplayLanguage(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Deutsch" + "'", str44, "Deutsch");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Koreanisch" + "'", str46, "Koreanisch");
        org.junit.Assert.assertNotNull(fractionFormat47);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (short) 0, 116);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        int int4 = fraction2.getNumerator();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.ParsePosition[index=2147483647,errorIndex=2147483646]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseposition[index=2147483647,errorindex=2147483646]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-13572), (int) '#');
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) parseException6);
        java.text.ParseException parseException11 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException14 = new java.text.ParseException("anglais", (-117));
        parseException11.addSuppressed((java.lang.Throwable) parseException14);
        parseException2.addSuppressed((java.lang.Throwable) parseException14);
        int int17 = parseException14.getErrorOffset();
        java.lang.String str18 = parseException14.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParseException: anglais" + "'", str18, "java.text.ParseException: anglais");
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "Canada");
        java.lang.String str3 = locale2.getVariant();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_CANADA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Locale.setDefault(category2, locale9);
        java.lang.String str13 = locale0.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.Object obj15 = numberFormat14.clone();
        numberFormat14.setMinimumFractionDigits((int) (byte) 100);
        int int18 = numberFormat14.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u56fd" + "'", str13, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        boolean boolean12 = locale8.hasExtensions();
        java.util.Locale.Builder builder13 = builder6.setLocale(locale8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str32 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction31.add(fraction33);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction28.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int49 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction41.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction26.multiply(fraction41);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale56.toLanguageTag();
        java.lang.String str60 = locale56.getVariant();
        boolean boolean61 = fraction53.equals((java.lang.Object) locale56);
        java.lang.String str62 = locale8.getDisplayScript(locale56);
        java.lang.String str63 = locale56.getDisplayLanguage();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale65);
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.util.Locale locale70 = java.util.Locale.UK;
        java.lang.String str71 = locale70.getDisplayScript();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = locale70.getDisplayCountry(locale73);
        java.lang.String str75 = locale69.getDisplayVariant(locale70);
        java.lang.String str76 = locale65.getDisplayName(locale69);
        java.lang.String str77 = locale56.getDisplayScript(locale69);
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.lang.String str82 = locale80.getScript();
        java.lang.String str83 = locale80.getVariant();
        java.util.Locale.setDefault(category78, locale80);
        java.util.Locale locale85 = java.util.Locale.getDefault(category78);
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale86);
        java.util.Locale.setDefault(category78, locale86);
        java.lang.String str89 = locale56.getDisplayScript(locale86);
        java.util.Locale.Builder builder90 = builder2.setLocale(locale86);
        java.util.Locale.Builder builder91 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder92 = builder91.clear();
        java.util.Locale.Builder builder94 = builder91.setVariant("");
        java.util.Locale.Builder builder96 = builder94.setVariant("Canada");
        java.util.Locale locale97 = builder96.build();
        java.util.Locale.Builder builder98 = builder90.setLocale(locale97);
        java.lang.String str99 = locale97.getISO3Country();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-117 / 1" + "'", str32, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-117) + "'", int49 == (-117));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ko" + "'", str59, "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u671d\u9c9c\u6587" + "'", str63, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United Kingdom" + "'", str74, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "coreano" + "'", str76, "coreano");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "");
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("coreano");
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale18);
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = locale18.getISO3Country();
        java.lang.String str24 = locale18.getDisplayName();
        java.util.Locale.Builder builder25 = builder13.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("-97 / 13,572");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -97 / 13,572 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setGroupingUsed(true);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        int int16 = numberFormat14.getMaximumFractionDigits();
        properFractionFormat11.setNumeratorFormat(numberFormat14);
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field23, (int) (short) 0);
        java.lang.String str26 = fieldPosition25.toString();
        java.lang.String str27 = fieldPosition25.toString();
        fieldPosition25.setBeginIndex((int) (byte) 10);
        int int30 = fieldPosition25.getBeginIndex();
        int int31 = fieldPosition25.getBeginIndex();
        fieldPosition25.setEndIndex(350);
        fieldPosition25.setEndIndex((-3));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = properFractionFormat11.format(fraction21, stringBuffer22, fieldPosition25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str26, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str27, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance();
        boolean boolean17 = numberFormat16.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = numberFormat16.equals((java.lang.Object) locale19);
        java.util.Locale.setDefault(category0, locale19);
        java.lang.String str22 = locale19.getCountry();
        java.util.Locale.setDefault(locale19);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayScript();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale0.getDisplayName(locale3);
        java.lang.String str8 = locale0.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getDisplayScript();
        java.lang.String str15 = locale9.getDisplayVariant();
        java.lang.String str16 = locale0.getDisplayLanguage(locale9);
        java.util.Locale locale17 = locale9.stripExtensions();
        java.lang.String str18 = locale17.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str7, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str16, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        double double9 = languageRange1.getWeight();
        java.lang.String str10 = languageRange1.getRange();
        java.lang.String str11 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "can" + "'", str7, "can");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "can" + "'", str8, "can");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "can" + "'", str10, "can");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "can" + "'", str11, "can");
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        java.text.ParseException parseException2 = new java.text.ParseException("\u6cd5\u6587", (-117));
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field7, (int) (short) 0);
        int int10 = fieldPosition9.getEndIndex();
        java.text.ParseException parseException13 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray14 = parseException13.getSuppressed();
        int int15 = parseException13.getErrorOffset();
        boolean boolean16 = fieldPosition9.equals((java.lang.Object) parseException13);
        java.text.ParseException parseException19 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int20 = parseException19.getErrorOffset();
        parseException13.addSuppressed((java.lang.Throwable) parseException19);
        parseException5.addSuppressed((java.lang.Throwable) parseException13);
        parseException2.addSuppressed((java.lang.Throwable) parseException13);
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (short) 0);
        int int27 = fieldPosition26.getEndIndex();
        java.text.ParseException parseException30 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray31 = parseException30.getSuppressed();
        int int32 = parseException30.getErrorOffset();
        boolean boolean33 = fieldPosition26.equals((java.lang.Object) parseException30);
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        parseException30.addSuppressed((java.lang.Throwable) parseException36);
        java.text.ParseException parseException41 = new java.text.ParseException("100", (int) (byte) -1);
        java.lang.Throwable[] throwableArray42 = parseException41.getSuppressed();
        parseException30.addSuppressed((java.lang.Throwable) parseException41);
        parseException2.addSuppressed((java.lang.Throwable) parseException30);
        java.lang.Throwable[] throwableArray45 = parseException30.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-0.028571429f), (double) 100L, 9);
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction11.add(fraction13);
        int int20 = fraction19.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int28 = fraction27.intValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction19.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        boolean boolean33 = parsePosition8.equals((java.lang.Object) fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction6.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int39 = fraction38.getDenominator();
        float float40 = fraction38.floatValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.multiply(fraction38);
        int int42 = fraction32.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction32.abs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction44 = fraction3.divide(fraction43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The fraction to divide by must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-117 / 1" + "'", str12, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-117) + "'", int28 == (-117));
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + (-1.0f) + "'", float40 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(fraction43);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        boolean boolean3 = numberFormat0.isParseIntegerOnly();
        int int4 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setMinimumFractionDigits((int) (byte) 117);
        java.util.Currency currency7 = numberFormat0.getCurrency();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        numberFormat13.setCurrency(currency17);
        numberFormat12.setCurrency(currency17);
        java.lang.String str21 = numberFormat12.format((double) (byte) -1);
        java.lang.Object obj22 = numberFormat12.clone();
        boolean boolean23 = numberFormat12.isParseIntegerOnly();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.text.NumberFormat numberFormat28 = fractionFormat27.getNumeratorFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 10);
        parsePosition31.setErrorIndex((int) (byte) 1);
        parsePosition31.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction36 = fractionFormat27.parse("French", parsePosition31);
        int int37 = parsePosition31.getErrorIndex();
        java.lang.Object obj38 = null;
        boolean boolean39 = parsePosition31.equals(obj38);
        java.lang.Object obj40 = numberFormat12.parseObject("Englisch", parsePosition31);
        java.lang.Object obj41 = numberFormat0.parseObject("1", parsePosition31);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Franz\366sisch" + "'", str26, "Franz\366sisch");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("120");
        java.lang.Class<?> wildcardClass16 = builder13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        java.lang.Object obj11 = fractionFormat1.clone();
        java.text.ParsePosition parsePosition13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = fractionFormat1.parseObject("\u5fb7\u6587\u5fb7\u56fd)", parsePosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance();
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        int int12 = numberFormat11.getMinimumFractionDigits();
        numberFormat11.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        int int46 = parsePosition43.getErrorIndex();
        java.lang.Object obj47 = properFractionFormat34.parseObject("French", parsePosition43);
        java.lang.Object obj48 = fractionFormat15.parseObject("kor", parsePosition43);
        java.lang.Object obj49 = numberFormat7.parseObject("java.text.NumberFormat$Field(currency)", parsePosition43);
        fractionFormat6.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat51 = fractionFormat6.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat51);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        boolean boolean20 = numberFormat8.equals((java.lang.Object) locale15);
        java.lang.String str21 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder23 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder23.setExtension('#', "deutsch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        int int5 = fieldPosition2.getEndIndex();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("Chinese");
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getVariant();
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category21);
        java.util.Locale locale29 = java.util.Locale.getDefault(category21);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale33 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str34 = locale29.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder35 = builder20.setLocale(locale29);
        java.util.Locale.Builder builder37 = builder20.setRegion("FR");
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        boolean boolean39 = fieldPosition2.equals((java.lang.Object) builder37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder37.setLanguageTag("35 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 35 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale33.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Korean" + "'", str34, "Korean");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale4 = new java.util.Locale("francese");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale8.getScript();
        java.lang.String str11 = locale8.getVariant();
        java.util.Locale.setDefault(category6, locale8);
        java.lang.String str13 = locale8.getDisplayName();
        java.util.Set<java.lang.Character> charSet14 = locale8.getExtensionKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.util.Locale locale19 = new java.util.Locale("United Kingdom", "French", "zh_CN");
        java.lang.String str20 = locale8.getDisplayScript(locale19);
        java.util.Locale.Builder builder21 = builder5.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("chinois (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: chinois (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "francese");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "united kingdom_FRENCH_zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-96L));
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale4 = new java.util.Locale("francese");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.Object obj9 = locale6.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "francese");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "francese");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "francese" + "'", str8, "francese");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "francese");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "francese");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "francese");
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        java.text.ParseException parseException2 = new java.text.ParseException("Chinese", 10000);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setRegion("\ubbf8\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(5, 9);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale78);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getNumeratorFormat();
        java.text.NumberFormat numberFormat81 = fractionFormat79.getNumeratorFormat();
        properFractionFormat17.setDenominatorFormat(numberFormat81);
        int int83 = numberFormat81.getMinimumFractionDigits();
        java.lang.Object obj84 = numberFormat81.clone();
        java.lang.StringBuffer stringBuffer86 = null;
        java.text.FieldPosition fieldPosition87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = numberFormat81.format((long) 10, stringBuffer86, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "French" + "'", str65, "French");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        java.util.Locale locale1 = new java.util.Locale("\ub3c5\uc77c\uc5b4");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale6.getCountry();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale6.getDisplayCountry(locale11);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale.setDefault(category13, locale15);
        java.lang.String str20 = locale15.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale21.getDisplayCountry(locale24);
        java.lang.String str26 = locale15.getDisplayVariant(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str28 = locale11.getDisplayName(locale15);
        boolean boolean29 = numberFormat2.equals((java.lang.Object) locale15);
        java.util.Locale locale30 = locale15.stripExtensions();
        boolean boolean31 = locale30.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.lang.String str33 = locale1.getDisplayCountry(locale30);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.lang.String str38 = locale34.getDisplayCountry();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str40 = locale34.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale43);
        java.lang.String str46 = locale39.getDisplayScript(locale43);
        java.lang.String str47 = locale30.getDisplayCountry(locale39);
        org.junit.Assert.assertEquals(locale1.toString(), "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "United Kingdom" + "'", str25, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(fractionFormat27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str28, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u97d3\u6587" + "'", str40, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ub300\ub9cc" + "'", str41, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException4 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException7 = new java.text.ParseException("anglais", (-117));
        parseException4.addSuppressed((java.lang.Throwable) parseException7);
        int int9 = parseException4.getErrorOffset();
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) parseException4);
        fieldPosition1.setEndIndex((int) (short) 120);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field2, (int) (short) 0);
        int int5 = fieldPosition4.getEndIndex();
        java.text.ParseException parseException8 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray9 = parseException8.getSuppressed();
        int int10 = parseException8.getErrorOffset();
        boolean boolean11 = fieldPosition4.equals((java.lang.Object) parseException8);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        boolean boolean20 = locale16.hasExtensions();
        java.util.Locale.Builder builder21 = builder14.setLocale(locale16);
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = fieldPosition4.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category24);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale.setDefault(category24, locale32);
        java.util.Locale locale35 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder36 = builder22.setLocale(locale35);
        java.util.Locale.Builder builder37 = builder22.clear();
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("DEU");
        java.util.Locale.Builder builder41 = builder39.setVariant("Korean");
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale.setDefault(category42, locale44);
        java.util.Locale locale49 = java.util.Locale.getDefault(category42);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.util.Locale.setDefault(category42, locale50);
        java.util.Locale locale53 = java.util.Locale.getDefault(category42);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = locale55.stripExtensions();
        java.util.Locale.setDefault(category42, locale55);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale59);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.lang.String str67 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        java.lang.String str73 = locale68.getDisplayCountry(locale69);
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str75 = locale69.getDisplayLanguage(locale74);
        java.lang.String str76 = locale63.getDisplayName(locale74);
        java.lang.String str77 = locale63.getDisplayCountry();
        java.lang.String str78 = locale59.getDisplayVariant(locale63);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.lang.String str82 = locale79.getISO3Language();
        java.lang.String str83 = locale79.getDisplayCountry();
        java.util.Locale locale84 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str85 = locale79.getDisplayLanguage(locale84);
        java.lang.String str86 = locale63.getDisplayVariant(locale84);
        java.util.Locale locale88 = new java.util.Locale("Korean (South Korea)");
        java.lang.String str89 = locale88.getDisplayName();
        java.lang.String str90 = locale84.getDisplayName(locale88);
        java.util.Locale.setDefault(category42, locale84);
        java.util.Locale.Builder builder92 = builder39.setLocale(locale84);
        java.util.Locale.Builder builder93 = builder1.setLocale(locale84);
        java.util.Locale.Builder builder94 = builder93.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder96 = builder93.setLanguageTag("-13572");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "kor" + "'", str72, "kor");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u671d\u9c9c\u6587" + "'", str75, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u671d\u9c9c\u6587" + "'", str76, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "kor" + "'", str82, "kor");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u97d3\u6587" + "'", str85, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale88.toString(), "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "korean (south korea)" + "'", str89, "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Chinese (Taiwan)" + "'", str90, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        numberFormat14.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat14);
        numberFormat14.setGroupingUsed(true);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        numberFormat24.setCurrency(currency28);
        numberFormat23.setCurrency(currency28);
        numberFormat14.setCurrency(currency28);
        numberFormat14.setMaximumFractionDigits((int) (byte) 100);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale13.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayName(locale14);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale25 = java.util.Locale.getDefault(category18);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale.setDefault(category18, locale26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category18);
        java.lang.String str29 = locale14.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cor\351en" + "'", str17, "cor\351en");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj7 = numberFormat3.parseObject("hi!", parsePosition6);
        java.lang.Object obj8 = numberFormat1.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition6);
        java.lang.String str10 = numberFormat1.format((double) 'x');
        numberFormat1.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat18 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction25.divide(fraction27);
        boolean boolean29 = fraction21.equals((java.lang.Object) fraction25);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.abs();
        java.lang.String str31 = fractionFormat17.format((java.lang.Object) fraction25);
        java.text.NumberFormat numberFormat32 = fractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int42 = fraction41.intValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction36.add(fraction38);
        int int45 = fraction44.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.multiply(fraction48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance();
        boolean boolean51 = numberFormat50.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50);
        boolean boolean53 = numberFormat50.isParseIntegerOnly();
        boolean boolean54 = fraction48.equals((java.lang.Object) boolean53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction33.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction58 = fraction55.divide(fraction57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat60 = fractionFormat59.getNumeratorFormat();
        int int61 = numberFormat60.getMinimumFractionDigits();
        java.lang.String str63 = numberFormat60.format((double) (byte) -1);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getNumberInstance(locale65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance();
        numberFormat69.setMaximumIntegerDigits((-1));
        java.util.Currency currency72 = numberFormat69.getCurrency();
        numberFormat68.setCurrency(currency72);
        numberFormat67.setCurrency(currency72);
        boolean boolean75 = numberFormat67.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60, numberFormat67);
        boolean boolean77 = fraction57.equals((java.lang.Object) numberFormat60);
        boolean boolean78 = numberFormat60.isGroupingUsed();
        java.lang.Object obj79 = null;
        boolean boolean80 = numberFormat60.equals(obj79);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat32, numberFormat60);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "120" + "'", str10, "120");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0 % / 0 %" + "'", str31, "0 % / 0 %");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-117 / 1" + "'", str37, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-117) + "'", int42 == (-117));
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1" + "'", str63, "-1");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(currency72);
        org.junit.Assert.assertEquals(currency72.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = locale0.stripExtensions();
        boolean boolean6 = locale0.hasExtensions();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        int int9 = numberFormat7.getMaximumIntegerDigits();
        java.lang.Object obj10 = null;
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.PERCENT;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field12, 32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer15 = numberFormat7.format(obj10, stringBuffer11, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(field12);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.FieldPosition[field=120,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=120,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        java.util.Locale locale2 = new java.util.Locale("java.text.FieldPosition[field=3,attribute=java.text.NumberFormat$Field(per mille),beginIndex=117,endIndex=0]", "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=3,attribute=java.text.numberformat$field(per mille),beginindex=117,endindex=0]_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number12 = numberFormat10.parse("java.text.ParsePosition[index=3,errorIndex=10]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.ParsePosition[index=3,errorIndex=10]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        boolean boolean27 = locale23.hasExtensions();
        java.util.Locale.Builder builder28 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale.Builder builder33 = builder18.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder18.setLanguageTag("java.text.ParseException: ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.text.ParseException: ko [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(116, 10);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(32, (int) (byte) 97);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction6.multiply(fraction17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 10);
        parsePosition25.setErrorIndex((int) (byte) 1);
        parsePosition25.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction30 = fractionFormat21.parse("French", parsePosition25);
        java.text.NumberFormat numberFormat31 = fractionFormat21.getDenominatorFormat();
        numberFormat31.setMaximumFractionDigits((int) (byte) 100);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        numberFormat34.setMaximumIntegerDigits((-1));
        java.util.Currency currency37 = numberFormat34.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale40);
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition(2147483647);
        boolean boolean45 = numberFormat42.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat42);
        java.lang.String str48 = numberFormat34.format((long) 52);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency50 = numberFormat49.getCurrency();
        boolean boolean51 = numberFormat49.isParseIntegerOnly();
        java.lang.String str53 = numberFormat49.format((double) 0.0f);
        numberFormat49.setMinimumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat34, numberFormat49);
        boolean boolean57 = fraction6.equals((java.lang.Object) numberFormat49);
        int int58 = fraction6.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction2.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNull(fraction30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0 %" + "'", str48, "0 %");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0,00 \244" + "'", str53, "0,00 \244");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = locale1.getDisplayName(locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str6 = locale3.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.lang.String str8 = locale3.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale9.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale14.toLanguageTag();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str20 = locale3.getDisplayVariant(locale14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "coreano" + "'", str4, "coreano");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str5, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u97d3\u6587" + "'", str15, "\u97d3\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ub9cc" + "'", str16, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        boolean boolean9 = fraction5.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.reciprocal();
        float float11 = fraction5.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction1.multiply(fraction5);
        byte byte13 = fraction1.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-117.0f) + "'", float11 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale17 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale17);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        java.lang.String str21 = numberFormat18.format((double) (byte) 117);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "117" + "'", str21, "117");
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getDenominatorFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30);
        int int32 = numberFormat30.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat30);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (byte) -3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction37 = fractionFormat33.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=52,endIndex=-117]", parsePosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str28, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        int int18 = numberFormat0.getMinimumIntegerDigits();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 10);
        parsePosition21.setErrorIndex((int) ' ');
        parsePosition21.setIndex((int) (short) 100);
        java.lang.Number number26 = numberFormat0.parse("fra", parsePosition21);
        java.lang.Object obj27 = numberFormat0.clone();
        numberFormat0.setGroupingUsed(false);
        int int30 = numberFormat0.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (short) 13689);
        fieldPosition1.setBeginIndex((-4));
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) strSet9);
        fieldPosition1.setBeginIndex((int) (byte) 117);
        java.lang.String str13 = fieldPosition1.toString();
        java.text.Format.Field field14 = fieldPosition1.getFieldAttribute();
        fieldPosition1.setEndIndex(315);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=13689,attribute=null,beginIndex=117,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=13689,attribute=null,beginIndex=117,endIndex=0]");
        org.junit.Assert.assertNull(field14);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-84), 2809);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        java.util.Locale locale1 = new java.util.Locale("-11,700%");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "-11,700%");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-11,700%" + "'", str2, "-11,700%");
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale locale6 = builder3.build();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale6.getDisplayLanguage(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale6.getUnicodeLocaleType("\244 1.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ? 1.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uce90\ub098\ub2e4" + "'", str8, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        numberFormat10.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getDisplayVariant();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale20.getDisplayScript(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        boolean boolean29 = numberFormat10.equals((java.lang.Object) locale22);
        java.lang.String str31 = numberFormat10.format(10000L);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000" + "'", str31, "10,000");
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        java.util.Locale locale3 = new java.util.Locale("FRENCH", "French", "Canada");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.Class<?> wildcardClass5 = fractionFormat4.getClass();
        org.junit.Assert.assertEquals(locale3.toString(), "french_FRENCH_Canada");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.lang.String str75 = field0.toString();
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str2, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0 %" + "'", str30, "0 %");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0 %" + "'", str37, "0 %");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0 %" + "'", str69, "0 %");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str75, "java.text.NumberFormat$Field(percent)");
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = fractionFormat2.getDenominatorFormat();
        numberFormat12.setMaximumFractionDigits((int) (byte) 100);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale21);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(2147483647);
        boolean boolean26 = numberFormat23.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat23);
        java.lang.String str29 = numberFormat15.format((long) 52);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency31 = numberFormat30.getCurrency();
        boolean boolean32 = numberFormat30.isParseIntegerOnly();
        java.lang.String str34 = numberFormat30.format((double) 0.0f);
        numberFormat30.setMinimumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat15, numberFormat30);
        numberFormat30.setMaximumFractionDigits((int) 'a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0 %" + "'", str29, "0 %");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0,00 \244" + "'", str34, "0,00 \244");
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat12.getNumeratorFormat();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        boolean boolean19 = numberFormat14.equals((java.lang.Object) throwableArray18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat20.getNumeratorFormat();
        java.text.ParseException parseException25 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray26 = parseException25.getSuppressed();
        boolean boolean27 = numberFormat22.equals((java.lang.Object) throwableArray26);
        numberFormat22.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat31);
        java.lang.Number number34 = numberFormat10.parse("-0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        numberFormat40.setCurrency(currency44);
        numberFormat37.setCurrency(currency44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat37);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.util.Currency currency54 = numberFormat51.getCurrency();
        java.lang.String str56 = numberFormat51.format((double) 10);
        boolean boolean58 = numberFormat51.equals((java.lang.Object) "");
        fractionFormat50.setNumeratorFormat(numberFormat51);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj65 = numberFormat61.parseObject("hi!", parsePosition64);
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat50.parse("100", parsePosition64);
        java.lang.Number number67 = numberFormat36.parse("java.text.ParseException: cor\351en", parsePosition64);
        numberFormat36.setMaximumIntegerDigits(117);
        java.lang.Object obj70 = numberFormat36.clone();
        properFractionFormat35.setDenominatorFormat(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0L + "'", number34, 0L);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0 %" + "'", str56, "0 %");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        fieldPosition2.setEndIndex((int) '#');
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale48.getScript();
        java.lang.String str51 = locale48.getVariant();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale25, locale29, locale30, locale34, locale36, locale39, locale42, locale44, locale48 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale59, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList65, filteringMode67);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList53, filteringMode67);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale71.getDisplayName(locale73);
        java.util.Locale.setDefault(locale73);
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet76);
        boolean boolean78 = fieldPosition2.equals((java.lang.Object) languageRangeList11);
        java.lang.Class<?> wildcardClass79 = fieldPosition2.getClass();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str40, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str72, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "coreano" + "'", str74, "coreano");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder16 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setScript("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=100]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=100] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.setVariant("");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        boolean boolean19 = locale15.hasExtensions();
        java.util.Locale.Builder builder20 = builder13.setLocale(locale15);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale15);
        java.util.Locale locale22 = locale15.stripExtensions();
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale27 = new java.util.Locale("10,000%", "\ud55c\uad6d\uc5b4", "32");
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale22.getDisplayVariant(locale27);
        java.lang.String str30 = locale27.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "\ud55c\uad6d\uc5b4_32");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getDenominatorFormat();
        java.text.NumberFormat numberFormat26 = properFractionFormat23.getWholeFormat();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale27.getDisplayScript(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale29);
        java.lang.Object obj33 = numberFormat32.clone();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.ParseException: cor\351en", parsePosition36);
        properFractionFormat23.setWholeFormat(numberFormat32);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (byte) -10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat23.parse("\244 10,00", parsePosition41);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 97, (int) (byte) 10);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction18.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        boolean boolean32 = parsePosition7.equals((java.lang.Object) fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction5.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int38 = fraction37.getDenominator();
        float float39 = fraction37.floatValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.multiply(fraction37);
        int int41 = fraction31.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction31.abs();
        int int43 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.add(fraction48);
        int int55 = fraction54.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        int int67 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction54.subtract(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '#', (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction72.multiply(fraction75);
        java.lang.String str77 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction76);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction42.add(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction2.subtract(fraction42);
        int int80 = fraction79.intValue();
        int int81 = fraction79.intValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-117 / 1" + "'", str47, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-4,212 / 97" + "'", str77, "-4,212 / 97");
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (short) 13571);
        byte byte2 = fraction1.byteValue();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 3 + "'", byte2 == (byte) 3);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        java.lang.String str8 = fieldPosition2.toString();
        int int9 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field10 = fieldPosition2.getFieldAttribute();
        int int11 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) (short) -1170);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str8, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????(??????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) str8);
        boolean boolean11 = fieldPosition2.equals((java.lang.Object) (short) -1);
        fieldPosition2.setBeginIndex((-117));
        int int14 = fieldPosition2.getEndIndex();
        java.text.Format.Field field15 = fieldPosition2.getFieldAttribute();
        java.util.Locale locale17 = new java.util.Locale("Franz\366sisch");
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        java.lang.String str22 = locale20.getScript();
        java.util.Locale.Builder builder23 = builder18.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder18.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale26 = builder18.build();
        java.lang.String str27 = locale17.getDisplayCountry(locale26);
        boolean boolean28 = locale17.hasExtensions();
        boolean boolean29 = field15.equals((java.lang.Object) locale17);
        java.lang.String str30 = locale17.getScript();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str8, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertEquals(locale17.toString(), "franz\366sisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder7 = builder2.setLanguageTag("fra");
        java.util.Locale.Builder builder8 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setUnicodeLocaleKeyword("\u52a0\u62ff\u5927\u5fb7\u56fd)", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=1,endindex=0] (???,??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        numberFormat0.setMaximumFractionDigits((int) (short) -117);
        int int7 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setGroupingUsed(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = numberFormat0.parse("java.text.NumberFormat$Field(exponent symbol)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.NumberFormat$Field(exponent symbol)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
// flaky:         org.junit.Assert.assertEquals(currency3.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction10.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction20 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int25 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        boolean boolean41 = fraction26.equals((java.lang.Object) localeList40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction26.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction19.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        boolean boolean51 = fraction47.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction47.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str69 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction68);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int74 = fraction73.intValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction70.subtract(fraction73);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction68.add(fraction70);
        int int77 = fraction76.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction80 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction76.multiply(fraction80);
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getNumberInstance();
        boolean boolean83 = numberFormat82.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat84 = new org.apache.commons.math.fraction.FractionFormat(numberFormat82);
        boolean boolean85 = numberFormat82.isParseIntegerOnly();
        boolean boolean86 = fraction80.equals((java.lang.Object) boolean85);
        org.apache.commons.math.fraction.Fraction fraction87 = fraction65.multiply(fraction80);
        int int88 = fraction87.intValue();
        org.apache.commons.math.fraction.Fraction fraction89 = fraction64.add(fraction87);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction43.subtract(fraction64);
        int int91 = fraction43.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction92 = fraction2.add(fraction43);
        int int93 = fraction2.intValue();
        double double94 = fraction2.doubleValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-117) + "'", int25 == (-117));
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-117 / 1" + "'", str69, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-117) + "'", int74 == (-117));
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 117 + "'", int91 == 117);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-0.02857142857142857d) + "'", double94 == (-0.02857142857142857d));
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale4 = new java.util.Locale("francese");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension(' ', "inglese (Stati Uniti)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "francese");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: java.text.ParseException: 100", "-1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.lang.String str18 = locale13.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.String str20 = locale10.getDisplayVariant(locale13);
        java.lang.String str21 = locale6.getDisplayCountry(locale10);
        java.lang.String str22 = locale2.getDisplayScript(locale6);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet26 = locale23.getExtensionKeys();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale.setDefault(category27, locale29);
        java.lang.String str34 = locale29.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale35.getDisplayCountry(locale38);
        java.lang.String str40 = locale29.getDisplayVariant(locale35);
        java.lang.String str41 = locale23.getDisplayName(locale35);
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale23.getDisplayLanguage(locale42);
        java.lang.String str44 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale23);
        java.lang.String str46 = locale6.getDisplayLanguage(locale23);
        java.lang.String str47 = locale23.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: java.text.parseexception: 100_-1");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko" + "'", str18, "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "United Kingdom" + "'", str39, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean" + "'", str46, "Korean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setVariant("anglais (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: anglais (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 3);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.util.Currency currency9 = numberFormat6.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        int int11 = numberFormat6.getMinimumIntegerDigits();
        numberFormat6.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        java.lang.String str23 = numberFormat16.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat16, numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        parsePosition29.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat26.parse("fran\347ais", parsePosition29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.util.Currency currency36 = numberFormat33.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        boolean boolean38 = parsePosition29.equals((java.lang.Object) fractionFormat37);
        java.lang.Object obj39 = numberFormat6.parseObject("0 / 1", parsePosition29);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 10);
        parsePosition45.setErrorIndex((int) (byte) 1);
        java.lang.Object obj48 = fractionFormat42.parseObject("United Kingdom", parsePosition45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj53 = numberFormat49.parseObject("hi!", parsePosition52);
        fractionFormat42.setDenominatorFormat(numberFormat49);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj60 = numberFormat56.parseObject("hi!", parsePosition59);
        parsePosition59.setErrorIndex(10);
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat42.parse("coreano", parsePosition59);
        java.lang.Object obj64 = numberFormat6.parseObject("en-GB", parsePosition59);
        java.lang.Object obj65 = numberFormat3.parseObject("\uce90\ub098\ub2e4", parsePosition59);
        numberFormat3.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
// flaky:         org.junit.Assert.assertEquals(currency9.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "JPY");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10,000%" + "'", str23, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency36);
// flaky:         org.junit.Assert.assertEquals(currency36.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction25 = fraction22.divide(fraction24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        int int28 = numberFormat27.getMinimumFractionDigits();
        java.lang.String str30 = numberFormat27.format((double) (byte) -1);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        numberFormat35.setCurrency(currency39);
        numberFormat34.setCurrency(currency39);
        boolean boolean42 = numberFormat34.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat34);
        boolean boolean44 = fraction24.equals((java.lang.Object) numberFormat27);
        boolean boolean45 = numberFormat27.isGroupingUsed();
        int int46 = numberFormat27.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction51.divide(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction60 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction58.divide(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction54.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction54.abs();
        java.lang.StringBuffer stringBuffer65 = null;
        java.text.NumberFormat.Field field66 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field66, (int) (short) 0);
        int int69 = fieldPosition68.getEndIndex();
        java.text.Format.Field field70 = fieldPosition68.getFieldAttribute();
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition(field70, 1);
        java.text.Format.Field field73 = fieldPosition72.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = properFractionFormat47.format(fraction54, stringBuffer65, fieldPosition72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
// flaky:         org.junit.Assert.assertEquals(currency39.toString(), "JPY");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(field66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(field70);
        org.junit.Assert.assertNotNull(field73);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        numberFormat24.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.getDisplayScript();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        properFractionFormat27.setWholeFormat(numberFormat30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj37 = numberFormat33.parseObject("hi!", parsePosition36);
        parsePosition36.setErrorIndex(10);
        parsePosition36.setIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat27.parse("ja-JP", parsePosition36);
        int int43 = parsePosition36.getErrorIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        numberFormat24.setMinimumFractionDigits(4095);
        java.lang.Object obj63 = numberFormat24.clone();
        java.lang.Object obj65 = numberFormat24.parseObject(",0000000000%");
        java.lang.Object obj66 = numberFormat24.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "JPY");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "JPY");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "JPY");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + 0L + "'", obj65, 0L);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.util.Locale locale12 = new java.util.Locale("french-French");
        java.lang.String str13 = locale6.getDisplayVariant(locale12);
        java.lang.String str14 = locale12.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertEquals(locale12.toString(), "french-french");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat5.setCurrency(currency12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat5);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        numberFormat16.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean22 = numberFormat21.isGroupingUsed();
        numberFormat21.setParseIntegerOnly(false);
        java.lang.Number number26 = numberFormat21.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat16, numberFormat21);
        java.text.NumberFormat numberFormat28 = properFractionFormat27.getWholeFormat();
        java.lang.Object obj29 = numberFormat28.clone();
        numberFormat28.setGroupingUsed(true);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        numberFormat34.setMaximumIntegerDigits((-1));
        java.util.Currency currency37 = numberFormat34.getCurrency();
        java.lang.String str39 = numberFormat34.format((double) 10);
        boolean boolean41 = numberFormat34.equals((java.lang.Object) "");
        fractionFormat33.setNumeratorFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat28, numberFormat34);
        java.lang.Object obj45 = numberFormat28.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 0L + "'", number26, 0L);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency37);
// flaky:         org.junit.Assert.assertEquals(currency37.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0 %" + "'", str39, "0 %");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder20.clear();
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("DEU");
        java.util.Locale locale38 = builder37.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder37.setLanguage("EN-GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: EN-GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "deu");
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(118.97142857142858d, 2147483646);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        java.lang.String str47 = numberFormat36.format((java.lang.Object) 0.0f);
        properFractionFormat32.setNumeratorFormat(numberFormat36);
        numberFormat36.setParseIntegerOnly(false);
        numberFormat36.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        java.text.ParseException parseException2 = new java.text.ParseException("100%", (int) '#');
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field3, (int) (short) 0);
        int int6 = fieldPosition5.getEndIndex();
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        int int11 = parseException9.getErrorOffset();
        boolean boolean12 = fieldPosition5.equals((java.lang.Object) parseException9);
        java.text.ParseException parseException15 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int16 = parseException15.getErrorOffset();
        parseException9.addSuppressed((java.lang.Throwable) parseException15);
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field18, (int) (short) 0);
        int int21 = fieldPosition20.getEndIndex();
        java.text.ParseException parseException24 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray25 = parseException24.getSuppressed();
        int int26 = parseException24.getErrorOffset();
        boolean boolean27 = fieldPosition20.equals((java.lang.Object) parseException24);
        parseException9.addSuppressed((java.lang.Throwable) parseException24);
        int int29 = parseException24.getErrorOffset();
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException34 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException37 = new java.text.ParseException("anglais", (-117));
        parseException34.addSuppressed((java.lang.Throwable) parseException37);
        int int39 = parseException34.getErrorOffset();
        boolean boolean40 = fieldPosition31.equals((java.lang.Object) parseException34);
        java.text.ParseException parseException43 = new java.text.ParseException("", 9);
        parseException34.addSuppressed((java.lang.Throwable) parseException43);
        parseException24.addSuppressed((java.lang.Throwable) parseException43);
        parseException2.addSuppressed((java.lang.Throwable) parseException24);
        java.lang.Throwable[] throwableArray47 = parseException2.getSuppressed();
        java.text.ParseException parseException50 = new java.text.ParseException("java.text.NumberFormat$Field(per mille)", (int) (byte) -1);
        parseException2.addSuppressed((java.lang.Throwable) parseException50);
        int int52 = parseException2.getErrorOffset();
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str4 = numberFormat2.format((-13572L));
        java.lang.String str6 = numberFormat2.format((double) 'u');
        numberFormat2.setMaximumFractionDigits((int) (byte) 116);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u6cd5\u6587" + "'", str1, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-13\240572" + "'", str4, "-13\240572");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "117" + "'", str6, "117");
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((-97));
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("can", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet19);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("en");
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.lang.String str34 = locale32.getScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale32, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList38, filteringMode40);
        java.lang.String[] strArray49 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Collection<java.util.Locale> localeCollection57 = null;
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, localeCollection57, filteringMode58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection57);
        java.util.Locale locale61 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Collection<java.util.Locale> localeCollection66 = null;
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, localeCollection66, filteringMode67);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList60, filteringMode67);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode58.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode67.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList69);
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.negate();
        int int14 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction11.reciprocal();
        int int16 = fraction11.getDenominator();
        int int17 = fraction11.getNumerator();
        int int18 = fraction11.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 117 + "'", int17 == 117);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 117 + "'", int18 == 117);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        java.text.Format.Field field5 = fieldPosition2.getFieldAttribute();
        java.lang.String str6 = field5.toString();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale11.getVariant();
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Locale.setDefault(category9, locale16);
        java.lang.String str20 = locale7.getDisplayCountry(locale16);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale7.getDisplayLanguage(locale22);
        boolean boolean25 = field5.equals((java.lang.Object) locale22);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(field5, (int) (byte) -1);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str6, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u5fb7\u56fd" + "'", str20, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        parsePosition17.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction22 = fractionFormat13.parse("French", parsePosition17);
        boolean boolean23 = field10.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) (short) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        int int28 = numberFormat27.getMinimumFractionDigits();
        numberFormat27.setParseIntegerOnly(false);
        int int31 = numberFormat27.getMaximumIntegerDigits();
        numberFormat27.setMaximumFractionDigits(100);
        numberFormat27.setMaximumIntegerDigits(0);
        boolean boolean36 = field10.equals((java.lang.Object) 0);
        boolean boolean37 = field9.equals((java.lang.Object) field10);
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field10, (-116));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u6cd5\u6587" + "'", str12, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(fraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("deu");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "deu");
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u52a0\u62ff\u5927" + "'", str2, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u52a0\u62ff\u5927" + "'", str4, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        int int24 = numberFormat22.getMinimumFractionDigits();
        int int25 = numberFormat22.getMaximumFractionDigits();
        numberFormat22.setMinimumIntegerDigits((int) (short) 287);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale14.getDisplayScript(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.lang.String str22 = locale21.getDisplayName();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        java.lang.String str24 = locale21.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (United Kingdom)" + "'", str22, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParseException: ", "Korean", "\uc601\uc5b4");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.setDefault(category5, locale7);
        java.lang.String str12 = locale7.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale7.getDisplayVariant(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        numberFormat20.setMaximumIntegerDigits((int) (short) 100);
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        numberFormat28.setMaximumIntegerDigits((int) (short) 100);
        numberFormat28.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        fractionFormat27.setDenominatorFormat(numberFormat28);
        fractionFormat19.setNumeratorFormat(numberFormat28);
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition((java.text.Format.Field) field38, (int) (short) 0);
        java.lang.String str41 = fieldPosition40.toString();
        java.lang.String str42 = fieldPosition40.toString();
        fieldPosition40.setBeginIndex((int) (byte) 10);
        int int45 = fieldPosition40.getEndIndex();
        int int46 = fieldPosition40.getEndIndex();
        fieldPosition40.setEndIndex((int) ' ');
        boolean boolean49 = numberFormat28.equals((java.lang.Object) fieldPosition40);
        java.math.RoundingMode roundingMode50 = numberFormat28.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode50);
        java.text.ParsePosition parsePosition53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number54 = numberFormat4.parse("4 / 1", parsePosition53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str41, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getDisplayScript();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale3.getDisplayCountry(locale6);
        java.util.Locale.setDefault(locale3);
        java.lang.String str9 = locale3.getLanguage();
        java.lang.String str10 = locale0.getDisplayName(locale3);
        java.util.Set<java.lang.String> strSet11 = locale3.getUnicodeLocaleAttributes();
        java.lang.Object obj12 = locale3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "en_GB");
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder4.clearExtensions();
        java.util.Locale.Builder builder15 = builder4.clearExtensions();
        java.util.Locale.Builder builder17 = builder4.removeUnicodeLocaleAttribute("117");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setScript("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.AttributedCharacterIterator$Attribute(input_method_segment) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        numberFormat31.setCurrency(currency35);
        numberFormat28.setCurrency(currency35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits((-1));
        java.util.Currency currency41 = numberFormat38.getCurrency();
        java.lang.String str43 = numberFormat38.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat28, numberFormat38);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        properFractionFormat44.setWholeFormat(numberFormat45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance();
        java.lang.String str51 = numberFormat49.format(100L);
        int int52 = numberFormat49.getMinimumFractionDigits();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.lang.String str58 = numberFormat56.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat49, numberFormat56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency61 = numberFormat60.getCurrency();
        numberFormat45.setCurrency(currency61);
        fractionFormat26.setDenominatorFormat(numberFormat45);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getCurrencyInstance(locale64);
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getInstance();
        java.lang.String str68 = numberFormat66.format(100L);
        int int69 = numberFormat66.getMinimumFractionDigits();
        numberFormat66.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance();
        numberFormat72.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode75 = numberFormat72.getRoundingMode();
        numberFormat66.setRoundingMode(roundingMode75);
        numberFormat65.setRoundingMode(roundingMode75);
        numberFormat45.setRoundingMode(roundingMode75);
        java.lang.Object obj79 = numberFormat45.clone();
        numberFormat45.setMinimumFractionDigits((int) (short) -13572);
        numberFormat45.setMinimumFractionDigits(4095);
        java.lang.Object obj84 = numberFormat45.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat85 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat20, numberFormat45);
        java.util.Locale locale86 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale86);
        java.lang.String str88 = locale86.getISO3Language();
        java.lang.String str89 = locale86.getDisplayScript();
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getInstance(locale86);
        properFractionFormat85.setNumeratorFormat(numberFormat90);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0%" + "'", str43, "0%");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "32" + "'", str58, "32");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "GBP");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "100" + "'", str68, "100");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + roundingMode75 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode75.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(numberFormat90);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(1, (int) (short) -2);
        int int3 = fraction2.getNumerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.Object obj25 = numberFormat24.clone();
        numberFormat24.setMinimumIntegerDigits((int) (byte) 0);
        boolean boolean28 = numberFormat24.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        java.util.Locale locale1 = new java.util.Locale("GB");
        org.junit.Assert.assertEquals(locale1.toString(), "gb");
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getExtension('x');
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u6cd5\u6587" + "'", str1, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.divide(fraction3);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction0.subtract(fraction11);
        int int13 = fraction0.getDenominator();
        byte byte14 = fraction0.byteValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj8 = numberFormat4.parseObject("hi!", parsePosition7);
        java.lang.Number number9 = numberFormat0.parse("10,000%", parsePosition7);
        int int10 = parsePosition7.getErrorIndex();
        int int11 = parsePosition7.getIndex();
        int int12 = parsePosition7.getErrorIndex();
        java.lang.String str13 = parsePosition7.toString();
        parsePosition7.setErrorIndex((int) (short) -117);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str13, "java.text.ParsePosition[index=10,errorIndex=10]");
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u30a4\u30bf\u30ea\u30a2\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayLanguage(locale2);
        java.lang.String str9 = locale2.getDisplayCountry();
        java.util.Locale locale11 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.lang.String str14 = locale2.getDisplayVariant(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale.setDefault(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale17);
        java.math.RoundingMode roundingMode21 = numberFormat20.getRoundingMode();
        numberFormat15.setRoundingMode(roundingMode21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u82f1\u6587" + "'", str7, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u82f1\u570b" + "'", str9, "\u82f1\u570b");
        org.junit.Assert.assertEquals(locale11.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uce90\ub098\ub2e4" + "'", str13, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + roundingMode21 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode21.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        fieldPosition1.setEndIndex(100);
        int int4 = fieldPosition1.getField();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        java.util.Locale locale1 = new java.util.Locale("Franz\366sisch");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder6.setVariant("Canada");
        java.util.Locale locale9 = builder8.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = new java.util.Locale("French");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale12.getDisplayCountry(locale16);
        java.lang.String str18 = locale9.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.Object obj20 = numberFormat19.clone();
        fractionFormat2.setDenominatorFormat(numberFormat19);
        org.junit.Assert.assertEquals(locale1.toString(), "franz\366sisch");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und-Canada" + "'", str10, "und-Canada");
        org.junit.Assert.assertEquals(locale12.toString(), "french");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale.Builder builder36 = builder20.setLanguageTag("en");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder20.setScript("french_FRENCH_French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: french_FRENCH_French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale.Builder builder20 = builder4.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder4.setUnicodeLocaleKeyword("Chinese", "3.200%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale8.getDisplayCountry(locale11);
        java.lang.String str13 = locale2.getDisplayVariant(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        numberFormat15.setMaximumIntegerDigits((int) (short) 100);
        numberFormat15.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        numberFormat23.setMaximumIntegerDigits((int) (short) 100);
        numberFormat23.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        fractionFormat22.setDenominatorFormat(numberFormat23);
        fractionFormat14.setNumeratorFormat(numberFormat23);
        numberFormat23.setGroupingUsed(true);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        java.util.Locale.Builder builder12 = builder1.clearExtensions();
        java.util.Locale.Builder builder14 = builder1.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setVariant("0 (x-lvariant-it-it)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0 (x-lvariant-it-it) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale1.getDisplayName(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.lang.String str21 = locale1.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str17, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(11696.657142857142d, 1);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0.000.011.700%", (double) 14L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=14.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.setVariant("anglais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setExtension('4', "-13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.negate();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getVariant();
        java.util.Locale.setDefault(category21, locale23);
        java.lang.String str28 = locale23.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.lang.String str34 = locale23.getDisplayVariant(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale23);
        java.lang.Object obj37 = numberFormat36.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = fraction18.compareTo((java.lang.Object) numberFormat36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "United Kingdom" + "'", str33, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(obj37);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        int int51 = fraction50.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction54.add(fraction56);
        int int63 = fraction62.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction50.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int73 = fraction72.intValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.subtract(fraction72);
        boolean boolean76 = fraction72.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction72.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction50.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction39.divide(fraction50);
        org.apache.commons.math.fraction.Fraction fraction82 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction39.multiply(fraction82);
        java.lang.Object obj85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = fraction84.compareTo(obj85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-117 / 1" + "'", str55, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-117) + "'", int73 == (-117));
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat6);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        numberFormat17.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean23 = numberFormat22.isGroupingUsed();
        numberFormat22.setParseIntegerOnly(false);
        java.lang.Number number27 = numberFormat22.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat17, numberFormat22);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj30 = numberFormat29.clone();
        java.lang.Object obj31 = numberFormat29.clone();
        boolean boolean32 = numberFormat4.equals((java.lang.Object) numberFormat29);
        boolean boolean33 = numberFormat4.isGroupingUsed();
        numberFormat4.setParseIntegerOnly(false);
        java.lang.Object obj36 = numberFormat4.clone();
        int int37 = numberFormat4.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        int int41 = numberFormat40.getMinimumFractionDigits();
        numberFormat40.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getNumeratorFormat();
        int int47 = numberFormat46.getMinimumFractionDigits();
        java.lang.String str49 = numberFormat46.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        numberFormat55.setMaximumIntegerDigits((-1));
        java.util.Currency currency58 = numberFormat55.getCurrency();
        numberFormat54.setCurrency(currency58);
        numberFormat53.setCurrency(currency58);
        boolean boolean61 = numberFormat53.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat53);
        fractionFormat44.setNumeratorFormat(numberFormat46);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance();
        boolean boolean66 = numberFormat65.isParseIntegerOnly();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance();
        java.lang.String str70 = numberFormat68.format(100L);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj76 = numberFormat72.parseObject("hi!", parsePosition75);
        java.lang.Number number77 = numberFormat68.parse("10,000%", parsePosition75);
        int int78 = parsePosition75.getErrorIndex();
        int int79 = parsePosition75.getIndex();
        int int80 = parsePosition75.getErrorIndex();
        java.lang.Object obj81 = numberFormat65.parseObject("-1 / 1", parsePosition75);
        java.lang.Number number82 = numberFormat46.parse("\uc601\uc5b4\uc601\uad6d)", parsePosition75);
        java.lang.Object obj83 = numberFormat4.parseObject("3,200%", parsePosition75);
        java.lang.String str85 = numberFormat4.format((long) 'u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 0L + "'", number27, 0L);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "100" + "'", str70, "100");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "117" + "'", str85, "117");
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) str8);
        int int10 = fieldPosition2.getEndIndex();
        java.lang.String str11 = fieldPosition2.toString();
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field12, (int) (short) 0);
        java.lang.String str15 = fieldPosition14.toString();
        java.lang.String str16 = fieldPosition14.toString();
        fieldPosition14.setBeginIndex((int) (byte) 10);
        int int19 = fieldPosition14.getBeginIndex();
        fieldPosition14.setEndIndex((int) '#');
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale26, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayLanguage(locale37);
        java.lang.String str39 = locale37.getScript();
        java.lang.String str40 = locale37.getVariant();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale42.getISO3Language();
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getNumberInstance(locale51);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale56.getScript();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = locale60.getVariant();
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale37, locale41, locale42, locale46, locale48, locale51, locale54, locale56, locale60 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayLanguage(locale71);
        java.lang.String str73 = locale71.getScript();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale71, locale74, locale75 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList77, filteringMode79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList65, filteringMode79);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale83.getDisplayName(locale85);
        java.util.Locale.setDefault(locale85);
        java.util.Set<java.lang.String> strSet88 = locale85.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet88);
        boolean boolean90 = fieldPosition14.equals((java.lang.Object) languageRangeList23);
        int int91 = fieldPosition14.getEndIndex();
        java.lang.String str92 = fieldPosition14.toString();
        int int93 = fieldPosition14.getField();
        boolean boolean94 = fieldPosition2.equals((java.lang.Object) fieldPosition14);
        java.lang.String str95 = fieldPosition14.toString();
        java.lang.String str96 = fieldPosition14.toString();
        int int97 = fieldPosition14.getEndIndex();
        java.text.Format.Field field98 = fieldPosition14.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str8, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str11, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str15, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str72, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode79.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "coreano" + "'", str86, "coreano");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]" + "'", str92, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]" + "'", str95, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]" + "'", str96, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
        org.junit.Assert.assertNotNull(field98);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction50 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction43.divide(fraction51);
        double double54 = fraction51.doubleValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        java.util.Locale locale2 = new java.util.Locale("117", "java.text.ParseException: anglais");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "117_JAVA.TEXT.PARSEEXCEPTION: ANGLAIS");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JAVA.TEXT.PARSEEXCEPTION: ANGLAIS" + "'", str3, "JAVA.TEXT.PARSEEXCEPTION: ANGLAIS");
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category0, locale7);
        java.lang.String str11 = locale7.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str13 = locale7.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.NumberFormat numberFormat14 = fractionFormat13.getNumeratorFormat();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        parsePosition17.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction22 = fractionFormat13.parse("French", parsePosition17);
        boolean boolean23 = field10.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) (short) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        int int28 = numberFormat27.getMinimumFractionDigits();
        numberFormat27.setParseIntegerOnly(false);
        int int31 = numberFormat27.getMaximumIntegerDigits();
        numberFormat27.setMaximumFractionDigits(100);
        numberFormat27.setMaximumIntegerDigits(0);
        boolean boolean36 = field10.equals((java.lang.Object) 0);
        boolean boolean37 = field9.equals((java.lang.Object) field10);
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition(field9, 13572);
        java.lang.String str40 = fieldPosition39.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u6cd5\u6587" + "'", str12, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(fraction22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=13572,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=13572,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(6.297736845287277E-7d);
        java.lang.Object obj2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = fraction1.compareTo(obj2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -116, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4\ub300\ub9cc)", "en-CA", "\244 0,00");
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale3.getLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4\ub300\ub9cc)_EN-CA_\244 0,00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str5, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        java.util.Locale locale2 = new java.util.Locale("1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100", "-1 / 1");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        int int4 = numberFormat3.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale2.toString(), "1 / 1_java.text.parseexception: java.text.parseexception: 100_-1 / 1");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.lang.String str15 = numberFormat13.format(100L);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj21 = numberFormat17.parseObject("hi!", parsePosition20);
        java.lang.Number number22 = numberFormat13.parse("10,000%", parsePosition20);
        int int23 = parsePosition20.getErrorIndex();
        parsePosition20.setErrorIndex((int) (short) 10);
        int int26 = parsePosition20.getErrorIndex();
        java.lang.Object obj27 = numberFormat1.parseObject("\u82f1\u6587\u7f8e\u570b)", parsePosition20);
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field28, (int) (short) 0);
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field28);
        int int32 = fieldPosition31.getField();
        boolean boolean33 = parsePosition20.equals((java.lang.Object) fieldPosition31);
        java.lang.String str34 = parsePosition20.toString();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.000%" + "'", str8, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100" + "'", str15, "100");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(number22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str34, "java.text.ParsePosition[index=10,errorIndex=10]");
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getBeginIndex();
        java.lang.String str5 = fieldPosition2.toString();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList16, filteringMode18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale24, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.lang.String str56 = locale54.getScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = locale58.getVariant();
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale35, locale39, locale40, locale44, locale46, locale49, locale52, locale54, locale58 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.lang.String str71 = locale69.getScript();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale69, locale72, locale73 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList63, filteringMode77);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap81);
        java.util.Locale locale83 = java.util.Locale.UK;
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = locale83.getDisplayScript(locale85);
        java.util.Set<java.lang.String> strSet88 = locale85.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList82, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        boolean boolean91 = fieldPosition2.equals((java.lang.Object) filteringMode89);
        int int92 = fieldPosition2.getEndIndex();
        int int93 = fieldPosition2.getField();
        java.text.Format.Field field94 = fieldPosition2.getFieldAttribute();
        java.text.Format.Field field95 = fieldPosition2.getFieldAttribute();
        int int96 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str5, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNull(locale80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(field94);
        org.junit.Assert.assertNotNull(field95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        java.lang.String str28 = numberFormat26.format(100L);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj34 = numberFormat30.parseObject("hi!", parsePosition33);
        java.lang.Number number35 = numberFormat26.parse("10,000%", parsePosition33);
        int int36 = parsePosition33.getErrorIndex();
        java.lang.Object obj37 = properFractionFormat24.parseObject("French", parsePosition33);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat40.setCurrency(currency47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        java.lang.String str55 = numberFormat50.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat40, numberFormat50);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance();
        java.lang.String str60 = numberFormat58.format(100L);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj66 = numberFormat62.parseObject("hi!", parsePosition65);
        java.lang.Number number67 = numberFormat58.parse("10,000%", parsePosition65);
        int int68 = parsePosition65.getErrorIndex();
        java.lang.Object obj69 = properFractionFormat56.parseObject("French", parsePosition65);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale71);
        java.text.NumberFormat numberFormat74 = fractionFormat73.getNumeratorFormat();
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition((int) (short) 10);
        parsePosition77.setErrorIndex((int) (byte) 1);
        parsePosition77.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction82 = fractionFormat73.parse("French", parsePosition77);
        org.apache.commons.math.fraction.Fraction fraction83 = properFractionFormat56.parse("", parsePosition77);
        java.lang.Object obj84 = properFractionFormat24.parseObject("java.text.NumberFormat$Field(currency)", parsePosition77);
        int int85 = parsePosition77.getErrorIndex();
        int int86 = parsePosition77.getIndex();
        int int87 = parsePosition77.getIndex();
        org.apache.commons.math.fraction.Fraction fraction88 = properFractionFormat5.parse("\244 10.00", parsePosition77);
        java.lang.String str89 = parsePosition77.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uce90\ub098\ub2e4" + "'", str1, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(number35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0%" + "'", str55, "0%");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str72, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNull(fraction82);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNull(fraction88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str89, "java.text.ParsePosition[index=10,errorIndex=9]");
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat5, numberFormat11);
        numberFormat5.setMaximumFractionDigits((int) (byte) -3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = properFractionFormat32.getDenominatorFormat();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale7, locale10, locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Locale.LanguageRange languageRange21 = new java.util.Locale.LanguageRange("US");
        java.util.Locale.LanguageRange languageRange23 = new java.util.Locale.LanguageRange("und-Canada");
        double double24 = languageRange23.getWeight();
        double double25 = languageRange23.getWeight();
        java.util.Locale.LanguageRange languageRange27 = new java.util.Locale.LanguageRange("CAN");
        double double28 = languageRange27.getWeight();
        double double29 = languageRange27.getWeight();
        java.util.Locale.LanguageRange languageRange31 = new java.util.Locale.LanguageRange("US");
        java.lang.String str32 = languageRange31.getRange();
        java.util.Locale.LanguageRange languageRange34 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str35 = languageRange34.getRange();
        java.lang.String str36 = languageRange34.getRange();
        double double37 = languageRange34.getWeight();
        java.lang.String str38 = languageRange34.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] { languageRange21, languageRange23, languageRange27, languageRange31, languageRange34 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale46.getScript();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale46, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList52, filteringMode54);
        java.util.Locale.FilteringMode filteringMode56 = null;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList55, filteringMode56);
        java.util.Locale locale58 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList57);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode15.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "us" + "'", str32, "us");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "can" + "'", str35, "can");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "can" + "'", str36, "can");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "can" + "'", str38, "can");
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNull(locale58);
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.getDisplayLanguage();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.lang.String str5 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("java.text.FieldPosition[field=3,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder19 = builder11.setExtension('u', "");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.setLanguageTag("FR");
        java.util.Locale.Builder builder23 = builder19.clear();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        boolean boolean30 = locale26.hasExtensions();
        java.lang.String str31 = locale26.toLanguageTag();
        java.lang.String str32 = locale26.getScript();
        java.lang.String str33 = locale24.getDisplayLanguage(locale26);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = locale36.getVariant();
        java.util.Locale.setDefault(category34, locale36);
        java.util.Locale locale41 = java.util.Locale.getDefault(category34);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Locale.setDefault(category34, locale42);
        java.util.Locale locale44 = java.util.Locale.getDefault(category34);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale46);
        java.util.Locale.setDefault(category34, locale46);
        java.lang.String str50 = locale24.getDisplayLanguage(locale46);
        java.lang.String str51 = locale46.getDisplayVariant();
        java.lang.String str52 = locale46.getDisplayScript();
        java.util.Locale.Builder builder53 = builder23.setLocale(locale46);
        java.lang.String str54 = locale46.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "chinese__#a-canada");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str25, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ko" + "'", str31, "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str33, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category34.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str50, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        java.text.NumberFormat numberFormat78 = properFractionFormat17.getNumeratorFormat();
        int int79 = numberFormat78.getMaximumIntegerDigits();
        int int80 = numberFormat78.getMaximumFractionDigits();
        numberFormat78.setMaximumIntegerDigits(97);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str65, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        boolean boolean8 = numberFormat3.equals((java.lang.Object) throwableArray7);
        boolean boolean9 = attribute0.equals((java.lang.Object) numberFormat3);
        numberFormat3.setParseIntegerOnly(true);
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field12, (int) (short) 0);
        java.lang.String str15 = fieldPosition14.toString();
        java.lang.String str16 = fieldPosition14.toString();
        fieldPosition14.setBeginIndex((int) (byte) 10);
        fieldPosition14.setBeginIndex((int) '4');
        boolean boolean22 = fieldPosition14.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field23 = fieldPosition14.getFieldAttribute();
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 117);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.lang.Class<?> wildcardClass31 = locale28.getClass();
        boolean boolean32 = field23.equals((java.lang.Object) wildcardClass31);
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field34, (int) (short) 0);
        int int37 = fieldPosition36.getEndIndex();
        fieldPosition36.setBeginIndex((int) ' ');
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("14");
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.String str43 = locale41.getDisplayLanguage();
        boolean boolean44 = fieldPosition36.equals((java.lang.Object) str43);
        java.lang.String str45 = fieldPosition36.toString();
        int int46 = fieldPosition36.getEndIndex();
        int int47 = fieldPosition36.getField();
        java.lang.String str48 = fieldPosition36.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer49 = numberFormat3.format((java.lang.Object) boolean32, stringBuffer33, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str15, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]" + "'", str45, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]" + "'", str48, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=0]");
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale2);
        fractionFormat0.setNumeratorFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance();
        java.lang.String str8 = numberFormat6.format(100L);
        int int9 = numberFormat6.getMinimumFractionDigits();
        numberFormat6.setMaximumIntegerDigits(1);
        java.math.RoundingMode roundingMode12 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        numberFormat15.setMaximumIntegerDigits((int) (short) 100);
        numberFormat15.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.text.NumberFormat numberFormat23 = fractionFormat22.getDenominatorFormat();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj29 = numberFormat25.parseObject("hi!", parsePosition28);
        java.lang.Object obj30 = fractionFormat22.parseObject("\u97d3\u6587\u6cd5\u6587)", parsePosition28);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        java.lang.Object obj35 = numberFormat34.clone();
        boolean boolean36 = parsePosition28.equals((java.lang.Object) numberFormat34);
        java.lang.Object obj37 = numberFormat4.parseObject("\u30a4\u30bf\u30ea\u30a2\u8a9e", parsePosition28);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str3, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((-0.4444444444444444d));
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayName(locale5);
        java.lang.String str9 = locale0.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        boolean boolean18 = numberFormat11.equals((java.lang.Object) "");
        numberFormat11.setMinimumFractionDigits((int) (byte) 116);
        fractionFormat10.setNumeratorFormat(numberFormat11);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 0, (int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) (short) 0);
        java.lang.String str30 = fieldPosition29.toString();
        java.lang.String str31 = fieldPosition29.toString();
        fieldPosition29.setBeginIndex((int) (byte) 10);
        int int34 = fieldPosition29.getBeginIndex();
        int int35 = fieldPosition29.getField();
        fieldPosition29.setEndIndex((int) (byte) 0);
        fieldPosition29.setBeginIndex(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer40 = fractionFormat10.format(fraction24, stringBuffer26, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "coreano" + "'", str6, "coreano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str7, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str31, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale2.getScript();
        java.util.Locale locale7 = locale2.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale2.getUnicodeLocaleType("x-lvariant-it-IT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: x-lvariant-it-IT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition((int) (short) 10);
        parsePosition4.setErrorIndex((int) (byte) 1);
        java.lang.Object obj7 = fractionFormat1.parseObject("United Kingdom", parsePosition4);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        numberFormat12.setCurrency(currency16);
        numberFormat11.setCurrency(currency16);
        fractionFormat1.setNumeratorFormat(numberFormat11);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 10);
        parsePosition22.setErrorIndex((int) ' ');
        parsePosition22.setIndex((int) (short) 100);
        parsePosition22.setErrorIndex((int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction29 = fractionFormat1.parse("und-Canada", parsePosition22);
        parsePosition22.setErrorIndex(13689);
        int int32 = parsePosition22.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNull(fraction29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13689 + "'", int32 == 13689);
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        double double10 = fraction9.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        int int23 = fraction22.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int31 = fraction30.intValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction22.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.abs();
        java.lang.String str36 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str40 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction39.add(fraction41);
        int int48 = fraction47.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.multiply(fraction51);
        int int53 = fraction47.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction56 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction47.add(fraction56);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction33.multiply(fraction47);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction11.multiply(fraction47);
        double double60 = fraction11.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-117) + "'", int31 == (-117));
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0 / 1" + "'", str36, "0 / 1");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-117 / 1" + "'", str40, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-117) + "'", int53 == (-117));
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat6.setCurrency(currency11);
        java.math.RoundingMode roundingMode14 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode14);
        int int16 = numberFormat4.getMaximumIntegerDigits();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        properFractionFormat34.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance();
        java.lang.String str41 = numberFormat39.format(100L);
        int int42 = numberFormat39.getMinimumFractionDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        java.lang.String str48 = numberFormat46.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat39, numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getNumeratorFormat();
        boolean boolean53 = numberFormat52.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "32" + "'", str48, "32");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        java.util.Locale locale2 = new java.util.Locale("java.text.NumberFormat$Field(percent)", "zh");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        java.lang.String str8 = locale4.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str10 = locale2.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.numberformat$field(percent)_ZH");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.numberformat$field(percent)" + "'", str10, "java.text.numberformat$field(percent)");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        numberFormat4.setGroupingUsed(true);
        numberFormat4.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        int int14 = numberFormat9.getMinimumIntegerDigits();
        int int15 = numberFormat9.getMaximumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.lang.String str24 = numberFormat19.format((double) 10);
        boolean boolean26 = numberFormat19.equals((java.lang.Object) "");
        fractionFormat18.setNumeratorFormat(numberFormat19);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj33 = numberFormat29.parseObject("hi!", parsePosition32);
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat18.parse("100", parsePosition32);
        java.lang.Number number35 = numberFormat9.parse("coreano", parsePosition32);
        java.text.NumberFormat numberFormat36 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat36);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        boolean boolean44 = numberFormat38.equals((java.lang.Object) locale42);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj48 = numberFormat38.parseObject("China", parsePosition47);
        numberFormat38.setMinimumIntegerDigits((int) (short) 117);
        numberFormat38.setGroupingUsed(false);
        properFractionFormat37.setDenominatorFormat(numberFormat38);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMaximumIntegerDigits((-1));
        java.util.Currency currency59 = numberFormat56.getCurrency();
        java.lang.String str61 = numberFormat56.format((double) 10);
        boolean boolean63 = numberFormat56.equals((java.lang.Object) "");
        fractionFormat55.setNumeratorFormat(numberFormat56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        properFractionFormat37.setWholeFormat(numberFormat56);
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.FieldPosition fieldPosition69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer70 = numberFormat56.format((double) 14.0f, stringBuffer68, fieldPosition69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertNull(number35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0%" + "'", str61, "0%");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.lang.String str7 = locale6.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        java.lang.String str11 = numberFormat9.format((double) 14L);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        int int14 = numberFormat13.getMinimumFractionDigits();
        numberFormat13.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat9, numberFormat13);
        numberFormat9.setParseIntegerOnly(true);
        java.lang.Object obj21 = null;
        boolean boolean22 = numberFormat9.equals(obj21);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str7, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "14" + "'", str11, "14");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale0);
        java.lang.String str6 = locale0.getLanguage();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.text.NumberFormat numberFormat12 = fractionFormat11.getNumeratorFormat();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        parsePosition15.setErrorIndex((int) (byte) 1);
        parsePosition15.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat11.parse("French", parsePosition15);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        numberFormat25.setCurrency(currency29);
        numberFormat22.setCurrency(currency29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat22, numberFormat32);
        fractionFormat11.setDenominatorFormat(numberFormat32);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        numberFormat41.setMaximumIntegerDigits((int) (short) 100);
        numberFormat41.setMinimumFractionDigits((int) (short) 0);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) -1);
        java.lang.Number number51 = numberFormat41.parse("1 / 1", parsePosition50);
        java.lang.String str52 = parsePosition50.toString();
        java.lang.Object obj53 = numberFormat32.parseObject("2\240147\240483\240647,00 \244", parsePosition50);
        java.lang.Number number54 = numberFormat7.parse("French (France)", parsePosition50);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "United Kingdom" + "'", str4, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNull(number51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str52, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(number54);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.util.Locale locale17 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.Object obj19 = numberFormat18.clone();
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.text.NumberFormat numberFormat26 = fractionFormat25.getNumeratorFormat();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        parsePosition29.setErrorIndex((int) (byte) 1);
        parsePosition29.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction34 = fractionFormat25.parse("French", parsePosition29);
        boolean boolean35 = field22.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer39 = numberFormat18.format((double) 'x', stringBuffer21, fieldPosition38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French" + "'", str24, "French");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        java.lang.String str11 = numberFormat4.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat14.parse("fran\347ais", parsePosition17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        boolean boolean26 = parsePosition17.equals((java.lang.Object) fractionFormat25);
        java.lang.Object obj27 = numberFormat1.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance();
        java.lang.String str32 = numberFormat30.format(100L);
        int int33 = numberFormat30.getMinimumFractionDigits();
        numberFormat30.setMaximumIntegerDigits(1);
        boolean boolean37 = numberFormat30.equals((java.lang.Object) (-117));
        java.lang.String str39 = numberFormat30.format((double) (-1));
        fractionFormat29.setDenominatorFormat(numberFormat30);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        java.lang.String str46 = numberFormat41.format((double) 10);
        boolean boolean48 = numberFormat41.equals((java.lang.Object) "");
        java.util.Currency currency49 = numberFormat41.getCurrency();
        boolean boolean50 = numberFormat30.equals((java.lang.Object) currency49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj54 = numberFormat30.parseObject("zh_CN", parsePosition53);
        java.lang.Number number55 = numberFormat1.parse("-0%", parsePosition53);
        numberFormat1.setParseIntegerOnly(false);
        int int58 = numberFormat1.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10,000%" + "'", str11, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0%" + "'", str46, "0%");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 0L + "'", number55, 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        java.lang.String str60 = numberFormat24.format((double) (-117L));
        java.util.Locale locale64 = new java.util.Locale("java.text.ParseException: ", "Korean", "\uc601\uc5b4");
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        boolean boolean66 = numberFormat24.equals((java.lang.Object) numberFormat65);
        java.math.RoundingMode roundingMode67 = null;
        // The following exception was thrown during execution in test generation
        try {
            numberFormat65.setRoundingMode(roundingMode67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "GBP");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-117" + "'", str60, "-117");
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        java.text.ParseException parseException2 = new java.text.ParseException("", 10);
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int6 = parseException5.getErrorOffset();
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.text.ParseException parseException10 = new java.text.ParseException("anglais", (-117));
        java.text.ParseException parseException13 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray14 = parseException13.getSuppressed();
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field15, (int) (short) 0);
        int int18 = fieldPosition17.getEndIndex();
        java.text.ParseException parseException21 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray22 = parseException21.getSuppressed();
        int int23 = parseException21.getErrorOffset();
        boolean boolean24 = fieldPosition17.equals((java.lang.Object) parseException21);
        java.text.ParseException parseException27 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int28 = parseException27.getErrorOffset();
        parseException21.addSuppressed((java.lang.Throwable) parseException27);
        parseException13.addSuppressed((java.lang.Throwable) parseException21);
        parseException10.addSuppressed((java.lang.Throwable) parseException13);
        parseException5.addSuppressed((java.lang.Throwable) parseException13);
        int int33 = parseException13.getErrorOffset();
        int int34 = parseException13.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.setVariant("");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = builder10.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = fractionFormat6.format((java.lang.Object) fractionFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale10.getDisplayVariant(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str23 = locale6.getDisplayName(locale10);
        java.lang.String str24 = locale6.getISO3Country();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getVariant();
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale32 = java.util.Locale.getDefault(category25);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.util.Locale.setDefault(category25, locale33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale33);
        java.lang.String str37 = locale6.getDisplayScript(locale33);
        java.lang.String str38 = locale33.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fractionFormat22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str23, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DEU" + "'", str24, "DEU");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(100, 9);
        int int3 = fraction2.getNumerator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str4 = field0.toString();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale5.getDisplayVariant(locale11);
        boolean boolean13 = field0.equals((java.lang.Object) locale5);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str4, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 3200L, 96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 3,200 to fraction (-3,199/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.lang.Object obj4 = numberFormat3.clone();
        numberFormat3.setParseIntegerOnly(true);
        numberFormat3.setMaximumIntegerDigits(13455);
        numberFormat3.setMinimumIntegerDigits((-4096));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]", (int) (short) -13572);
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]" + "'", str3, "java.text.ParseException: java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: 100", "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.lang.Object obj4 = numberFormat3.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: 100_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        int int7 = numberFormat6.getMinimumIntegerDigits();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number9 = numberFormat6.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        java.util.Locale locale2 = new java.util.Locale("-0 %", "");
        java.lang.String str3 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "-0 %");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-0 %" + "'", str3, "-0 %");
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("-0", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        int int23 = fraction22.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction10.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction10.reciprocal();
        double double30 = fraction10.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction(13455, 9);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction10.subtract(fraction33);
        byte byte35 = fraction33.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-117.0d) + "'", double30 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) -41 + "'", byte35 == (byte) -41);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getVariant();
        java.util.Locale.setDefault(category4, locale6);
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale6.getDisplayVariant(locale12);
        java.lang.String str18 = locale0.getDisplayName(locale12);
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = locale0.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getDisplayLanguage();
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale19.getDisplayScript();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4" + "'", str21, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "US" + "'", str22, "US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        float float14 = fraction8.floatValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction4.multiply(fraction8);
        long long16 = fraction15.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction2.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction2.negate();
        double double19 = fraction18.doubleValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + (-117.0f) + "'", float14 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-52.0d) + "'", double19 == (-52.0d));
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.util.Currency currency33 = numberFormat22.getCurrency();
        java.math.RoundingMode roundingMode34 = numberFormat22.getRoundingMode();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(currency33);
// flaky:         org.junit.Assert.assertEquals(currency33.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode34.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(2147483647);
        java.lang.Object obj14 = numberFormat2.parseObject("\uc601\uad6d", parsePosition13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.lang.String[] strArray46 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList47);
        boolean boolean50 = numberFormat15.equals((java.lang.Object) strList47);
        numberFormat15.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat54 = fractionFormat53.getNumeratorFormat();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMaximumIntegerDigits((-1));
        java.util.Currency currency59 = numberFormat56.getCurrency();
        numberFormat55.setCurrency(currency59);
        numberFormat54.setCurrency(currency59);
        java.math.RoundingMode roundingMode62 = numberFormat54.getRoundingMode();
        numberFormat15.setRoundingMode(roundingMode62);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getIntegerInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat15, numberFormat66);
        java.math.RoundingMode roundingMode68 = numberFormat15.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
// flaky:         org.junit.Assert.assertEquals(currency22.toString(), "CAD");
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency59);
// flaky:         org.junit.Assert.assertEquals(currency59.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + roundingMode62 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode62.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + roundingMode68 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode68.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.negate();
        int int14 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction18 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction11.divide(fraction22);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.Object obj3 = numberFormat1.parseObject("10.000%");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        java.lang.String str21 = numberFormat16.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat6, numberFormat16);
        int int23 = numberFormat5.getMinimumIntegerDigits();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        parsePosition26.setErrorIndex((int) ' ');
        parsePosition26.setIndex((int) (short) 100);
        java.lang.Number number31 = numberFormat5.parse("fra", parsePosition26);
        java.lang.Number number32 = numberFormat1.parse("java.text.AttributedCharacterIterator$Attribute(input_method_segment)", parsePosition26);
        numberFormat1.setMaximumFractionDigits((-32));
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.EXPONENT_SYMBOL;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getDisplayVariant();
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale38.getDisplayScript(locale40);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        boolean boolean45 = field37.equals((java.lang.Object) strSet44);
        boolean boolean47 = field37.equals((java.lang.Object) "\244 117.00");
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition((java.text.Format.Field) field37, (int) (short) -13572);
        java.text.Format.Field field50 = fieldPosition49.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = numberFormat1.format((double) (-0.7241379f), stringBuffer36, fieldPosition49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.1d + "'", obj3, 0.1d);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
// flaky:         org.junit.Assert.assertEquals(currency13.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
// flaky:         org.junit.Assert.assertEquals(currency19.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0%" + "'", str21, "0%");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(field50);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        java.util.Currency currency11 = numberFormat3.getCurrency();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        numberFormat13.setCurrency(currency17);
        java.lang.String str20 = numberFormat13.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat13, numberFormat22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getNumeratorFormat();
        java.text.NumberFormat numberFormat26 = fractionFormat24.getNumeratorFormat();
        java.text.ParseException parseException29 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray30 = parseException29.getSuppressed();
        boolean boolean31 = numberFormat26.equals((java.lang.Object) throwableArray30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        java.text.NumberFormat numberFormat34 = fractionFormat32.getNumeratorFormat();
        java.text.ParseException parseException37 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray38 = parseException37.getSuppressed();
        boolean boolean39 = numberFormat34.equals((java.lang.Object) throwableArray38);
        numberFormat34.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat26, numberFormat43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        numberFormat45.setMaximumIntegerDigits((int) (short) 100);
        numberFormat45.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45);
        java.math.RoundingMode roundingMode53 = numberFormat45.getRoundingMode();
        numberFormat45.setGroupingUsed(true);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance();
        java.lang.String str58 = numberFormat56.format(100L);
        int int59 = numberFormat56.getMinimumFractionDigits();
        numberFormat56.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        numberFormat62.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode65 = numberFormat62.getRoundingMode();
        numberFormat56.setRoundingMode(roundingMode65);
        numberFormat45.setRoundingMode(roundingMode65);
        properFractionFormat44.setDenominatorFormat(numberFormat45);
        boolean boolean69 = numberFormat3.equals((java.lang.Object) numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.Fraction fraction73 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, 120);
        java.lang.StringBuffer stringBuffer74 = null;
        java.text.FieldPosition fieldPosition75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = properFractionFormat70.format(fraction73, stringBuffer74, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(currency11);
// flaky:         org.junit.Assert.assertEquals(currency11.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
// flaky:         org.junit.Assert.assertEquals(currency17.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10,000%" + "'", str20, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) 4369, 96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 4,369 to fraction (9,223,372,036,854,771,440/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = properFractionFormat32.getNumeratorFormat();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat74.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat74);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getNumberInstance(locale79);
        java.util.Set<java.lang.String> strSet82 = locale79.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale79);
        java.lang.String str84 = locale79.getISO3Country();
        java.util.Set<java.lang.Character> charSet85 = locale79.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = properFractionFormat32.format((java.lang.Object) charSet85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
// flaky:         org.junit.Assert.assertEquals(currency42.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
// flaky:         org.junit.Assert.assertEquals(currency48.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
// flaky:         org.junit.Assert.assertEquals(currency71.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(charSet85);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long3 = fraction2.longValue();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance();
        java.lang.String str8 = numberFormat6.format(100L);
        int int9 = numberFormat6.getMinimumFractionDigits();
        numberFormat6.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode15 = numberFormat12.getRoundingMode();
        numberFormat6.setRoundingMode(roundingMode15);
        numberFormat5.setRoundingMode(roundingMode15);
        boolean boolean18 = numberFormat5.isParseIntegerOnly();
        boolean boolean19 = fraction2.equals((java.lang.Object) numberFormat5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.lang.String str26 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.lang.String str32 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale28.getDisplayLanguage(locale33);
        java.lang.String str35 = locale22.getDisplayName(locale33);
        java.lang.String str36 = locale22.getDisplayCountry();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getIntegerInstance(locale22);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat20.setDenominatorFormat(numberFormat37);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setVariant("");
        java.util.Locale.Builder builder44 = builder43.clear();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        boolean boolean49 = locale45.hasExtensions();
        java.util.Locale.Builder builder50 = builder43.setLocale(locale45);
        java.util.Locale.Builder builder53 = builder43.setExtension('u', "FR");
        java.util.Locale.Builder builder54 = builder53.clear();
        java.util.Locale.Builder builder55 = builder54.clearExtensions();
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) (short) 0);
        java.lang.String str60 = fieldPosition59.toString();
        java.lang.String str61 = fieldPosition59.toString();
        fieldPosition59.setBeginIndex((int) (byte) 10);
        fieldPosition59.setBeginIndex((int) '4');
        int int66 = fieldPosition59.getBeginIndex();
        java.text.Format.Field field67 = fieldPosition59.getFieldAttribute();
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition(field67, 3);
        fieldPosition69.setBeginIndex((int) 'u');
        int int72 = fieldPosition69.getEndIndex();
        java.lang.String str73 = fieldPosition69.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = numberFormat37.format((java.lang.Object) builder54, stringBuffer56, fieldPosition69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u671d\u9c9c\u6587" + "'", str34, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u671d\u9c9c\u6587" + "'", str35, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str61, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(field67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.FieldPosition[field=3,attribute=java.text.NumberFormat$Field(per mille),beginIndex=117,endIndex=0]" + "'", str73, "java.text.FieldPosition[field=3,attribute=java.text.NumberFormat$Field(per mille),beginIndex=117,endIndex=0]");
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder23 = builder2.setExtension('a', "Canada");
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (short) 0);
        int int11 = fieldPosition10.getEndIndex();
        java.text.ParseException parseException14 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray15 = parseException14.getSuppressed();
        int int16 = parseException14.getErrorOffset();
        boolean boolean17 = fieldPosition10.equals((java.lang.Object) parseException14);
        java.text.ParseException parseException20 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int21 = parseException20.getErrorOffset();
        parseException14.addSuppressed((java.lang.Throwable) parseException20);
        parseException6.addSuppressed((java.lang.Throwable) parseException14);
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (short) 0);
        int int27 = fieldPosition26.getEndIndex();
        java.text.ParseException parseException30 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray31 = parseException30.getSuppressed();
        int int32 = parseException30.getErrorOffset();
        boolean boolean33 = fieldPosition26.equals((java.lang.Object) parseException30);
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        parseException30.addSuppressed((java.lang.Throwable) parseException36);
        java.lang.Throwable[] throwableArray39 = parseException36.getSuppressed();
        parseException6.addSuppressed((java.lang.Throwable) parseException36);
        parseException2.addSuppressed((java.lang.Throwable) parseException6);
        java.lang.String str42 = parseException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str42, "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setLanguageTag("Kanada");
        java.util.Locale locale7 = builder6.build();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale7.getDisplayName(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale7);
        java.lang.String str16 = locale7.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "kanada");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kanada" + "'", str14, "kanada");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        int int23 = fraction22.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction10.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int40 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction34.add(fraction36);
        int int43 = fraction42.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.multiply(fraction46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance();
        boolean boolean49 = numberFormat48.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat48);
        boolean boolean51 = numberFormat48.isParseIntegerOnly();
        boolean boolean52 = fraction46.equals((java.lang.Object) boolean51);
        int int53 = fraction46.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction31.add(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction10.multiply(fraction55);
        int int58 = fraction57.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-117 / 1" + "'", str35, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-117) + "'", int40 == (-117));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        int int5 = fieldPosition2.getField();
        int int6 = fieldPosition2.getEndIndex();
        java.text.Format.Field field7 = fieldPosition2.getFieldAttribute();
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj15 = numberFormat11.parseObject("hi!", parsePosition14);
        java.lang.Object obj16 = numberFormat9.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition14);
        java.lang.String str18 = numberFormat9.format((double) 'x');
        numberFormat9.setMinimumIntegerDigits(1);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (byte) -1);
        java.lang.String str24 = parsePosition23.toString();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder28 = builder25.setVariant("");
        java.util.Locale.Builder builder29 = builder25.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.setLanguageTag("anglais");
        java.util.Locale locale32 = builder31.build();
        java.util.Locale.Builder builder33 = builder31.clearExtensions();
        boolean boolean34 = parsePosition23.equals((java.lang.Object) builder33);
        java.lang.Object obj35 = numberFormat9.parseObject("10", parsePosition23);
        boolean boolean36 = field7.equals((java.lang.Object) parsePosition23);
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition(field7, 387);
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition(field7, 20);
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition(field7);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "120" + "'", str18, "120");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str24, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str3 = numberFormat1.format((long) (byte) 10);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.util.Currency currency9 = numberFormat6.getCurrency();
        java.lang.String str11 = numberFormat6.format((double) 10);
        boolean boolean13 = numberFormat6.equals((java.lang.Object) "");
        fractionFormat5.setNumeratorFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        numberFormat18.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat18);
        int int22 = numberFormat6.getMinimumIntegerDigits();
        boolean boolean24 = numberFormat6.equals((java.lang.Object) "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        numberFormat25.setMaximumIntegerDigits((int) (short) 100);
        numberFormat25.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(2);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("", parsePosition37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str50 = locale45.getDisplayCountry(locale46);
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale46.getDisplayLanguage(locale51);
        java.lang.String str53 = locale40.getDisplayName(locale51);
        java.lang.String str54 = locale40.getDisplayCountry();
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale40.getDisplayName(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str60 = locale40.getDisplayName();
        java.lang.String str61 = locale40.getLanguage();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale40);
        properFractionFormat34.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat34.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getPercentInstance();
        numberFormat71.setMaximumIntegerDigits((-1));
        java.util.Currency currency74 = numberFormat71.getCurrency();
        numberFormat70.setCurrency(currency74);
        java.lang.String str77 = numberFormat70.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat79 = fractionFormat78.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69, numberFormat70, numberFormat79);
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) (short) 10);
        parsePosition83.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat80.parse("fran\347ais", parsePosition83);
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance();
        numberFormat87.setMaximumIntegerDigits((-1));
        java.util.Currency currency90 = numberFormat87.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = new org.apache.commons.math.fraction.FractionFormat(numberFormat87);
        boolean boolean92 = parsePosition83.equals((java.lang.Object) fractionFormat91);
        java.lang.Object obj93 = numberFormat67.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition83);
        java.lang.String str94 = parsePosition83.toString();
        org.apache.commons.math.fraction.Fraction fraction95 = properFractionFormat34.parse("java.text.parseposition[index=10,errorindex=10]", parsePosition83);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
// flaky:         org.junit.Assert.assertEquals(currency9.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0%" + "'", str11, "0%");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u671d\u9c9c\u6587" + "'", str52, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u671d\u9c9c\u6587" + "'", str53, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str56, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ko" + "'", str61, "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(currency74);
// flaky:         org.junit.Assert.assertEquals(currency74.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "10,000%" + "'", str77, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(currency90);
// flaky:         org.junit.Assert.assertEquals(currency90.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str94, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction95);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.lang.String str6 = locale2.getScript();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinese" + "'", str3, "chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "French (France)" + "'", str4, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.lang.String str9 = locale2.getDisplayName();
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale2.getDisplayScript(locale10);
        java.util.Set<java.lang.String> strSet12 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale2.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean9 = locale2.hasExtensions();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category10);
        java.util.Locale locale18 = java.util.Locale.getDefault(category10);
        java.util.Locale locale19 = java.util.Locale.getDefault(category10);
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale2.getDisplayName(locale19);
        java.lang.String str22 = locale2.getDisplayScript();
        java.lang.String str23 = locale2.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean86 = parsePosition10.equals((java.lang.Object) languageRangeList12);
        java.lang.Object obj87 = numberFormat7.parseObject("kor", parsePosition10);
        parsePosition10.setErrorIndex((int) (byte) 10);
        parsePosition10.setErrorIndex((int) 'x');
        parsePosition10.setErrorIndex((-13572));
        int int94 = parsePosition10.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-13572) + "'", int94 == (-13572));
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = locale13.stripExtensions();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.lang.String str31 = locale26.getDisplayCountry(locale27);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale27.getDisplayLanguage(locale32);
        java.lang.String str34 = locale21.getDisplayName(locale32);
        java.lang.String str35 = locale21.getDisplayCountry();
        java.lang.String str36 = locale17.getDisplayVariant(locale21);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayCountry();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = locale37.getDisplayLanguage(locale42);
        java.lang.String str44 = locale21.getDisplayVariant(locale42);
        java.util.Locale locale46 = new java.util.Locale("Korean (South Korea)");
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale42.getDisplayName(locale46);
        java.util.Locale.setDefault(category0, locale42);
        java.util.Locale locale50 = java.util.Locale.getDefault(category0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale50.toLanguageTag();
        java.lang.String str54 = locale50.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u671d\u9c9c\u6587" + "'", str33, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u671d\u9c9c\u6587" + "'", str34, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u97d3\u6587" + "'", str43, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale46.toString(), "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "korean (south korea)" + "'", str47, "korean (south korea)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (Taiwan)" + "'", str48, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u53f0\u7063" + "'", str52, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh-TW" + "'", str53, "zh-TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        boolean boolean9 = fraction5.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.reciprocal();
        float float11 = fraction5.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction1.multiply(fraction5);
        long long13 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction((int) '#', 100);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.add(fraction16);
        java.lang.Object obj18 = null;
        boolean boolean19 = fraction16.equals(obj18);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-117.0f) + "'", float11 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        int int2 = numberFormat1.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale7);
        java.lang.Object obj11 = numberFormat10.clone();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.ParseException: cor\351en", parsePosition14);
        parsePosition14.setIndex(9);
        java.lang.Object obj18 = properFractionFormat3.parseObject("Allemagne", parsePosition14);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        numberFormat20.setMaximumIntegerDigits((int) (short) 100);
        numberFormat20.setMinimumFractionDigits((int) (short) 0);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) -1);
        java.lang.Number number30 = numberFormat20.parse("1 / 1", parsePosition29);
        int int31 = parsePosition29.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat3.parse("English", parsePosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        int int5 = fieldPosition2.getEndIndex();
        int int6 = fieldPosition2.getEndIndex();
        fieldPosition2.setEndIndex((int) 'x');
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", 0.0d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj33 = numberFormat29.parseObject("hi!", parsePosition32);
        java.lang.Number number34 = numberFormat25.parse("10,000%", parsePosition32);
        int int35 = parsePosition32.getErrorIndex();
        java.lang.Object obj36 = properFractionFormat23.parseObject("French", parsePosition32);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.text.NumberFormat numberFormat41 = fractionFormat40.getNumeratorFormat();
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 10);
        parsePosition44.setErrorIndex((int) (byte) 1);
        parsePosition44.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction49 = fractionFormat40.parse("French", parsePosition44);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat23.parse("", parsePosition44);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale52);
        java.lang.Object obj55 = numberFormat54.clone();
        properFractionFormat23.setWholeFormat(numberFormat54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale58.getISO3Language();
        java.lang.String str62 = locale57.getDisplayCountry(locale58);
        java.lang.String str63 = locale58.toLanguageTag();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale58);
        boolean boolean65 = numberFormat64.isParseIntegerOnly();
        properFractionFormat23.setDenominatorFormat(numberFormat64);
        boolean boolean67 = numberFormat64.isParseIntegerOnly();
        boolean boolean68 = languageRange2.equals((java.lang.Object) numberFormat64);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "usa" + "'", str4, "usa");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u6cd5\u6587" + "'", str39, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale7, locale10, locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        java.lang.String[] strArray24 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale34.getScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale34, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList40, filteringMode42);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList29, (java.util.Collection<java.util.Locale>) localeList43, filteringMode44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale50.getScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.lang.String[] strArray67 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList68);
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList29, (java.util.Collection<java.lang.String>) strList70);
        java.lang.String str72 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList70);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode15.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode42.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder24.setLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder24.setExtension('x', "\uc601\uc5b4\uc601\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 100);
        java.text.Format.Field field12 = fieldPosition11.getFieldAttribute();
        java.lang.String str13 = field12.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str13, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.Object obj25 = numberFormat24.clone();
        int int26 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.lang.String str31 = locale27.getDisplayCountry();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale27);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMinimumIntegerDigits((int) (short) 10);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        java.lang.String str43 = numberFormat36.format((double) 100);
        java.math.RoundingMode roundingMode44 = numberFormat36.getRoundingMode();
        numberFormat33.setRoundingMode(roundingMode44);
        numberFormat32.setRoundingMode(roundingMode44);
        int int47 = numberFormat32.getMinimumFractionDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.lang.String str53 = locale48.getDisplayCountry(locale49);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale55.getISO3Language();
        java.lang.String str59 = locale54.getDisplayCountry(locale55);
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale55.getDisplayLanguage(locale60);
        java.lang.String str62 = locale49.getDisplayName(locale60);
        java.lang.String str63 = locale49.getDisplayCountry();
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale49);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getNumberInstance(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat65);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits((-1));
        java.util.Currency currency70 = numberFormat67.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits((int) (short) -117);
        int int74 = numberFormat67.getMinimumFractionDigits();
        numberFormat67.setMaximumFractionDigits((int) (short) 116);
        fractionFormat66.setNumeratorFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10,000%" + "'", str43, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u671d\u9c9c\u6587" + "'", str61, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u671d\u9c9c\u6587" + "'", str62, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(currency70);
// flaky:         org.junit.Assert.assertEquals(currency70.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 97, (int) (byte) 10);
        org.apache.commons.math.fraction.Fraction fraction4 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction18.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        boolean boolean32 = parsePosition7.equals((java.lang.Object) fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction5.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int38 = fraction37.getDenominator();
        float float39 = fraction37.floatValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.multiply(fraction37);
        int int41 = fraction31.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction31.abs();
        int int43 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str47 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction46.add(fraction48);
        int int55 = fraction54.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        int int67 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction70 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction66.multiply(fraction70);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction54.subtract(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '#', (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction72.multiply(fraction75);
        java.lang.String str77 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction76);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction42.add(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction2.subtract(fraction42);
        int int80 = fraction79.intValue();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction79.abs();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + (-1.0f) + "'", float39 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-117 / 1" + "'", str47, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-4,212 / 97" + "'", str77, "-4,212 / 97");
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(fraction81);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale3 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setVariant("");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale3.getDisplayLanguage(locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str16 = locale3.getDisplayLanguage(locale15);
        java.lang.String str17 = locale0.getDisplayScript(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale3.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uce90\ub098\ub2e4" + "'", str13, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("French");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setVariant("");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        boolean boolean21 = locale17.hasExtensions();
        java.util.Locale.Builder builder22 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("Chinese");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale.setDefault(category28, locale30);
        java.util.Locale locale35 = java.util.Locale.getDefault(category28);
        java.util.Locale locale36 = java.util.Locale.getDefault(category28);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale40 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder42 = builder27.setLocale(locale36);
        boolean boolean43 = locale36.hasExtensions();
        java.util.Locale.setDefault(category0, locale36);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder45.setVariant("");
        java.util.Locale.Builder builder49 = builder45.clearExtensions();
        java.util.Locale.Builder builder51 = builder49.setLanguageTag("anglais");
        java.util.Locale locale52 = builder51.build();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder55 = builder53.setLanguageTag("Deutsch");
        java.util.Locale locale56 = builder55.build();
        java.util.Locale.setDefault(category0, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category0);
        java.util.Locale locale59 = java.util.Locale.UK;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale59.getDisplayScript(locale61);
        java.util.Locale.setDefault(category0, locale61);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale40.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Korean" + "'", str41, "Korean");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "deutsch");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "deutsch");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.setVariant("\u97d3\u6587\u6cd5\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long3 = fraction2.longValue();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance();
        java.lang.String str8 = numberFormat6.format(100L);
        int int9 = numberFormat6.getMinimumFractionDigits();
        numberFormat6.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode15 = numberFormat12.getRoundingMode();
        numberFormat6.setRoundingMode(roundingMode15);
        numberFormat5.setRoundingMode(roundingMode15);
        boolean boolean18 = numberFormat5.isParseIntegerOnly();
        boolean boolean19 = fraction2.equals((java.lang.Object) numberFormat5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat21 = properFractionFormat20.getWholeFormat();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        int int27 = numberFormat24.getMinimumFractionDigits();
        numberFormat24.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode33 = numberFormat30.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode33);
        numberFormat23.setRoundingMode(roundingMode33);
        boolean boolean36 = numberFormat23.isParseIntegerOnly();
        properFractionFormat20.setNumeratorFormat(numberFormat23);
        numberFormat23.setMinimumIntegerDigits(2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        int int9 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field10 = fieldPosition2.getFieldAttribute();
        java.lang.String str11 = field10.toString();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        java.lang.String str18 = locale14.getCountry();
        java.lang.String str19 = locale12.getDisplayName(locale14);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str21 = locale14.toLanguageTag();
        boolean boolean22 = field10.equals((java.lang.Object) str21);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str11, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str19, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) -43);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English (United States)" + "'", str1, "English (United States)");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English (United States)" + "'", str3, "English (United States)");
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        numberFormat15.setCurrency(currency19);
        numberFormat12.setCurrency(currency19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale26, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.lang.String[] strArray43 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        boolean boolean47 = numberFormat12.equals((java.lang.Object) strList44);
        numberFormat12.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat51 = properFractionFormat50.getNumeratorFormat();
        java.util.Currency currency52 = numberFormat51.getCurrency();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        int int55 = numberFormat54.getMaximumIntegerDigits();
        java.lang.String str57 = numberFormat54.format((long) (byte) 1);
        java.text.NumberFormat numberFormat58 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat54, numberFormat58);
        java.text.NumberFormat numberFormat60 = properFractionFormat59.getNumeratorFormat();
        numberFormat60.setParseIntegerOnly(true);
        properFractionFormat11.setWholeFormat(numberFormat60);
        numberFormat60.setMaximumIntegerDigits(7);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100%" + "'", str57, "100%");
        org.junit.Assert.assertNotNull(numberFormat60);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        numberFormat0.setGroupingUsed(true);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        numberFormat16.setCurrency(currency23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        java.lang.String str31 = numberFormat26.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat16, numberFormat26);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance();
        java.lang.String str36 = numberFormat34.format(100L);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj42 = numberFormat38.parseObject("hi!", parsePosition41);
        java.lang.Number number43 = numberFormat34.parse("10,000%", parsePosition41);
        int int44 = parsePosition41.getErrorIndex();
        java.lang.Object obj45 = properFractionFormat32.parseObject("French", parsePosition41);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.text.NumberFormat numberFormat50 = fractionFormat49.getNumeratorFormat();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 10);
        parsePosition53.setErrorIndex((int) (byte) 1);
        parsePosition53.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat49.parse("French", parsePosition53);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat32.parse("", parsePosition53);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getNumberInstance(locale61);
        java.lang.Object obj64 = numberFormat63.clone();
        properFractionFormat32.setWholeFormat(numberFormat63);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.lang.String str70 = locale67.getISO3Language();
        java.lang.String str71 = locale66.getDisplayCountry(locale67);
        java.lang.String str72 = locale67.toLanguageTag();
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getCurrencyInstance(locale67);
        boolean boolean74 = numberFormat73.isParseIntegerOnly();
        properFractionFormat32.setDenominatorFormat(numberFormat73);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale77);
        java.text.ParsePosition parsePosition81 = new java.text.ParsePosition((int) (short) 10);
        parsePosition81.setErrorIndex((int) (byte) 1);
        java.lang.Object obj84 = fractionFormat78.parseObject("United Kingdom", parsePosition81);
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat32.parse("32", parsePosition81);
        parsePosition81.setIndex((int) (short) -117);
        java.lang.String str88 = parsePosition81.toString();
        int int89 = parsePosition81.getErrorIndex();
        java.lang.Object obj90 = numberFormat0.parseObject("-\244 97.00", parsePosition81);
        parsePosition81.setErrorIndex(2147483647);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0%" + "'", str31, "0%");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100" + "'", str36, "100");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(number43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "French" + "'", str48, "French");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(fraction58);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "kor" + "'", str70, "kor");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ko" + "'", str72, "ko");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(fraction85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.text.ParsePosition[index=-117,errorIndex=9]" + "'", str88, "java.text.ParsePosition[index=-117,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat7.setCurrency(currency12);
        java.math.RoundingMode roundingMode15 = numberFormat7.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode15);
        numberFormat0.setMaximumIntegerDigits(96);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale1.getDisplayCountry(locale2);
        boolean boolean7 = field0.equals((java.lang.Object) locale1);
        java.lang.String str8 = locale1.getDisplayVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale1);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        java.lang.String str5 = locale0.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Set<java.lang.Character> charSet7 = locale0.getExtensionKeys();
        java.lang.String str8 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale locale15 = builder12.build();
        java.util.Locale.Builder builder17 = builder12.setLanguage("DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder12.setLanguage("JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(INPUT_METHOD_SEGMENT) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        java.text.ParseException parseException2 = new java.text.ParseException("GB", (int) (short) -13572);
        int int3 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-13572) + "'", int3 == (-13572));
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = locale0.getDisplayLanguage(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "coreano" + "'", str9, "coreano");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Canada" + "'", str3, "Canada");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        double double8 = fraction7.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int18 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.subtract(fraction17);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction12.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction9.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction9.abs();
        double double24 = fraction23.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction7.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction29.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction26.subtract(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int47 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction39.add(fraction43);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction7.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction1.add(fraction7);
        double double53 = fraction52.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 117.0d + "'", double8 == 117.0d);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-117 / 1" + "'", str13, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-117) + "'", int18 == (-117));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-117 / 1" + "'", str30, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-117) + "'", int47 == (-117));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 116.0d + "'", double53 == 116.0d);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        java.text.NumberFormat numberFormat28 = fractionFormat26.getNumeratorFormat();
        java.text.ParseException parseException31 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray32 = parseException31.getSuppressed();
        boolean boolean33 = numberFormat28.equals((java.lang.Object) throwableArray32);
        numberFormat28.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        java.text.NumberFormat numberFormat38 = null;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat40.setCurrency(currency47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        java.lang.String str55 = numberFormat50.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat40, numberFormat50);
        numberFormat40.setMinimumIntegerDigits((int) 'x');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat38, numberFormat40);
        java.text.NumberFormat numberFormat60 = properFractionFormat59.getDenominatorFormat();
        int int61 = numberFormat60.getMaximumFractionDigits();
        properFractionFormat23.setDenominatorFormat(numberFormat60);
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((int) (short) -117, (int) (short) 13689);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.NumberFormat.Field field69 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition((java.text.Format.Field) field69, (int) (short) 0);
        int int72 = fieldPosition71.getEndIndex();
        java.lang.String str73 = fieldPosition71.toString();
        int int74 = fieldPosition71.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer75 = properFractionFormat23.format(fraction65, stringBuffer68, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0%" + "'", str55, "0%");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1 / 117" + "'", str67, "-1 / 117");
        org.junit.Assert.assertNotNull(field69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str73, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale locale63 = new java.util.Locale("English (United States)", "java.text.NumberFormat$Field(per mille)", "eng");
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder65 = builder59.setLocale(locale63);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: english (united states) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals(locale63.toString(), "english (united states)_JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE)_eng");
        org.junit.Assert.assertNotNull(charSet64);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("anglais");
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale13.getDisplayLanguage(locale18);
        java.lang.String str20 = locale7.getDisplayName(locale18);
        java.lang.String str21 = locale7.getDisplayCountry();
        java.lang.String str22 = locale3.getDisplayVariant(locale7);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.lang.String str27 = locale23.getDisplayCountry();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale23.getDisplayLanguage(locale28);
        java.lang.String str30 = locale7.getDisplayVariant(locale28);
        java.lang.String str31 = locale1.getDisplayName(locale7);
        java.lang.String str32 = locale7.getDisplayLanguage();
        boolean boolean33 = locale7.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.text.NumberFormat.Field field35 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field35, (int) (short) 0);
        int int38 = fieldPosition37.getEndIndex();
        java.text.ParseException parseException41 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray42 = parseException41.getSuppressed();
        int int43 = parseException41.getErrorOffset();
        boolean boolean44 = fieldPosition37.equals((java.lang.Object) parseException41);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.setVariant("");
        java.util.Locale.Builder builder48 = builder47.clear();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        boolean boolean53 = locale49.hasExtensions();
        java.util.Locale.Builder builder54 = builder47.setLocale(locale49);
        java.util.Locale.Builder builder55 = builder54.clear();
        boolean boolean56 = fieldPosition37.equals((java.lang.Object) builder55);
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.lang.String str62 = locale59.getVariant();
        java.util.Locale.setDefault(category57, locale59);
        java.util.Locale locale64 = java.util.Locale.getDefault(category57);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale65);
        java.util.Locale.setDefault(category57, locale65);
        java.util.Locale locale68 = java.util.Locale.getDefault(category57);
        java.util.Locale.Builder builder69 = builder55.setLocale(locale68);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder70.setVariant("");
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale locale74 = builder72.build();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale76.getDisplayLanguage(locale77);
        java.lang.String str79 = locale76.getISO3Language();
        java.lang.String str80 = locale75.getDisplayCountry(locale76);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.lang.String str85 = locale82.getISO3Language();
        java.lang.String str86 = locale81.getDisplayCountry(locale82);
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str88 = locale82.getDisplayLanguage(locale87);
        java.lang.String str89 = locale76.getDisplayName(locale87);
        java.util.Locale.Builder builder90 = builder72.setLocale(locale76);
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getPercentInstance(locale76);
        java.lang.String str92 = locale68.getDisplayLanguage(locale76);
        java.lang.String str93 = locale76.getDisplayVariant();
        boolean boolean94 = locale7.equals((java.lang.Object) locale76);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "anglais" + "'", str2, "anglais");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587" + "'", str20, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587" + "'", str29, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "anglais" + "'", str31, "anglais");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Korean" + "'", str32, "Korean");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(field35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str78, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "kor" + "'", str85, "kor");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u671d\u9c9c\u6587" + "'", str88, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u671d\u9c9c\u6587" + "'", str89, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str92, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getScript();
        java.lang.String str6 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.text.NumberFormat numberFormat15 = fractionFormat14.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        boolean boolean17 = numberFormat15.isParseIntegerOnly();
        fractionFormat2.setDenominatorFormat(numberFormat15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fran\347ais" + "'", str1, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais" + "'", str13, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = locale85.getDisplayLanguage(locale86);
        java.util.Locale locale88 = locale86.stripExtensions();
        java.lang.String str89 = locale88.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat90 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale88);
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = numberFormat81.format((java.lang.Object) locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str87, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "kor" + "'", str89, "kor");
        org.junit.Assert.assertNotNull(fractionFormat90);
        org.junit.Assert.assertNotNull(fractionFormat91);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 100, (-13572));
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.util.Currency currency6 = numberFormat3.getCurrency();
        numberFormat2.setCurrency(currency6);
        numberFormat1.setCurrency(currency6);
        int int9 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setMaximumFractionDigits((int) '4');
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.lang.Object obj13 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat7.setCurrency(currency12);
        numberFormat0.setCurrency(currency12);
        numberFormat0.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getNumeratorFormat();
        int int20 = numberFormat19.getMinimumFractionDigits();
        numberFormat19.setParseIntegerOnly(false);
        int int23 = numberFormat19.getMaximumIntegerDigits();
        numberFormat19.setMaximumFractionDigits(100);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        java.lang.String str28 = numberFormat26.format(100L);
        int int29 = numberFormat26.getMinimumFractionDigits();
        numberFormat26.setMaximumIntegerDigits(1);
        java.math.RoundingMode roundingMode32 = numberFormat26.getRoundingMode();
        numberFormat19.setRoundingMode(roundingMode32);
        numberFormat0.setRoundingMode(roundingMode32);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.lang.String str39 = locale35.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = numberFormat0.format((java.lang.Object) locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "XXX");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale8.getDisplayCountry(locale11);
        java.lang.String str13 = locale2.getDisplayVariant(locale8);
        java.lang.String str14 = locale2.getDisplayName();
        java.lang.String str16 = locale2.getUnicodeLocaleType("FR");
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale18.getCountry();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale18.getDisplayCountry(locale23);
        java.lang.String str25 = locale18.toLanguageTag();
        java.lang.String str26 = locale18.getVariant();
        java.lang.String str27 = locale2.getDisplayScript(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ko" + "'", str25, "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=-117,errorIndex=9]");
        java.util.Locale.setDefault(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=-117,errorIndex=9]");
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale2);
        java.lang.String str4 = locale1.getDisplayName(locale2);
        java.lang.String str5 = locale2.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.parseposition[index=-117,errorindex=9]" + "'", str4, "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        boolean boolean2 = numberFormat0.isParseIntegerOnly();
        java.lang.String str4 = numberFormat0.format((double) 0.0f);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance();
        java.lang.String str7 = numberFormat5.format(100L);
        int int8 = numberFormat5.getMinimumFractionDigits();
        numberFormat5.setGroupingUsed(true);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        parsePosition15.setErrorIndex((int) (byte) 1);
        java.lang.Object obj18 = fractionFormat12.parseObject("United Kingdom", parsePosition15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        numberFormat23.setCurrency(currency27);
        numberFormat22.setCurrency(currency27);
        fractionFormat12.setNumeratorFormat(numberFormat22);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        numberFormat31.setCurrency(currency35);
        numberFormat22.setCurrency(currency35);
        numberFormat5.setCurrency(currency35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator41 = numberFormat0.formatToCharacterIterator((java.lang.Object) fractionFormat39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\244 0.00" + "'", str4, "\244 0.00");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat40);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("10", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale1);
        java.lang.String str6 = locale1.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Korean" + "'", str6, "Korean");
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.divide(fraction11);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = locale16.getDisplayName(locale23);
        boolean boolean27 = fraction11.equals((java.lang.Object) locale16);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        int int39 = fraction38.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction11.divide(fraction44);
        short short46 = fraction44.shortValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -35 + "'", short46 == (short) -35);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        java.util.Locale locale2 = new java.util.Locale("", "united kingdom (1)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 10);
        parsePosition10.setErrorIndex((int) (byte) 1);
        java.lang.Object obj13 = fractionFormat7.parseObject("United Kingdom", parsePosition10);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj18 = numberFormat14.parseObject("hi!", parsePosition17);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        fractionFormat5.setDenominatorFormat(numberFormat14);
        java.lang.Object obj21 = fractionFormat5.clone();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(9);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        boolean boolean28 = parsePosition23.equals((java.lang.Object) numberFormat27);
        numberFormat27.setMaximumIntegerDigits((int) (short) 100);
        fractionFormat5.setNumeratorFormat(numberFormat27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        int int34 = numberFormat33.getMinimumFractionDigits();
        numberFormat33.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        numberFormat33.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale40.getDisplayCountry();
        boolean boolean45 = numberFormat33.equals((java.lang.Object) locale40);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        numberFormat47.setMaximumIntegerDigits((-1));
        java.util.Currency currency50 = numberFormat47.getCurrency();
        numberFormat46.setCurrency(currency50);
        java.lang.String str53 = numberFormat46.format((double) 100);
        numberFormat46.setParseIntegerOnly(false);
        numberFormat46.setMaximumIntegerDigits((int) 'x');
        java.lang.Object obj58 = numberFormat46.clone();
        java.util.Currency currency59 = numberFormat46.getCurrency();
        numberFormat33.setCurrency(currency59);
        numberFormat27.setCurrency(currency59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = fractionFormat3.format((java.lang.Object) numberFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_UNITED KINGDOM (1)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str25, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10,000%" + "'", str53, "10,000%");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder56.setLanguageTag("fr_fr_13,689_\244 1.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: fr_fr_13,689_? 1.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        java.util.Locale locale2 = new java.util.Locale("1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100", "-1 / 1");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("zh_CN");
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        int int14 = fieldPosition13.getEndIndex();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        int int19 = parseException17.getErrorOffset();
        boolean boolean20 = fieldPosition13.equals((java.lang.Object) parseException17);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setVariant("");
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        boolean boolean29 = locale25.hasExtensions();
        java.util.Locale.Builder builder30 = builder23.setLocale(locale25);
        java.util.Locale.Builder builder31 = builder30.clear();
        boolean boolean32 = fieldPosition13.equals((java.lang.Object) builder31);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale40 = java.util.Locale.getDefault(category33);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.util.Locale.setDefault(category33, locale41);
        java.util.Locale locale44 = java.util.Locale.getDefault(category33);
        java.util.Locale.Builder builder45 = builder31.setLocale(locale44);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setVariant("");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = builder48.build();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale58.getISO3Language();
        java.lang.String str62 = locale57.getDisplayCountry(locale58);
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str64 = locale58.getDisplayLanguage(locale63);
        java.lang.String str65 = locale52.getDisplayName(locale63);
        java.util.Locale.Builder builder66 = builder48.setLocale(locale52);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale52);
        java.lang.String str68 = locale44.getDisplayLanguage(locale52);
        java.lang.String str69 = locale10.getDisplayLanguage(locale44);
        java.lang.String str70 = locale3.getDisplayVariant(locale44);
        java.lang.String str71 = locale2.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getNumberInstance(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "1 / 1_java.text.parseexception: java.text.parseexception: 100_-1 / 1");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u671d\u9c9c\u6587" + "'", str64, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u671d\u9c9c\u6587" + "'", str65, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str68, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1 / 1_java.text.parseexception: java.text.parseexception: 100" + "'", str71, "1 / 1_java.text.parseexception: java.text.parseexception: 100");
        org.junit.Assert.assertNotNull(numberFormat72);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18);
        boolean boolean23 = parsePosition14.equals((java.lang.Object) fractionFormat22);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category24);
        boolean boolean32 = parsePosition14.equals((java.lang.Object) locale31);
        parsePosition14.setIndex((int) (short) 10);
        int int35 = parsePosition14.getIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(117, (int) (short) -1170);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        boolean boolean10 = fraction6.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        double double19 = fraction18.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction6.divide(fraction18);
        double double21 = fraction6.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction(117.0d);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction6.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction2.divide(fraction6);
        float float27 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction(100.0d);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int39 = fraction38.intValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.subtract(fraction38);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction33.add(fraction35);
        int int42 = fraction41.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.multiply(fraction45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance();
        boolean boolean48 = numberFormat47.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47);
        boolean boolean50 = numberFormat47.isParseIntegerOnly();
        boolean boolean51 = fraction45.equals((java.lang.Object) boolean50);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction30.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = new org.apache.commons.math.fraction.Fraction(117.0d);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction53.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction2.subtract(fraction53);
        long long59 = fraction53.longValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 117.0d + "'", double19 == 117.0d);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-117.0d) + "'", double21 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-0.1f) + "'", float27 == (-0.1f));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-117 / 1" + "'", str34, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-117) + "'", int39 == (-117));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-99L) + "'", long59 == (-99L));
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale18.getScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale18, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale43);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale48.getScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale52.getVariant();
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale29, locale33, locale34, locale38, locale40, locale43, locale46, locale48, locale52 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale63, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList69, filteringMode71);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList57, filteringMode71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList76, strMap77);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode71.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertNotNull(languageRangeList78);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        java.util.Currency currency11 = numberFormat3.getCurrency();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.util.Currency currency26 = numberFormat23.getCurrency();
        java.lang.String str28 = numberFormat23.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat13, numberFormat23);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance();
        java.lang.String str32 = numberFormat30.format(100L);
        properFractionFormat29.setWholeFormat(numberFormat30);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance();
        java.lang.String str36 = numberFormat34.format(100L);
        int int37 = numberFormat34.getMinimumFractionDigits();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale39);
        java.lang.String str43 = numberFormat41.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30, numberFormat34, numberFormat41);
        java.lang.Object obj45 = numberFormat30.clone();
        int int46 = numberFormat30.getMinimumFractionDigits();
        java.math.RoundingMode roundingMode47 = numberFormat30.getRoundingMode();
        numberFormat3.setRoundingMode(roundingMode47);
        numberFormat3.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0%" + "'", str28, "0%");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "100" + "'", str36, "100");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str40, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "32" + "'", str43, "32");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        java.lang.String str12 = numberFormat3.format((double) (byte) -1);
        java.lang.Object obj13 = numberFormat3.clone();
        int int14 = numberFormat3.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) str8);
        int int10 = fieldPosition2.getBeginIndex();
        int int11 = fieldPosition2.getBeginIndex();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale12);
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str17 = locale12.getDisplayScript(locale15);
        boolean boolean18 = fieldPosition2.equals((java.lang.Object) locale15);
        int int19 = fieldPosition2.getBeginIndex();
        fieldPosition2.setEndIndex(2147483646);
        fieldPosition2.setEndIndex((-3));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str8, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.String str20 = numberFormat1.format((long) 13689);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0%" + "'", str20, "0%");
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        boolean boolean7 = fieldPosition2.equals((java.lang.Object) fraction6);
        java.text.Format.Field field8 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(field8, 97);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field8);
        java.lang.String str12 = fieldPosition11.toString();
        fieldPosition11.setBeginIndex((int) (short) 117);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str12, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.setLanguageTag("coreano");
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) 100, 387);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        long long23 = fraction15.longValue();
        java.text.AttributedCharacterIterator.Attribute attribute24 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale25);
        boolean boolean27 = attribute24.equals((java.lang.Object) numberFormat26);
        boolean boolean28 = fraction15.equals((java.lang.Object) boolean27);
        int int29 = fraction15.getDenominator();
        int int30 = fraction15.getNumerator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(attribute24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale2.getCountry();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.lang.String str9 = locale2.toLanguageTag();
        java.lang.String str10 = locale2.getScript();
        java.lang.String str11 = locale2.getISO3Language();
        java.lang.String str12 = locale2.getVariant();
        java.lang.String str13 = locale2.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str7, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = locale18.getVariant();
        java.util.Locale.setDefault(category16, locale18);
        java.lang.String str23 = locale18.getDisplayName();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str25 = locale18.getDisplayName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale18.getDisplayScript(locale26);
        java.util.Set<java.lang.String> strSet28 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        boolean boolean11 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits((int) (byte) -117);
        java.util.Locale locale15 = new java.util.Locale("French");
        java.util.Locale locale16 = locale15.stripExtensions();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str18 = locale15.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.lang.String str23 = locale15.getDisplayVariant(locale19);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getNumberInstance(locale24);
        java.lang.String str27 = locale24.getDisplayCountry();
        java.lang.String str28 = locale15.getDisplayCountry(locale24);
        java.lang.String str29 = locale15.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator30 = numberFormat3.formatToCharacterIterator((java.lang.Object) locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals(locale15.toString(), "french");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "french" + "'", str18, "french");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "french" + "'", str29, "french");
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 9, (int) (short) -1170);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 9 to fraction (9,223,372,036,854,775,800/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str3 = numberFormat1.format((long) (byte) 10);
        numberFormat1.setMaximumIntegerDigits((int) (byte) 10);
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale6);
        numberFormat8.setMaximumIntegerDigits(100);
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat1.setCurrency(currency11);
        java.lang.Object obj13 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "EUR");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        java.text.ParseException parseException2 = new java.text.ParseException("-13,572", (int) (byte) -32);
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: -13,572" + "'", str3, "java.text.ParseException: -13,572");
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 10);
        parsePosition66.setErrorIndex((int) (byte) 1);
        java.lang.Object obj69 = fractionFormat63.parseObject("United Kingdom", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat17.parse("32", parsePosition66);
        java.text.NumberFormat numberFormat71 = properFractionFormat17.getDenominatorFormat();
        java.lang.Object obj72 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat73 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat74 = properFractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction77 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.reciprocal();
        java.util.Locale locale80 = java.util.Locale.UK;
        java.lang.String str81 = locale80.getDisplayScript();
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getInstance(locale80);
        boolean boolean84 = fraction79.equals((java.lang.Object) locale80);
        java.lang.String str85 = locale80.getScript();
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale86);
        java.text.NumberFormat numberFormat88 = java.text.NumberFormat.getPercentInstance(locale86);
        java.util.Set<java.lang.Character> charSet89 = locale86.getExtensionKeys();
        java.lang.String str90 = locale80.getDisplayScript(locale86);
        java.lang.String str91 = locale86.getCountry();
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getCurrencyInstance(locale86);
        properFractionFormat17.setNumeratorFormat(numberFormat92);
        boolean boolean94 = numberFormat92.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str33, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "TW" + "'", str91, "TW");
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getNumberInstance(locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.lang.String str20 = locale17.getDisplayName();
        java.lang.Object obj21 = locale17.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587\u671d\u9c9c\u6587)" + "'", str20, "\u671d\u9c9c\u6587\u671d\u9c9c\u6587)");
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction3.negate();
        int int7 = fraction3.getDenominator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean16 = fieldPosition2.equals((java.lang.Object) numberFormat15);
        java.math.RoundingMode roundingMode17 = numberFormat15.getRoundingMode();
        java.lang.Number number19 = numberFormat15.parse("-13\240572");
        java.util.Locale locale20 = java.util.Locale.UK;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale20.getDisplayScript(locale22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale22);
        java.lang.String str26 = locale22.getDisplayVariant();
        java.lang.String str27 = locale22.getISO3Country();
        boolean boolean28 = numberFormat15.equals((java.lang.Object) str27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((-117));
        java.lang.Object obj32 = numberFormat15.parseObject("coreano", parsePosition31);
        java.lang.Object obj33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = numberFormat15.format(obj33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + number19 + "' != '" + (-13L) + "'", number19, (-13L));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.setLanguageTag("coreano");
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setVariant("java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=1,endindex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=1,endindex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        int int18 = numberFormat17.getMinimumFractionDigits();
        numberFormat17.setParseIntegerOnly(false);
        int int21 = numberFormat17.getMaximumIntegerDigits();
        numberFormat17.setMaximumFractionDigits(100);
        numberFormat17.setMaximumIntegerDigits(0);
        boolean boolean26 = field0.equals((java.lang.Object) 0);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int28 = fieldPosition27.getBeginIndex();
        int int29 = fieldPosition27.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French" + "'", str2, "French");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        java.text.ParseException parseException2 = new java.text.ParseException("kanada", 117);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.lang.String str4 = parseException2.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.ParseException: kanada" + "'", str4, "java.text.ParseException: kanada");
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        java.lang.String str21 = numberFormat16.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat6, numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.lang.String str26 = numberFormat24.format((double) (byte) -3);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits((int) (short) -117);
        boolean boolean34 = numberFormat27.isParseIntegerOnly();
        java.math.RoundingMode roundingMode35 = numberFormat27.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode35);
        numberFormat4.setRoundingMode(roundingMode35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0%" + "'", str21, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-0%" + "'", str26, "-0%");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 0.3298969f, (int) (byte) 0);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        java.util.Locale locale2 = new java.util.Locale("10", "ja_JP");
        org.junit.Assert.assertEquals(locale2.toString(), "10_JA_JP");
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getBeginIndex();
        java.lang.String str5 = fieldPosition2.toString();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList16, filteringMode18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale24, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.lang.String str56 = locale54.getScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = locale58.getVariant();
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale35, locale39, locale40, locale44, locale46, locale49, locale52, locale54, locale58 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.lang.String str71 = locale69.getScript();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale69, locale72, locale73 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList63, filteringMode77);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap81);
        java.util.Locale locale83 = java.util.Locale.UK;
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = locale83.getDisplayScript(locale85);
        java.util.Set<java.lang.String> strSet88 = locale85.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList82, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        boolean boolean91 = fieldPosition2.equals((java.lang.Object) filteringMode89);
        int int92 = fieldPosition2.getEndIndex();
        int int93 = fieldPosition2.getField();
        java.text.Format.Field field94 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition95 = new java.text.FieldPosition(field94);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str5, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNull(locale80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(field94);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        java.util.Locale locale3 = new java.util.Locale("\ud55c\uad6d\uc5b4", "$35.00", "2,000%");
        org.junit.Assert.assertEquals(locale3.toString(), "\ud55c\uad6d\uc5b4_$35.00_2,000%");
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayName(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getScript();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getNumeratorFormat();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat17.setCurrency(currency21);
        numberFormat16.setCurrency(currency21);
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj36 = numberFormat32.parseObject("hi!", parsePosition35);
        java.lang.Number number37 = numberFormat28.parse("10,000%", parsePosition35);
        java.lang.Object obj38 = numberFormat14.parseObject("\ud504\ub791\uc2a4\uc5b4", parsePosition35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = fractionFormat9.format((java.lang.Object) numberFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "coreano" + "'", str6, "coreano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition(2147483647);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj33 = numberFormat29.parseObject("hi!", parsePosition32);
        java.lang.Number number34 = numberFormat25.parse("10,000%", parsePosition32);
        int int35 = parsePosition32.getErrorIndex();
        java.lang.Object obj36 = properFractionFormat23.parseObject("French", parsePosition32);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        numberFormat39.setCurrency(currency46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        numberFormat49.setMaximumIntegerDigits((-1));
        java.util.Currency currency52 = numberFormat49.getCurrency();
        java.lang.String str54 = numberFormat49.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat39, numberFormat49);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance();
        java.lang.String str59 = numberFormat57.format(100L);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj65 = numberFormat61.parseObject("hi!", parsePosition64);
        java.lang.Number number66 = numberFormat57.parse("10,000%", parsePosition64);
        int int67 = parsePosition64.getErrorIndex();
        java.lang.Object obj68 = properFractionFormat55.parseObject("French", parsePosition64);
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale70.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale70);
        java.text.NumberFormat numberFormat73 = fractionFormat72.getNumeratorFormat();
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) 10);
        parsePosition76.setErrorIndex((int) (byte) 1);
        parsePosition76.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction81 = fractionFormat72.parse("French", parsePosition76);
        org.apache.commons.math.fraction.Fraction fraction82 = properFractionFormat55.parse("", parsePosition76);
        java.lang.Object obj83 = properFractionFormat23.parseObject("java.text.NumberFormat$Field(currency)", parsePosition76);
        java.util.Locale locale84 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale84);
        java.text.NumberFormat numberFormat86 = fractionFormat85.getNumeratorFormat();
        java.text.NumberFormat numberFormat87 = fractionFormat85.getNumeratorFormat();
        properFractionFormat23.setDenominatorFormat(numberFormat87);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getIntegerInstance(locale89);
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getInstance(locale89);
        properFractionFormat23.setWholeFormat(numberFormat91);
        numberFormat91.setMaximumFractionDigits(1);
        java.util.Currency currency95 = numberFormat91.getCurrency();
        boolean boolean96 = parsePosition5.equals((java.lang.Object) currency95);
        numberFormat1.setCurrency(currency95);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat98 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0%" + "'", str54, "0%");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100" + "'", str59, "100");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(number66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French" + "'", str71, "French");
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertNull(fraction82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat85);
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertNotNull(currency95);
        org.junit.Assert.assertEquals(currency95.toString(), "EUR");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-1), 13455);
        boolean boolean5 = fraction1.equals((java.lang.Object) (-1));
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.lang.Object obj4 = numberFormat3.clone();
        numberFormat3.setParseIntegerOnly(true);
        boolean boolean7 = numberFormat3.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.lang.String[] strArray21 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList40, filteringMode41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("China", strMap44);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.setVariant("");
        java.util.Locale.Builder builder49 = builder48.clear();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        boolean boolean54 = locale50.hasExtensions();
        java.util.Locale.Builder builder55 = builder48.setLocale(locale50);
        java.util.Set<java.lang.String> strSet56 = locale50.getUnicodeLocaleKeys();
        java.lang.String str57 = java.util.Locale.lookupTag(languageRangeList45, (java.util.Collection<java.lang.String>) strSet56);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.parse("en");
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = locale70.getScript();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale70, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        boolean boolean80 = fraction65.equals((java.lang.Object) localeList79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList59, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList26, strMap84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayCountry();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale.setDefault(locale15);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale10.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder20 = builder4.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder4.removeUnicodeLocaleAttribute("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u97d3\u6587" + "'", str11, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "coreano" + "'", str16, "coreano");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese" + "'", str19, "cinese");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("100,000%", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=100,000%");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale8.getDisplayCountry(locale11);
        java.lang.String str13 = locale2.getDisplayVariant(locale8);
        java.lang.String str14 = locale2.getDisplayName();
        java.lang.String str16 = locale2.getUnicodeLocaleType("FR");
        java.lang.String str17 = locale2.getDisplayScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "United Kingdom" + "'", str12, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        fieldPosition2.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        boolean boolean29 = fieldPosition2.equals((java.lang.Object) properFractionFormat23);
        int int30 = fieldPosition2.getEndIndex();
        java.lang.Class<?> wildcardClass31 = fieldPosition2.getClass();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale1);
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder8.build();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = locale1.getDisplayLanguage(locale9);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str14 = locale1.getDisplayLanguage(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale1);
        java.lang.String str17 = numberFormat15.format(13571L);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        java.lang.StringBuffer stringBuffer23 = null;
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale.setDefault(category24, locale26);
        java.lang.String str31 = locale26.getDisplayName();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = locale32.getDisplayScript();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale32.getDisplayCountry(locale35);
        java.lang.String str37 = locale26.getDisplayVariant(locale32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        numberFormat39.setMaximumIntegerDigits((int) (short) 100);
        numberFormat39.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        numberFormat47.setMaximumIntegerDigits((-1));
        numberFormat47.setMaximumIntegerDigits((int) (short) 100);
        numberFormat47.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47);
        fractionFormat46.setDenominatorFormat(numberFormat47);
        fractionFormat38.setNumeratorFormat(numberFormat47);
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) (short) 0);
        java.lang.String str60 = fieldPosition59.toString();
        java.lang.String str61 = fieldPosition59.toString();
        fieldPosition59.setBeginIndex((int) (byte) 10);
        int int64 = fieldPosition59.getEndIndex();
        int int65 = fieldPosition59.getEndIndex();
        fieldPosition59.setEndIndex((int) ' ');
        boolean boolean68 = numberFormat47.equals((java.lang.Object) fieldPosition59);
        fieldPosition59.setEndIndex((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer71 = properFractionFormat18.format(fraction22, stringBuffer23, fieldPosition59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uce90\ub098\ub2e4" + "'", str11, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uce90\ub098\ub2e4" + "'", str14, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "13,571" + "'", str17, "13,571");
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str61, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.util.Currency currency26 = numberFormat23.getCurrency();
        java.lang.String str28 = numberFormat23.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat13, numberFormat23);
        fractionFormat2.setDenominatorFormat(numberFormat23);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Number number34 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(language)", parsePosition33);
        numberFormat23.setMaximumIntegerDigits((int) (byte) -117);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field37, (int) (short) 0);
        java.lang.String str40 = fieldPosition39.toString();
        java.lang.String str41 = fieldPosition39.toString();
        fieldPosition39.setBeginIndex((int) (byte) 10);
        fieldPosition39.setBeginIndex((int) '4');
        int int46 = fieldPosition39.getBeginIndex();
        java.text.Format.Field field47 = fieldPosition39.getFieldAttribute();
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition(field47, 3);
        fieldPosition49.setBeginIndex((int) 'u');
        int int52 = fieldPosition49.getEndIndex();
        java.lang.String str53 = numberFormat23.format((java.lang.Object) int52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0%" + "'", str28, "0%");
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str41, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0%" + "'", str53, "0%");
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: italien (Italie) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale locale35 = builder20.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder20.addUnicodeLocaleAttribute("chinese (CANADA,GB)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: chinese (CANADA,GB) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        java.util.Locale locale2 = new java.util.Locale("13.571", "java.text.parseexception: anglais");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "13.571_JAVA.TEXT.PARSEEXCEPTION: ANGLAIS");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JAVA.TEXT.PARSEEXCEPTION: ANGLAIS" + "'", str3, "JAVA.TEXT.PARSEEXCEPTION: ANGLAIS");
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        java.lang.String str12 = locale6.getLanguage();
        java.lang.String str13 = locale6.getDisplayScript();
        java.lang.String str14 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale6);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Object obj4 = numberFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        numberFormat0.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        java.util.Locale locale3 = new java.util.Locale("10,000%", "\ud55c\uad6d\uc5b4", "32");
        java.lang.String str4 = locale3.getScript();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        boolean boolean6 = numberFormat5.isGroupingUsed();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ud55c\uad6d\uc5b4_32");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat11);
        boolean boolean13 = numberFormat3.isGroupingUsed();
        numberFormat3.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale10.getDisplayVariant(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str23 = locale6.getDisplayName(locale10);
        java.lang.String str24 = locale6.getISO3Country();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setVariant("");
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale29.getISO3Language();
        boolean boolean33 = locale29.hasExtensions();
        java.util.Locale.Builder builder34 = builder27.setLocale(locale29);
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale.Builder builder37 = builder34.setRegion("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        int int40 = numberFormat39.getMinimumFractionDigits();
        numberFormat39.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39);
        numberFormat39.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str50 = locale46.getDisplayCountry();
        boolean boolean51 = numberFormat39.equals((java.lang.Object) locale46);
        java.lang.String str52 = locale46.getDisplayCountry();
        java.util.Locale.Builder builder53 = builder37.setLocale(locale46);
        java.util.Locale locale54 = builder37.build();
        java.lang.String str55 = locale6.getDisplayScript(locale54);
        java.lang.String str56 = locale6.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fractionFormat22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str23, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DEU" + "'", str24, "DEU");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        numberFormat20.setCurrency(currency24);
        numberFormat17.setCurrency(currency24);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        java.lang.String str32 = numberFormat27.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat17, numberFormat27);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj43 = numberFormat39.parseObject("hi!", parsePosition42);
        java.lang.Number number44 = numberFormat35.parse("10,000%", parsePosition42);
        int int45 = parsePosition42.getErrorIndex();
        int int46 = parsePosition42.getIndex();
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat33.parse("French", parsePosition42);
        int int48 = parsePosition42.getIndex();
        java.lang.Object obj49 = numberFormat14.parseObject("\uce90\ub098\ub2e4", parsePosition42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance();
        numberFormat53.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        numberFormat57.setMaximumIntegerDigits((-1));
        java.util.Currency currency60 = numberFormat57.getCurrency();
        numberFormat56.setCurrency(currency60);
        numberFormat53.setCurrency(currency60);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance();
        numberFormat63.setMaximumIntegerDigits((-1));
        java.util.Currency currency66 = numberFormat63.getCurrency();
        java.lang.String str68 = numberFormat63.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52, numberFormat53, numberFormat63);
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getInstance();
        java.lang.String str73 = numberFormat71.format(100L);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj79 = numberFormat75.parseObject("hi!", parsePosition78);
        java.lang.Number number80 = numberFormat71.parse("10,000%", parsePosition78);
        int int81 = parsePosition78.getErrorIndex();
        java.lang.Object obj82 = properFractionFormat69.parseObject("French", parsePosition78);
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = locale84.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale84);
        java.text.NumberFormat numberFormat87 = fractionFormat86.getNumeratorFormat();
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) (short) 10);
        parsePosition90.setErrorIndex((int) (byte) 1);
        parsePosition90.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction95 = fractionFormat86.parse("French", parsePosition90);
        org.apache.commons.math.fraction.Fraction fraction96 = properFractionFormat69.parse("", parsePosition90);
        org.apache.commons.math.fraction.Fraction fraction97 = properFractionFormat50.parse("English (Canada)", parsePosition90);
        org.apache.commons.math.fraction.Fraction fraction98 = fractionFormat12.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition90);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0%" + "'", str32, "0%");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(number44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0%" + "'", str68, "0%");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(number80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fran\347ais" + "'", str85, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat86);
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNull(fraction95);
        org.junit.Assert.assertNull(fraction96);
        org.junit.Assert.assertNull(fraction97);
        org.junit.Assert.assertNull(fraction98);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(2147483646, (-3841));
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        int int35 = numberFormat34.getMinimumFractionDigits();
        numberFormat34.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        numberFormat61.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        boolean boolean67 = numberFormat61.equals((java.lang.Object) locale65);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj71 = numberFormat61.parseObject("China", parsePosition70);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getIntegerInstance(locale72);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat61, numberFormat73);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale76);
        java.text.NumberFormat numberFormat78 = fractionFormat77.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat77.getNumeratorFormat();
        int int80 = numberFormat79.getMinimumIntegerDigits();
        numberFormat79.setMaximumIntegerDigits((int) ' ');
        java.lang.Object obj83 = numberFormat79.clone();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Number number87 = numberFormat79.parse("\uc911\uad6d\uc5b4\ub300\ub9cc)", parsePosition86);
        parsePosition86.setErrorIndex((int) (short) 10);
        org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat74.parse("35", parsePosition86);
        parsePosition86.setErrorIndex((int) (byte) -4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertNull(fraction90);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setLanguageTag("Kanada");
        java.util.Locale locale7 = builder6.build();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale7.getDisplayName(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale7);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        properFractionFormat34.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance();
        java.lang.String str41 = numberFormat39.format(100L);
        int int42 = numberFormat39.getMinimumFractionDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        java.lang.String str48 = numberFormat46.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat39, numberFormat46);
        java.lang.Object obj50 = numberFormat35.clone();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) '4');
        int int54 = parsePosition53.getErrorIndex();
        int int55 = parsePosition53.getIndex();
        int int56 = parsePosition53.getIndex();
        java.lang.Object obj57 = numberFormat35.parseObject("en-GB", parsePosition53);
        java.lang.String str58 = parsePosition53.toString();
        java.lang.Number number59 = numberFormat15.parse("Japanese (Japan)", parsePosition53);
        parsePosition53.setErrorIndex(4094);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "kanada");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kanada" + "'", str14, "kanada");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "32" + "'", str48, "32");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str58, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertNull(number59);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition3 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj4 = numberFormat0.parseObject("hi!", parsePosition3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat5.getNumeratorFormat();
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray11 = parseException10.getSuppressed();
        boolean boolean12 = numberFormat7.equals((java.lang.Object) throwableArray11);
        numberFormat7.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat16 = properFractionFormat15.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat16);
        boolean boolean18 = numberFormat0.isGroupingUsed();
        java.lang.Object obj19 = numberFormat0.clone();
        int int20 = numberFormat0.getMaximumFractionDigits();
        int int21 = numberFormat0.getMinimumIntegerDigits();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Set<java.lang.Character> charSet27 = locale25.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator28 = numberFormat0.formatToCharacterIterator((java.lang.Object) charSet27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(charSet27);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        java.util.Locale locale2 = new java.util.Locale("United Kingdom", "1");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        numberFormat3.setGroupingUsed(true);
        org.junit.Assert.assertEquals(locale2.toString(), "united kingdom_1");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getEndIndex();
        java.text.Format.Field field9 = fieldPosition2.getFieldAttribute();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        boolean boolean16 = fieldPosition2.equals((java.lang.Object) numberFormat15);
        java.math.RoundingMode roundingMode17 = numberFormat15.getRoundingMode();
        java.lang.Number number19 = numberFormat15.parse("-13\240572");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = numberFormat15.parseObject("java.text.ParsePosition[index=-1,errorIndex=32]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + number19 + "' != '" + (-13L) + "'", number19, (-13L));
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        int int12 = numberFormat1.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale27, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        java.lang.String[] strArray44 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList45);
        boolean boolean48 = numberFormat13.equals((java.lang.Object) strList45);
        numberFormat13.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        int int53 = numberFormat13.getMinimumFractionDigits();
        numberFormat13.setMaximumFractionDigits(315);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale8);
        java.lang.String str11 = locale8.toLanguageTag();
        java.util.Locale.setDefault(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.math.RoundingMode roundingMode6 = numberFormat5.getRoundingMode();
        java.lang.Object obj7 = numberFormat5.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        java.lang.String str14 = fieldPosition13.toString();
        java.lang.String str15 = fieldPosition13.toString();
        fieldPosition13.setBeginIndex((int) (byte) 10);
        fieldPosition13.setBeginIndex((int) '4');
        boolean boolean21 = fieldPosition13.equals((java.lang.Object) (short) -1);
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) (short) 0);
        int int25 = fieldPosition24.getEndIndex();
        java.lang.String str26 = fieldPosition24.toString();
        boolean boolean27 = fieldPosition13.equals((java.lang.Object) str26);
        int int28 = fieldPosition13.getBeginIndex();
        java.text.Format.Field field29 = fieldPosition13.getFieldAttribute();
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition(field29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = numberFormat5.format((-96L), stringBuffer10, fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str15, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str26, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(field29);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: java.text.ParseException: 100", "-1");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.lang.String str18 = locale13.toLanguageTag();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.String str20 = locale10.getDisplayVariant(locale13);
        java.lang.String str21 = locale6.getDisplayCountry(locale10);
        java.lang.String str22 = locale2.getDisplayScript(locale6);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet26 = locale23.getExtensionKeys();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale.setDefault(category27, locale29);
        java.lang.String str34 = locale29.getDisplayName();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale35.getDisplayCountry(locale38);
        java.lang.String str40 = locale29.getDisplayVariant(locale35);
        java.lang.String str41 = locale23.getDisplayName(locale35);
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale23.getDisplayLanguage(locale42);
        java.lang.String str44 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale23);
        java.lang.String str46 = locale6.getDisplayLanguage(locale23);
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.lang.String str51 = locale49.getScript();
        java.lang.String str52 = locale49.getVariant();
        java.util.Locale.setDefault(category47, locale49);
        java.lang.String str54 = locale49.getDisplayName();
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleAttributes();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale55.getDisplayCountry(locale58);
        java.lang.String str60 = locale49.getDisplayVariant(locale55);
        java.lang.String str61 = locale49.getDisplayName();
        java.lang.String str62 = locale23.getDisplayVariant(locale49);
        java.util.Locale locale65 = new java.util.Locale("java.text.numberformat$field(percent)", "fran\347ais (France)");
        java.lang.String str66 = locale49.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale67);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale67);
        java.util.Set<java.lang.Character> charSet70 = locale67.getExtensionKeys();
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getCurrencyInstance(locale67);
        boolean boolean72 = locale67.hasExtensions();
        java.lang.String str73 = locale49.getDisplayName(locale67);
        java.util.Locale locale74 = locale49.stripExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: java.text.parseexception: 100_-1");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko" + "'", str18, "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "United Kingdom" + "'", str39, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean" + "'", str46, "Korean");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category47.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "United Kingdom" + "'", str59, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals(locale65.toString(), "java.text.numberformat$field(percent)_FRAN\347AIS (FRANCE)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u97d3\u6587" + "'", str73, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale11 = new java.util.Locale("francese");
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale5.getDisplayVariant();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale11.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Locale.setDefault(category2, locale9);
        java.lang.String str13 = locale0.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat14.setMinimumIntegerDigits((-1));
        numberFormat14.setGroupingUsed(false);
        java.lang.String str20 = numberFormat14.format((double) (byte) 0);
        int int21 = numberFormat14.getMaximumIntegerDigits();
        java.util.Locale locale23 = new java.util.Locale("zh_TW");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.util.Currency currency34 = numberFormat31.getCurrency();
        numberFormat30.setCurrency(currency34);
        numberFormat27.setCurrency(currency34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        java.lang.String str42 = numberFormat37.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat27, numberFormat37);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj53 = numberFormat49.parseObject("hi!", parsePosition52);
        java.lang.Number number54 = numberFormat45.parse("10,000%", parsePosition52);
        int int55 = parsePosition52.getErrorIndex();
        int int56 = parsePosition52.getIndex();
        org.apache.commons.math.fraction.Fraction fraction57 = properFractionFormat43.parse("French", parsePosition52);
        java.text.NumberFormat numberFormat58 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat59 = properFractionFormat43.getWholeFormat();
        java.text.NumberFormat numberFormat60 = properFractionFormat43.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat25, numberFormat60);
        int int62 = numberFormat60.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u56fd" + "'", str13, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0%" + "'", str42, "0%");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(number54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNull(fraction57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int26 = fraction25.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction17.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction30.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction15.multiply(fraction30);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = locale45.getVariant();
        boolean boolean50 = fraction42.equals((java.lang.Object) locale45);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction2.multiply(fraction42);
        int int52 = fraction51.getDenominator();
        double double53 = fraction51.doubleValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-117 / 1" + "'", str21, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-117) + "'", int26 == (-117));
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str46, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale2.getDisplayCountry(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayLanguage(locale2);
        java.lang.String str9 = locale0.getDisplayName();
        java.lang.String str10 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United Kingdom" + "'", str6, "United Kingdom");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4" + "'", str7, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str9, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh_TW" + "'", str10, "zh_TW");
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.util.Locale.Builder builder11 = builder3.setLocale(locale6);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.Builder builder14 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder15 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder11.setUnicodeLocaleKeyword("Japanese (Japan)", "french_FRENCH_French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Japanese (Japan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("3,200", (double) 0.02302944f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=3,200");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat6.setCurrency(currency11);
        java.math.RoundingMode roundingMode14 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode19 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        int int24 = numberFormat21.getMinimumFractionDigits();
        numberFormat21.setMaximumIntegerDigits(1);
        boolean boolean28 = numberFormat21.equals((java.lang.Object) (-117));
        java.lang.String str30 = numberFormat21.format((double) (-1));
        fractionFormat20.setDenominatorFormat(numberFormat21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        java.util.Currency currency40 = numberFormat32.getCurrency();
        boolean boolean41 = numberFormat21.equals((java.lang.Object) currency40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj45 = numberFormat21.parseObject("zh_CN", parsePosition44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.util.Currency currency54 = numberFormat51.getCurrency();
        numberFormat50.setCurrency(currency54);
        numberFormat49.setCurrency(currency54);
        boolean boolean57 = numberFormat49.isGroupingUsed();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = locale59.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction66 = fractionFormat61.parse("french", parsePosition65);
        java.lang.Object obj67 = numberFormat49.parseObject("\2430.00", parsePosition65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        numberFormat68.setMaximumIntegerDigits((int) (short) 100);
        numberFormat68.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = new org.apache.commons.math.fraction.FractionFormat(numberFormat68);
        java.math.RoundingMode roundingMode76 = numberFormat68.getRoundingMode();
        numberFormat49.setRoundingMode(roundingMode76);
        numberFormat21.setRoundingMode(roundingMode76);
        numberFormat4.setRoundingMode(roundingMode76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
// flaky:         org.junit.Assert.assertEquals(currency11.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
// flaky:         org.junit.Assert.assertEquals(currency35.toString(), "CNY");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency54);
// flaky:         org.junit.Assert.assertEquals(currency54.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str60, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + roundingMode76 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode76.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        double double25 = fraction24.doubleValue();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction18.divide(fraction24);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = locale31.getVariant();
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale locale36 = java.util.Locale.getDefault(category29);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.util.Locale.setDefault(category29, locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getIntegerInstance(locale37);
        java.lang.String str41 = locale37.getISO3Country();
        boolean boolean42 = locale37.hasExtensions();
        java.lang.String str43 = locale37.getVariant();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        java.lang.String str51 = locale46.getDisplayCountry(locale47);
        java.lang.String str52 = locale47.toLanguageTag();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance(locale47);
        java.lang.String str54 = locale44.getDisplayVariant(locale47);
        java.lang.String str56 = locale47.getExtension('u');
        java.lang.String str57 = locale47.getCountry();
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.setVariant("");
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale62.getISO3Language();
        boolean boolean66 = locale62.hasExtensions();
        java.util.Locale.Builder builder67 = builder60.setLocale(locale62);
        java.util.Set<java.lang.String> strSet68 = locale62.getUnicodeLocaleKeys();
        java.lang.String str69 = locale47.getDisplayCountry(locale62);
        java.lang.String str70 = locale37.getDisplayCountry(locale62);
        boolean boolean71 = fraction24.equals((java.lang.Object) locale37);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 117.0d + "'", double25 == 117.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 117L + "'", long26 == 117L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ko" + "'", str52, "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        int int23 = fraction22.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction26 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction10.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) '#', (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction28.multiply(fraction31);
        float float33 = fraction32.floatValue();
        short short34 = fraction32.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + (-43.42268f) + "'", float33 == (-43.42268f));
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) -43 + "'", short34 == (short) -43);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale6 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = locale0.getDisplayVariant(locale6);
        java.util.Set<java.lang.Character> charSet9 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals(locale6.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str7, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale7 = new java.util.Locale("java.text.ParsePosition[index=-1,errorIndex=52]", "");
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale0.getDisplayCountry(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale7.toString(), "java.text.parseposition[index=-1,errorindex=52]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction25 = fraction22.divide(fraction24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        int int28 = numberFormat27.getMinimumFractionDigits();
        java.lang.String str30 = numberFormat27.format((double) (byte) -1);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getNumberInstance(locale32);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        numberFormat35.setCurrency(currency39);
        numberFormat34.setCurrency(currency39);
        boolean boolean42 = numberFormat34.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat34);
        boolean boolean44 = fraction24.equals((java.lang.Object) numberFormat27);
        boolean boolean45 = numberFormat27.isGroupingUsed();
        int int46 = numberFormat27.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.lang.String str49 = numberFormat27.format((double) (byte) 100);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-1" + "'", str30, "-1");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str33, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
// flaky:         org.junit.Assert.assertEquals(currency39.toString(), "CNY");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        double double10 = fraction9.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction11.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction11.abs();
        double double26 = fraction25.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction9.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((-117), (int) '4');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction35 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str40 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction39.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction36.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int59 = fraction58.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction53.add(fraction55);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction50.subtract(fraction62);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int71 = fraction70.intValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.subtract(fraction70);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction63.add(fraction67);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction48.multiply(fraction63);
        java.util.Locale locale76 = java.util.Locale.UK;
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale76.getDisplayScript(locale78);
        java.lang.String str81 = locale78.toLanguageTag();
        java.lang.String str82 = locale78.getVariant();
        boolean boolean83 = fraction75.equals((java.lang.Object) locale78);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction35.multiply(fraction75);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction75.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction75.negate();
        long long87 = fraction86.longValue();
        org.apache.commons.math.fraction.Fraction fraction88 = fraction32.subtract(fraction86);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction2.add(fraction32);
        short short90 = fraction32.shortValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 117.0d + "'", double10 == 117.0d);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-117 / 1" + "'", str40, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-117 / 1" + "'", str54, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-117) + "'", int59 == (-117));
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-117) + "'", int71 == (-117));
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ko" + "'", str81, "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 13572L + "'", long87 == 13572L);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertTrue("'" + short90 + "' != '" + (short) 113 + "'", short90 == (short) 113);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        double double14 = fraction13.doubleValue();
        boolean boolean15 = fieldPosition2.equals((java.lang.Object) fraction13);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        boolean boolean23 = fraction19.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction13.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.abs();
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.negate();
        int int29 = fraction28.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.negate();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int42 = fraction41.intValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction36.add(fraction38);
        int int45 = fraction44.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.multiply(fraction48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance();
        boolean boolean51 = numberFormat50.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50);
        boolean boolean53 = numberFormat50.isParseIntegerOnly();
        boolean boolean54 = fraction48.equals((java.lang.Object) boolean53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction33.multiply(fraction48);
        int int56 = fraction55.intValue();
        java.lang.String str57 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction55);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int62 = fraction61.intValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction58.subtract(fraction61);
        boolean boolean65 = fraction61.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction61.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction55.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction61.abs();
        boolean boolean70 = parsePosition32.equals((java.lang.Object) fraction69);
        org.apache.commons.math.fraction.Fraction fraction74 = new org.apache.commons.math.fraction.Fraction((double) (-0.028571429f), (double) 100L, 9);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.divide(fraction74);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction30.add(fraction77);
        java.util.Locale.Category category79 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.lang.String str82 = locale80.getDisplayLanguage(locale81);
        java.lang.String str83 = locale81.getScript();
        java.lang.String str84 = locale81.getVariant();
        java.util.Locale.setDefault(category79, locale81);
        java.util.Locale locale86 = java.util.Locale.getDefault(category79);
        java.util.Locale locale87 = java.util.Locale.UK;
        java.util.Locale.setDefault(category79, locale87);
        java.util.Locale locale89 = java.util.Locale.getDefault(category79);
        java.text.NumberFormat numberFormat90 = java.text.NumberFormat.getCurrencyInstance(locale89);
        org.apache.commons.math.fraction.FractionFormat fractionFormat91 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale89);
        boolean boolean92 = fraction78.equals((java.lang.Object) fractionFormat91);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.008547008547008548d) + "'", double14 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "117 / 1" + "'", str27, "117 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-117 / 1" + "'", str37, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-117) + "'", int42 == (-117));
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 / 35" + "'", str57, "-1 / 35");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-117) + "'", int62 == (-117));
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category79.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str82, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_GB");
        org.junit.Assert.assertNotNull(numberFormat90);
        org.junit.Assert.assertNotNull(fractionFormat91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction7.add(fraction9);
        int int16 = fraction15.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction15.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction4.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int34 = fraction33.intValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.subtract(fraction33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale40, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        boolean boolean50 = fraction35.equals((java.lang.Object) localeList49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction4.divide(fraction35);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction55.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction54.multiply(fraction55);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str75 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction74);
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int80 = fraction79.intValue();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction76.subtract(fraction79);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction74.add(fraction76);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction74.abs();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction71.subtract(fraction83);
        org.apache.commons.math.fraction.Fraction fraction87 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction88 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction91 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int92 = fraction91.intValue();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction88.subtract(fraction91);
        org.apache.commons.math.fraction.Fraction fraction94 = fraction87.multiply(fraction88);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction84.add(fraction88);
        double double96 = fraction84.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction97 = fraction69.multiply(fraction84);
        org.apache.commons.math.fraction.Fraction fraction98 = fraction51.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction99 = fraction98.reciprocal();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-117 / 1" + "'", str8, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-117) + "'", int34 == (-117));
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-117 / 1" + "'", str75, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-117) + "'", int80 == (-117));
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-117) + "'", int92 == (-117));
        org.junit.Assert.assertNotNull(fraction93);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-116.0d) + "'", double96 == (-116.0d));
        org.junit.Assert.assertNotNull(fraction97);
        org.junit.Assert.assertNotNull(fraction98);
        org.junit.Assert.assertNotNull(fraction99);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.NumberFormat$Field(fraction)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.numberformat$field(fraction)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Locale.Builder builder20 = builder12.setLocale(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("anglais");
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale28.getDisplayName(locale30);
        java.lang.String str32 = locale25.getDisplayLanguage(locale30);
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale35 = new java.util.Locale("2");
        java.util.Locale.setDefault(category0, locale35);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "coreano" + "'", str31, "coreano");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "anglais" + "'", str32, "anglais");
        org.junit.Assert.assertEquals(locale35.toString(), "2");
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction37 = properFractionFormat32.parse("France");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"France\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\244117.00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?117.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 10, (double) 10, 3);
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field4, (int) (short) 0);
        java.lang.String str7 = fieldPosition6.toString();
        java.lang.String str8 = fieldPosition6.toString();
        fieldPosition6.setBeginIndex((int) (byte) 10);
        fieldPosition6.setBeginIndex((int) '4');
        boolean boolean14 = fieldPosition6.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field15 = fieldPosition6.getFieldAttribute();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field15, 10);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.negate();
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((double) 1);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction24.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction19.subtract(fraction24);
        boolean boolean30 = fieldPosition17.equals((java.lang.Object) fraction19);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction3.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str7, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str8, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10 / 1" + "'", str22, "10 / 1");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10 / 1" + "'", str31, "10 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        parsePosition43.setErrorIndex((int) (byte) 1);
        java.lang.Object obj46 = fractionFormat40.parseObject("United Kingdom", parsePosition43);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance(locale48);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        numberFormat51.setCurrency(currency55);
        numberFormat50.setCurrency(currency55);
        fractionFormat40.setNumeratorFormat(numberFormat50);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance();
        numberFormat60.setMaximumIntegerDigits((-1));
        java.util.Currency currency63 = numberFormat60.getCurrency();
        numberFormat59.setCurrency(currency63);
        numberFormat50.setCurrency(currency63);
        numberFormat0.setCurrency(currency63);
        numberFormat0.setMaximumIntegerDigits((int) (short) -117);
        java.math.RoundingMode roundingMode69 = numberFormat0.getRoundingMode();
        java.util.Currency currency70 = numberFormat0.getCurrency();
        int int71 = numberFormat0.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode69 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode69.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale1);
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = locale1.getDisplayCountry(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat5.setCurrency(currency12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        java.lang.String str20 = numberFormat15.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat5, numberFormat15);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        properFractionFormat21.setWholeFormat(numberFormat22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        java.lang.String str28 = numberFormat26.format(100L);
        int int29 = numberFormat26.getMinimumFractionDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale31);
        java.lang.String str35 = numberFormat33.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat26, numberFormat33);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        numberFormat37.setMaximumIntegerDigits((int) (short) 100);
        numberFormat37.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        java.math.RoundingMode roundingMode45 = numberFormat37.getRoundingMode();
        numberFormat33.setRoundingMode(roundingMode45);
        numberFormat0.setRoundingMode(roundingMode45);
        java.math.RoundingMode roundingMode48 = numberFormat0.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number50 = numberFormat0.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0%" + "'", str20, "0%");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "32" + "'", str35, "32");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj7 = numberFormat3.parseObject("hi!", parsePosition6);
        java.lang.Object obj8 = numberFormat1.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition6);
        java.lang.String str10 = numberFormat1.format((double) 'x');
        numberFormat1.setMinimumIntegerDigits(1);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((-1));
        boolean boolean15 = numberFormat1.equals((java.lang.Object) fieldPosition14);
        java.text.Format.Field field16 = fieldPosition14.getFieldAttribute();
        java.text.Format.Field field17 = fieldPosition14.getFieldAttribute();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "120" + "'", str10, "120");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(field16);
        org.junit.Assert.assertNull(field17);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) -116);
        org.apache.commons.math.fraction.Fraction fraction19 = new org.apache.commons.math.fraction.Fraction((double) 100.0f, 10.0d, 2147483647);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int25 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction24);
        boolean boolean28 = fraction24.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction24.add(fraction39);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        int int42 = fraction15.compareTo((java.lang.Object) fraction40);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int51 = fraction50.intValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction45.add(fraction47);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction47);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction15.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction11.subtract(fraction55);
        int int57 = fraction56.getDenominator();
        byte byte58 = fraction56.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-117) + "'", int25 == (-117));
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-117 / 1" + "'", str46, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-117) + "'", int51 == (-117));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0 / 1" + "'", str54, "0 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 117 + "'", byte58 == (byte) 117);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = locale9.getDisplayName(locale16);
        java.lang.String str20 = locale16.getScript();
        java.lang.String str21 = locale0.getDisplayName(locale16);
        java.lang.String str22 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale17 = new java.util.Locale("1 / 1", "java.text.ParseException: java.text.ParseException: 100");
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = locale20.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str26 = locale23.getDisplayName(locale24);
        java.lang.String str27 = locale20.getDisplayName(locale24);
        boolean boolean28 = locale20.hasExtensions();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale20);
        java.lang.String str30 = locale17.getDisplayLanguage(locale20);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Set<java.lang.String> strSet37 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale33.getDisplayScript(locale35);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale33.getDisplayVariant(locale39);
        java.lang.String str41 = locale33.getISO3Language();
        java.lang.String str42 = locale33.getScript();
        java.util.Locale.setDefault(category0, locale33);
        java.util.Set<java.lang.Character> charSet44 = locale33.getExtensionKeys();
        java.lang.Object obj45 = locale33.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale17.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cor\351en" + "'", str27, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "ko");
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.math.RoundingMode roundingMode33 = numberFormat22.getRoundingMode();
        numberFormat22.setMinimumIntegerDigits((int) (byte) -116);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat40 = fractionFormat39.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.util.Currency currency45 = numberFormat42.getCurrency();
        numberFormat41.setCurrency(currency45);
        numberFormat40.setCurrency(currency45);
        java.math.RoundingMode roundingMode48 = numberFormat40.getRoundingMode();
        numberFormat37.setRoundingMode(roundingMode48);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(9);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat5 = fractionFormat4.getNumeratorFormat();
        boolean boolean6 = parsePosition1.equals((java.lang.Object) numberFormat5);
        boolean boolean7 = numberFormat5.isParseIntegerOnly();
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        java.lang.String str17 = numberFormat10.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat10, numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 10);
        parsePosition23.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction26 = properFractionFormat20.parse("fran\347ais", parsePosition23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        boolean boolean32 = parsePosition23.equals((java.lang.Object) fractionFormat31);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale40 = java.util.Locale.getDefault(category33);
        boolean boolean41 = parsePosition23.equals((java.lang.Object) locale40);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale40);
        java.util.Locale.setDefault(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat5.formatToCharacterIterator((java.lang.Object) locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str3, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fractionFormat42);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.lang.String str20 = locale6.getDisplayCountry();
        java.lang.String str21 = locale2.getDisplayVariant(locale6);
        java.lang.String str22 = locale0.getDisplayVariant(locale6);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale locale30 = java.util.Locale.getDefault(category23);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.util.Locale.setDefault(category23, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category23);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        java.lang.String str35 = locale6.getDisplayCountry(locale33);
        java.lang.String str36 = locale6.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale locale19 = builder18.build();
        java.util.Locale locale20 = builder18.build();
        java.util.Locale.Builder builder22 = builder18.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder18.setRegion("JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        numberFormat14.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat14);
        numberFormat14.setGroupingUsed(true);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.text.NumberFormat numberFormat23 = fractionFormat21.getNumeratorFormat();
        int int24 = numberFormat23.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        numberFormat29.setCurrency(currency33);
        numberFormat26.setCurrency(currency33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        java.lang.String str41 = numberFormat36.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat26, numberFormat36);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance();
        java.lang.String str46 = numberFormat44.format(100L);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj52 = numberFormat48.parseObject("hi!", parsePosition51);
        java.lang.Number number53 = numberFormat44.parse("10,000%", parsePosition51);
        int int54 = parsePosition51.getErrorIndex();
        java.lang.Object obj55 = properFractionFormat42.parseObject("French", parsePosition51);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale57);
        java.text.NumberFormat numberFormat60 = fractionFormat59.getNumeratorFormat();
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 10);
        parsePosition63.setErrorIndex((int) (byte) 1);
        parsePosition63.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction68 = fractionFormat59.parse("French", parsePosition63);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat42.parse("", parsePosition63);
        java.text.NumberFormat numberFormat70 = properFractionFormat42.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat70);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat23);
        java.lang.Number number74 = numberFormat14.parse("-13,572 / 1");
        numberFormat14.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0%" + "'", str41, "0%");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fran\347ais" + "'", str58, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNull(fraction68);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + number74 + "' != '" + (-13L) + "'", number74, (-13L));
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.lang.String str16 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais" + "'", str2, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str16, "java.text.NumberFormat$Field(percent)");
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        int int18 = numberFormat17.getMinimumFractionDigits();
        numberFormat17.setParseIntegerOnly(false);
        int int21 = numberFormat17.getMaximumIntegerDigits();
        numberFormat17.setMaximumFractionDigits(100);
        numberFormat17.setMaximumIntegerDigits(0);
        boolean boolean26 = field0.equals((java.lang.Object) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getNumeratorFormat();
        java.text.NumberFormat numberFormat29 = fractionFormat27.getNumeratorFormat();
        java.text.ParseException parseException32 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray33 = parseException32.getSuppressed();
        boolean boolean34 = numberFormat29.equals((java.lang.Object) throwableArray33);
        numberFormat29.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        boolean boolean38 = field0.equals((java.lang.Object) properFractionFormat37);
        java.text.NumberFormat numberFormat39 = properFractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        numberFormat44.setCurrency(currency48);
        numberFormat41.setCurrency(currency48);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.util.Currency currency54 = numberFormat51.getCurrency();
        java.lang.String str56 = numberFormat51.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat41, numberFormat51);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance();
        java.lang.String str60 = numberFormat58.format(100L);
        properFractionFormat57.setWholeFormat(numberFormat58);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance();
        java.lang.String str64 = numberFormat62.format(100L);
        int int65 = numberFormat62.getMinimumFractionDigits();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale66.getDisplayLanguage(locale67);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getNumberInstance(locale67);
        java.lang.String str71 = numberFormat69.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat62, numberFormat69);
        java.math.RoundingMode roundingMode73 = numberFormat62.getRoundingMode();
        int int74 = numberFormat62.getMinimumIntegerDigits();
        properFractionFormat37.setWholeFormat(numberFormat62);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = locale77.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale77);
        java.text.NumberFormat numberFormat80 = fractionFormat79.getDenominatorFormat();
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction84 = fractionFormat79.parse("french", parsePosition83);
        int int85 = parsePosition83.getIndex();
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat37.parse("14_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100_french-French", parsePosition83);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais" + "'", str2, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0%" + "'", str56, "0%");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str68, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "32" + "'", str71, "32");
        org.junit.Assert.assertTrue("'" + roundingMode73 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode73.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fran\347ais" + "'", str78, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNull(fraction86);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 113, 4094);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean86 = parsePosition10.equals((java.lang.Object) languageRangeList12);
        java.lang.Object obj87 = numberFormat7.parseObject("kor", parsePosition10);
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.lang.String str90 = locale88.getDisplayLanguage(locale89);
        java.text.NumberFormat numberFormat91 = java.text.NumberFormat.getNumberInstance(locale89);
        java.text.NumberFormat numberFormat92 = java.text.NumberFormat.getIntegerInstance(locale89);
        numberFormat92.setParseIntegerOnly(false);
        boolean boolean95 = numberFormat7.equals((java.lang.Object) false);
        java.lang.String str97 = numberFormat7.format((double) 96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str90, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat91);
        org.junit.Assert.assertNotNull(numberFormat92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\244 96.00" + "'", str97, "\244 96.00");
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale44, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        boolean boolean54 = fraction39.equals((java.lang.Object) localeList53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction39.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        boolean boolean63 = fraction59.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction59.reciprocal();
        double double65 = fraction64.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction39.multiply(fraction64);
        java.lang.String str67 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction39);
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition(1);
        java.text.Format.Field field71 = fieldPosition70.getFieldAttribute();
        int int72 = fieldPosition70.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer73 = properFractionFormat17.format(fraction39, stringBuffer68, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.008547008547008548d) + "'", double65 == (-0.008547008547008548d));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "117 / 1" + "'", str67, "117 / 1");
        org.junit.Assert.assertNull(field71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getLanguage();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setVariant("");
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale26.getDisplayLanguage(locale31);
        java.util.Locale.Builder builder33 = builder23.setLocale(locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getIntegerInstance(locale31);
        boolean boolean36 = numberFormat35.isParseIntegerOnly();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u52a0\u62ff\u5927" + "'", str16, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CAN" + "'", str18, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587" + "'", str32, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder18.setUnicodeLocaleKeyword("\u671d\u9c9c\u6587", "-13.572");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale19, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        java.lang.String[] strArray36 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList37);
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList37);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Collection<java.util.Locale> localeCollection44 = null;
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, localeCollection44, filteringMode45);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, localeCollection44);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap52);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int58 = fraction57.intValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction54.subtract(fraction57);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale64.getScript();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale64, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        boolean boolean74 = fraction59.equals((java.lang.Object) localeList73);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap78);
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray83 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList84 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList84, languageRangeArray83);
        java.util.Collection<java.util.Locale> localeCollection86 = null;
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList84, localeCollection86, filteringMode87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList79, (java.util.Collection<java.lang.String>) strSet82, filteringMode87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap90);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode45.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-117) + "'", int58 == (-117));
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u6cd5\u6587" + "'", str81, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(languageRangeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode87.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(languageRangeList91);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        int int5 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        java.lang.String str17 = numberFormat10.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat19 = fractionFormat18.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat10, numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 10);
        parsePosition23.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction26 = properFractionFormat20.parse("fran\347ais", parsePosition23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        boolean boolean32 = parsePosition23.equals((java.lang.Object) fractionFormat31);
        java.lang.Object obj33 = numberFormat0.parseObject("0 / 1", parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        boolean boolean38 = parsePosition23.equals((java.lang.Object) fraction36);
        parsePosition23.setIndex(3);
        int int41 = parsePosition23.getErrorIndex();
        parsePosition23.setIndex(0);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        numberFormat35.setCurrency(currency39);
        numberFormat32.setCurrency(currency39);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.util.Currency currency45 = numberFormat42.getCurrency();
        java.lang.String str47 = numberFormat42.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat32, numberFormat42);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance();
        java.lang.String str51 = numberFormat49.format(100L);
        properFractionFormat48.setWholeFormat(numberFormat49);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        int int56 = numberFormat53.getMinimumFractionDigits();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale58);
        java.lang.String str62 = numberFormat60.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49, numberFormat53, numberFormat60);
        java.text.NumberFormat numberFormat64 = properFractionFormat63.getWholeFormat();
        java.text.NumberFormat numberFormat65 = properFractionFormat63.getWholeFormat();
        numberFormat65.setMaximumFractionDigits(0);
        properFractionFormat17.setWholeFormat(numberFormat65);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        properFractionFormat17.setNumeratorFormat(numberFormat70);
        java.text.NumberFormat numberFormat72 = properFractionFormat17.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.text.NumberFormat numberFormat74 = properFractionFormat73.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = numberFormat74.parseObject("Japanisch");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0%" + "'", str47, "0%");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "32" + "'", str62, "32");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(numberFormat74);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", (int) (byte) -4);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getDisplayName();
        java.util.Set<java.lang.Character> charSet8 = locale2.getExtensionKeys();
        java.lang.String str9 = locale2.getDisplayCountry();
        java.lang.String str10 = locale2.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        int int3 = fraction2.intValue();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction11.add(fraction13);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction8.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction7.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        double double49 = fraction37.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction22.multiply(fraction37);
        float float51 = fraction50.floatValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.reciprocal();
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction2.multiply(fraction52);
        short short55 = fraction52.shortValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-117 / 1" + "'", str12, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-116.0d) + "'", double49 == (-116.0d));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + (-116.0f) + "'", float51 == (-116.0f));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 / 116" + "'", str53, "-1 / 116");
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 0 + "'", short55 == (short) 0);
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction3.divide(fraction5);
        org.apache.commons.math.fraction.Fraction fraction10 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction10.divide(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction(117.0d);
        long long18 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.multiply(fraction25);
        long long27 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction19.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction6.subtract(fraction28);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 117L + "'", long18 == 117L);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 14L + "'", long27 == 14L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        boolean boolean7 = fieldPosition2.equals((java.lang.Object) fraction6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        java.lang.String str15 = numberFormat8.format((double) 100);
        numberFormat8.setParseIntegerOnly(false);
        numberFormat8.setMaximumIntegerDigits((int) 'x');
        java.lang.String str21 = numberFormat8.format((long) (short) 100);
        boolean boolean22 = fieldPosition2.equals((java.lang.Object) str21);
        fieldPosition2.setBeginIndex((int) 'x');
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.lang.String str36 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale32.getDisplayLanguage(locale37);
        java.lang.String str39 = locale26.getDisplayName(locale37);
        java.lang.String str40 = locale26.getDisplayCountry();
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale26.getDisplayName(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        boolean boolean45 = fieldPosition2.equals((java.lang.Object) fractionFormat44);
        int int46 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10,000%" + "'", str15, "10,000%");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10,000%" + "'", str21, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u671d\u9c9c\u6587" + "'", str38, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u671d\u9c9c\u6587" + "'", str39, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str42, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Korean" + "'", str43, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        java.util.Locale locale3 = new java.util.Locale("", "en-GB", "java.text.AttributedCharacterIterator$Attribute(language)");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale11.getDisplayLanguage(locale16);
        java.lang.String str18 = locale5.getDisplayName(locale16);
        java.lang.String str19 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale21 = locale5.stripExtensions();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str23 = locale3.getDisplayLanguage(locale21);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getCountry();
        java.lang.String str29 = locale25.getDisplayLanguage();
        java.lang.String str30 = locale3.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getIntegerInstance(locale25);
        org.junit.Assert.assertEquals(locale3.toString(), "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u671d\u9c9c\u6587" + "'", str17, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str30, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(numberFormat31);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        int int78 = parsePosition70.getErrorIndex();
        int int79 = parsePosition70.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction81 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        boolean boolean84 = fraction81.equals((java.lang.Object) "cor\351en");
        org.apache.commons.math.fraction.Fraction fraction85 = fraction81.reciprocal();
        boolean boolean86 = parsePosition70.equals((java.lang.Object) fraction81);
        short short87 = fraction81.shortValue();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6cd5\u6587" + "'", str65, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) -1 + "'", short87 == (short) -1);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) -1170, (int) (byte) 13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -1,170 to fraction (1,171/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getVariant();
        java.util.Locale.setDefault(category4, locale6);
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale6.getDisplayVariant(locale12);
        java.lang.String str18 = locale0.getDisplayName(locale12);
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = locale0.getDisplayLanguage(locale19);
        java.util.Locale locale21 = locale0.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.lang.String str25 = locale22.getDisplayLanguage();
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale.setDefault(category26, locale28);
        java.util.Locale locale33 = java.util.Locale.getDefault(category26);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.util.Locale.setDefault(category26, locale34);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale.setDefault(category26, locale37);
        java.util.Locale locale40 = java.util.Locale.getDefault(category26);
        java.util.Locale locale43 = new java.util.Locale("1 / 1", "java.text.ParseException: java.text.ParseException: 100");
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.util.Locale locale48 = locale46.stripExtensions();
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale49.getDisplayName(locale50);
        java.lang.String str53 = locale46.getDisplayName(locale50);
        boolean boolean54 = locale46.hasExtensions();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance(locale46);
        java.lang.String str56 = locale43.getDisplayLanguage(locale46);
        java.util.Locale.setDefault(category26, locale43);
        java.util.Locale locale58 = java.util.Locale.getDefault(category26);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale59);
        java.util.Locale.setDefault(category26, locale59);
        java.lang.String str62 = locale22.getDisplayScript(locale59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4" + "'", str25, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale43.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "cor\351en" + "'", str53, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1 / 1" + "'", str56, "1 / 1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "1 / 1_JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52);
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = locale60.getVariant();
        java.util.Locale.setDefault(category58, locale60);
        java.util.Locale locale65 = java.util.Locale.getDefault(category58);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.util.Locale.setDefault(category58, locale66);
        java.util.Locale locale69 = java.util.Locale.getDefault(category58);
        java.lang.String str70 = locale69.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = fractionFormat57.format((java.lang.Object) locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u52a0\u62ff\u5927" + "'", str1, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fran\347ais" + "'", str70, "fran\347ais");
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        boolean boolean7 = fieldPosition2.equals((java.lang.Object) fraction6);
        java.text.Format.Field field8 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(field8, 97);
        int int11 = fieldPosition10.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) '4', 2147483647);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int27 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction18.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction7.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int37 = fraction36.intValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction33.subtract(fraction36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getScript();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        boolean boolean53 = fraction38.equals((java.lang.Object) localeList52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction7.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction2.subtract(fraction55);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-117) + "'", int27 == (-117));
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-117) + "'", int37 == (-117));
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((-0.008547008547008548d), (double) 4095, (int) '4');
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        float float7 = fraction6.floatValue();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        boolean boolean15 = fraction11.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        double double24 = fraction23.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction11.divide(fraction23);
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction6.divide(fraction25);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction3.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((double) (byte) -32, (double) 32L, (-35));
        // The following exception was thrown during execution in test generation
        try {
            int int33 = fraction28.compareTo((java.lang.Object) 32L);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + (-97.0f) + "'", float7 == (-97.0f));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 117.0d + "'", double24 == 117.0d);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1 / 1" + "'", str26, "-1 / 1");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setGroupingUsed(true);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat12 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat11.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat11.getNumeratorFormat();
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field17, (int) (short) 0);
        java.lang.String str20 = fieldPosition19.toString();
        java.lang.String str21 = fieldPosition19.toString();
        fieldPosition19.setBeginIndex((int) (byte) 10);
        int int24 = fieldPosition19.getBeginIndex();
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getVariant();
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getNumberInstance(locale56);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale61.getScript();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale65.getScript();
        java.lang.String str68 = locale65.getVariant();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale42, locale46, locale47, locale51, locale53, locale56, locale59, locale61, locale65 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getScript();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale76, locale79, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList70, filteringMode84);
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = locale87.getDisplayLanguage(locale88);
        java.util.Locale locale90 = java.util.Locale.ITALIAN;
        java.lang.String str91 = locale88.getDisplayName(locale90);
        java.util.Locale.setDefault(locale90);
        java.util.Set<java.lang.String> strSet93 = locale90.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet93);
        boolean boolean95 = fieldPosition19.equals((java.lang.Object) languageRangeList28);
        int int96 = fieldPosition19.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer97 = numberFormat14.format((long) (byte) 10, stringBuffer16, fieldPosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str21, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str89, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "coreano" + "'", str91, "coreano");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("\ud504\ub791\uc2a4\uc5b4");
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.util.Set<java.lang.Character> charSet9 = locale6.getExtensionKeys();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = builder13.build();
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.lang.String str16 = locale6.getDisplayLanguage(locale14);
        java.lang.String str17 = locale2.getDisplayCountry(locale6);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale25 = java.util.Locale.getDefault(category18);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.util.Locale.setDefault(category18, locale26);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder32 = builder31.clear();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        boolean boolean37 = locale33.hasExtensions();
        java.util.Locale.Builder builder38 = builder31.setLocale(locale33);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale33);
        java.util.Locale locale40 = locale33.stripExtensions();
        java.util.Locale.setDefault(category18, locale40);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.lang.String str46 = locale44.getScript();
        java.lang.String str47 = locale44.getVariant();
        java.util.Locale.setDefault(category42, locale44);
        java.lang.String str49 = locale44.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale50.getDisplayScript();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = locale50.getDisplayCountry(locale53);
        java.lang.String str55 = locale44.getDisplayVariant(locale50);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale57.getDisplayName(locale59);
        java.util.Locale.setDefault(locale59);
        java.lang.String str62 = locale44.getDisplayLanguage(locale59);
        java.util.Locale.setDefault(category18, locale59);
        java.lang.String str64 = locale59.toLanguageTag();
        java.lang.String str65 = locale2.getDisplayCountry(locale59);
        java.util.Set<java.lang.String> strSet66 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals(locale6.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "United Kingdom" + "'", str54, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "coreano" + "'", str60, "coreano");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "coreano" + "'", str62, "coreano");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "it" + "'", str64, "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.String str9 = languageRange1.getRange();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category10);
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Locale.setDefault(category10, locale21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category10);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.lang.String str29 = locale25.getCountry();
        java.lang.String str30 = locale25.getVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.util.Locale.setDefault(category10, locale25);
        java.util.Locale locale33 = java.util.Locale.getDefault(category10);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getISO3Language();
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale.setDefault(category38, locale40);
        java.lang.String str45 = locale40.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = locale46.getDisplayScript();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale46.getDisplayCountry(locale49);
        java.lang.String str51 = locale40.getDisplayVariant(locale46);
        java.lang.String str52 = locale34.getDisplayName(locale46);
        java.util.Locale locale53 = java.util.Locale.US;
        java.lang.String str54 = locale34.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getDisplayLanguage();
        java.lang.String str56 = locale53.getCountry();
        java.util.Locale.setDefault(category10, locale53);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale60.toLanguageTag();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale65.getScript();
        java.lang.String str68 = locale65.getCountry();
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getNumberInstance(locale65);
        java.lang.String str70 = locale60.getDisplayLanguage(locale65);
        java.util.Locale.setDefault(category10, locale60);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale73.getDisplayCountry();
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.util.Locale.setDefault(category10, locale73);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.util.Locale locale80 = locale78.stripExtensions();
        java.util.Locale locale81 = locale80.stripExtensions();
        java.lang.String str82 = locale80.getISO3Country();
        java.lang.String str83 = locale80.getDisplayName();
        java.util.Locale locale85 = new java.util.Locale("java.text.ParsePosition[index=-1,errorIndex=10]");
        java.lang.String str86 = locale80.getDisplayCountry(locale85);
        java.util.Locale.setDefault(category10, locale85);
        java.util.Locale locale89 = new java.util.Locale("French");
        java.util.Locale locale90 = java.util.Locale.TAIWAN;
        java.lang.String str91 = locale90.getDisplayScript();
        java.lang.String str92 = locale89.getDisplayScript(locale90);
        java.util.Locale.setDefault(category10, locale89);
        boolean boolean94 = languageRange1.equals((java.lang.Object) category10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "can" + "'", str3, "can");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "can" + "'", str6, "can");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "can" + "'", str7, "can");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "can" + "'", str8, "can");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "can" + "'", str9, "can");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "United Kingdom" + "'", str50, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc601\uc5b4" + "'", str55, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "US" + "'", str56, "US");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uce90\ub098\ub2e4" + "'", str74, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "China" + "'", str75, "China");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Korean" + "'", str83, "Korean");
        org.junit.Assert.assertEquals(locale85.toString(), "java.text.parseposition[index=-1,errorindex=10]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals(locale89.toString(), "french");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (byte) 3, (int) (short) 4369);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 3 to fraction (9,223,372,036,854,775,806/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("francese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: francese (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = fractionFormat4.getNumeratorFormat();
        java.text.AttributedCharacterIterator.Attribute attribute6 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        boolean boolean9 = attribute6.equals((java.lang.Object) numberFormat8);
        int int10 = numberFormat8.getMinimumIntegerDigits();
        fractionFormat4.setNumeratorFormat(numberFormat8);
        java.text.NumberFormat numberFormat12 = fractionFormat4.getNumeratorFormat();
        boolean boolean13 = numberFormat12.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(attribute6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        java.util.Locale locale1 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertEquals(locale1.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction6.add(fraction8);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction3.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int26 = fraction25.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.add(fraction22);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction17.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction30.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction15.multiply(fraction30);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = locale45.getVariant();
        boolean boolean50 = fraction42.equals((java.lang.Object) locale45);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction2.multiply(fraction42);
        int int52 = fraction51.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int57 = fraction56.intValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction53.subtract(fraction56);
        double double59 = fraction58.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int69 = fraction68.intValue();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction65.subtract(fraction68);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction63.add(fraction65);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction60.subtract(fraction72);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction60.abs();
        double double75 = fraction74.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction58.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction51.multiply(fraction58);
        double double78 = fraction58.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction58.reciprocal();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-117 / 1" + "'", str7, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-117 / 1" + "'", str21, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-117) + "'", int26 == (-117));
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str46, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-117) + "'", int57 == (-117));
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 117.0d + "'", double59 == 117.0d);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-117 / 1" + "'", str64, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-117) + "'", int69 == (-117));
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 117.0d + "'", double78 == 117.0d);
        org.junit.Assert.assertNotNull(fraction79);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder15 = builder4.setLanguage("en");
        java.util.Locale locale16 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder4.setRegion("-NT$117.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -NT$117.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 1L, (double) (byte) 10, 0);
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.multiply(fraction7);
        int int10 = fraction9.getNumerator();
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = builder3.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        org.apache.commons.math.fraction.Fraction fraction8 = fractionFormat6.parse("-97");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale21.getDisplayLanguage(locale26);
        java.lang.String str28 = locale15.getDisplayName(locale26);
        java.util.Locale.Builder builder29 = builder11.setLocale(locale15);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale.Builder builder33 = builder11.setLocale(locale31);
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.NumberFormat.Field field35 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str36 = field35.toString();
        java.lang.String str37 = field35.toString();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        numberFormat39.setCurrency(currency46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        numberFormat49.setMaximumIntegerDigits((-1));
        java.util.Currency currency52 = numberFormat49.getCurrency();
        java.lang.String str54 = numberFormat49.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat39, numberFormat49);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance();
        java.lang.String str58 = numberFormat56.format(100L);
        properFractionFormat55.setWholeFormat(numberFormat56);
        java.text.NumberFormat numberFormat60 = properFractionFormat55.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60);
        boolean boolean62 = field35.equals((java.lang.Object) numberFormat60);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field35);
        java.text.Format.Field field64 = fieldPosition63.getFieldAttribute();
        int int65 = fieldPosition63.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = fractionFormat6.format((java.lang.Object) builder11, stringBuffer34, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u671d\u9c9c\u6587" + "'", str27, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u671d\u9c9c\u6587" + "'", str28, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(field35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str36, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str37, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0%" + "'", str54, "0%");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        java.util.Locale locale2 = new java.util.Locale("Korean (South Korea)", "java.text.ParsePosition[index=-1,errorIndex=117]");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 10);
        parsePosition10.setErrorIndex((int) (byte) 1);
        java.lang.Object obj13 = fractionFormat7.parseObject("United Kingdom", parsePosition10);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj18 = numberFormat14.parseObject("hi!", parsePosition17);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        fractionFormat5.setDenominatorFormat(numberFormat14);
        java.text.NumberFormat numberFormat21 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat5.getDenominatorFormat();
        java.math.RoundingMode roundingMode23 = numberFormat22.getRoundingMode();
        numberFormat3.setRoundingMode(roundingMode23);
        java.lang.String str26 = numberFormat3.format((-1357200L));
        org.junit.Assert.assertEquals(locale2.toString(), "korean (south korea)_JAVA.TEXT.PARSEPOSITION[INDEX=-1,ERRORINDEX=117]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1,357,200" + "'", str26, "-1,357,200");
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("-.686");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-.686");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field4, (int) (short) 0);
        int int7 = fieldPosition6.getEndIndex();
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray11 = parseException10.getSuppressed();
        int int12 = parseException10.getErrorOffset();
        boolean boolean13 = fieldPosition6.equals((java.lang.Object) parseException10);
        java.text.ParseException parseException16 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int17 = parseException16.getErrorOffset();
        parseException10.addSuppressed((java.lang.Throwable) parseException16);
        parseException2.addSuppressed((java.lang.Throwable) parseException10);
        java.lang.String str20 = parseException10.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str20, "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.math.RoundingMode roundingMode6 = numberFormat5.getRoundingMode();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        numberFormat25.setCurrency(currency29);
        numberFormat22.setCurrency(currency29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21, numberFormat22, numberFormat32);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance();
        java.lang.String str41 = numberFormat39.format(100L);
        properFractionFormat38.setWholeFormat(numberFormat39);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance();
        java.lang.String str45 = numberFormat43.format(100L);
        int int46 = numberFormat43.getMinimumFractionDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance(locale48);
        java.lang.String str52 = numberFormat50.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat43, numberFormat50);
        java.text.NumberFormat numberFormat54 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat55 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat56 = properFractionFormat53.getWholeFormat();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        java.lang.String str64 = numberFormat57.format((double) 100);
        properFractionFormat53.setWholeFormat(numberFormat57);
        fractionFormat19.setNumeratorFormat(numberFormat57);
        java.text.NumberFormat numberFormat67 = fractionFormat19.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "100" + "'", str41, "100");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "32" + "'", str52, "32");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "10.000%" + "'", str64, "10.000%");
        org.junit.Assert.assertNotNull(numberFormat67);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setVariant("Canada");
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.getDisplayVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Canada" + "'", str7, "Canada");
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder56.setScript("java.text.ParsePosition[index=120,errorIndex=-1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.ParsePosition[index=120,errorIndex=-1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setUnicodeLocaleKeyword("-409,600%", "0 % / 0 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: -409,600% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale4);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj10 = numberFormat0.parseObject("China", parsePosition9);
        int int11 = parsePosition9.getIndex();
        parsePosition9.setErrorIndex(315);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale22 = java.util.Locale.getDefault(category15);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.util.Locale.setDefault(category15, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault(category15);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale26);
        java.util.Locale.setDefault(category15, locale26);
        java.util.Locale locale31 = new java.util.Locale("zh_TW");
        java.util.Locale.setDefault(category15, locale31);
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field33, (int) (short) 0);
        int int36 = fieldPosition35.getEndIndex();
        java.text.ParseException parseException39 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray40 = parseException39.getSuppressed();
        int int41 = parseException39.getErrorOffset();
        boolean boolean42 = fieldPosition35.equals((java.lang.Object) parseException39);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.setVariant("");
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        boolean boolean51 = locale47.hasExtensions();
        java.util.Locale.Builder builder52 = builder45.setLocale(locale47);
        java.util.Locale.Builder builder53 = builder52.clear();
        boolean boolean54 = fieldPosition35.equals((java.lang.Object) builder53);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale57.getVariant();
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale62 = java.util.Locale.getDefault(category55);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.util.Locale.setDefault(category55, locale63);
        java.util.Locale locale66 = java.util.Locale.getDefault(category55);
        java.util.Locale.Builder builder67 = builder53.setLocale(locale66);
        java.util.Locale.Builder builder68 = builder53.clear();
        java.util.Locale.Builder builder70 = builder68.setLanguageTag("DEU");
        java.util.Locale.Builder builder72 = builder70.setVariant("Korean");
        java.util.Locale locale73 = builder72.build();
        java.util.Locale.setDefault(category15, locale73);
        java.util.Locale.Builder builder75 = builder14.setLocale(locale73);
        java.util.Locale.Builder builder76 = builder14.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "kor" + "'", str50, "kor");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "deu__Korean");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale6 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = locale0.getDisplayVariant(locale6);
        java.lang.String str9 = locale6.getDisplayCountry();
        java.lang.String str10 = locale6.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.lang.String str17 = locale12.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.lang.String str19 = locale12.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale locale25 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=32]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        java.lang.String str26 = locale21.getDisplayVariant(locale25);
        java.lang.String str27 = locale12.getDisplayScript(locale25);
        java.lang.String str28 = locale6.getDisplayLanguage(locale12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertEquals(locale6.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str7, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko" + "'", str17, "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale25.toString(), "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=10,endindex=32]_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str28, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("de-DE");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.util.Locale locale6 = locale4.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale7.getDisplayName(locale8);
        java.lang.String str11 = locale4.getDisplayName(locale8);
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale.setDefault(category12, locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String str21 = locale20.getDisplayScript();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale20.getDisplayCountry(locale23);
        java.lang.String str25 = locale14.getDisplayVariant(locale20);
        java.lang.String str26 = locale8.getDisplayVariant(locale14);
        java.lang.String str27 = locale1.getDisplayName(locale14);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str2, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cor\351en" + "'", str11, "cor\351en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United Kingdom" + "'", str24, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str27, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0, (double) '4', 2);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 10, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction6.divide(fraction9);
        float float11 = fraction6.floatValue();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction12 = fraction2.divide(fraction6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The fraction to divide by must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-4), (double) 4095, 4);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(32, (int) (byte) 97);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction7.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction3.multiply(fraction18);
        int int21 = fraction20.intValue();
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 468 + "'", int21 == 468);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("French");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "french");
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.negate();
        double double8 = fraction7.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 97, 100);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction9.divide(fraction12);
        byte byte14 = fraction12.byteValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-117.0d) + "'", double8 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setLanguage("4,212 / 97");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 4,212 / 97 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance();
        java.lang.String str38 = numberFormat36.format(100L);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj44 = numberFormat40.parseObject("hi!", parsePosition43);
        java.lang.Number number45 = numberFormat36.parse("10,000%", parsePosition43);
        java.lang.String str47 = numberFormat36.format((java.lang.Object) 0.0f);
        properFractionFormat32.setNumeratorFormat(numberFormat36);
        numberFormat36.setParseIntegerOnly(false);
        java.lang.String str52 = numberFormat36.format((double) 3);
        numberFormat36.setGroupingUsed(true);
        int int55 = numberFormat36.getMaximumFractionDigits();
        boolean boolean56 = numberFormat36.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100" + "'", str38, "100");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "3" + "'", str52, "3");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale.Builder builder7 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setUnicodeLocaleKeyword("java.text.ParsePosition[index=52,errorIndex=52]", "Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.ParsePosition[index=52,errorIndex=52] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uce90\ub098\ub2e4", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction7.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction7.abs();
        double double22 = fraction21.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction5.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction5.subtract(fraction37);
        int int50 = fraction49.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int59 = fraction58.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction53.add(fraction55);
        int int62 = fraction61.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction49.subtract(fraction61);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-117 / 1" + "'", str54, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-117) + "'", int59 == (-117));
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        boolean boolean15 = fraction13.equals((java.lang.Object) "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=97]");
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat2.equals((java.lang.Object) numberFormat4);
        numberFormat2.setMaximumFractionDigits((-116));
        java.math.RoundingMode roundingMode8 = numberFormat2.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = numberFormat2.parseObject("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u52a0\u62ff\u5927" + "'", str1, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        numberFormat0.setParseIntegerOnly(false);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str11 = field10.toString();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale12);
        boolean boolean15 = field10.equals((java.lang.Object) numberFormat14);
        java.lang.Object obj16 = numberFormat14.clone();
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.lang.String str29 = numberFormat18.format((double) 1);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = locale30.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat14, numberFormat18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = numberFormat18.parseObject("java.text.ParseException: -13,572");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10.000%" + "'", str7, "10.000%");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str11, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "EUR");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u97d3\u6587" + "'", str36, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        java.util.Locale locale3 = new java.util.Locale("-11,600%", "", "117 / 10");
        org.junit.Assert.assertEquals(locale3.toString(), "-11,600%__117 / 10");
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str20 = field19.toString();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale21);
        boolean boolean24 = field19.equals((java.lang.Object) numberFormat23);
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = field25.equals(obj26);
        boolean boolean28 = field19.equals((java.lang.Object) field25);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field19, (int) (byte) 100);
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field19, (int) (short) 100);
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field19);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = numberFormat16.format((long) 3, stringBuffer18, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str20, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.lang.String str9 = locale1.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        numberFormat11.setMinimumIntegerDigits(3);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat14.setCurrency(currency18);
        java.lang.String str21 = numberFormat14.format((double) 100);
        numberFormat14.setParseIntegerOnly(false);
        numberFormat14.setMaximumIntegerDigits((int) 'x');
        java.lang.Object obj26 = numberFormat14.clone();
        java.util.Currency currency27 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency27);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = locale31.getVariant();
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale locale36 = java.util.Locale.getDefault(category29);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.util.Locale.setDefault(category29, locale37);
        java.util.Locale locale43 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category29, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault(category29);
        java.util.Locale locale46 = java.util.Locale.getDefault(category29);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.lang.String str49 = locale46.getDisplayName();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale46);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale52.getScript();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale52);
        numberFormat55.setGroupingUsed(true);
        numberFormat55.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance();
        numberFormat60.setGroupingUsed(true);
        java.util.Currency currency63 = numberFormat60.getCurrency();
        numberFormat55.setCurrency(currency63);
        numberFormat55.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat50, numberFormat55);
        boolean boolean68 = locale1.equals((java.lang.Object) numberFormat11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10.000%" + "'", str21, "10.000%");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat38);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u671d\u9c9c\u6587" + "'", str48, "\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u671d\u9c9c\u6587\u671d\u9c9c\u6587)" + "'", str49, "\u671d\u9c9c\u6587\u671d\u9c9c\u6587)");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-0.028571429f), (double) 100L, 9);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        int int5 = fraction3.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int10 = fraction9.intValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.subtract(fraction9);
        boolean boolean13 = fraction9.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction9.add(fraction24);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        int int39 = fraction38.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.multiply(fraction42);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getNumberInstance();
        boolean boolean45 = numberFormat44.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44);
        boolean boolean47 = numberFormat44.isParseIntegerOnly();
        boolean boolean48 = fraction42.equals((java.lang.Object) boolean47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction27.multiply(fraction42);
        int int50 = fraction49.intValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction26.add(fraction49);
        int int52 = fraction49.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str56 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction55);
        org.apache.commons.math.fraction.Fraction fraction58 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction55.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction49.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction3.subtract(fraction55);
        byte byte62 = fraction3.byteValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-117) + "'", int10 == (-117));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-117 / 1" + "'", str56, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -1 + "'", byte62 == (byte) -1);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -13572, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }
}

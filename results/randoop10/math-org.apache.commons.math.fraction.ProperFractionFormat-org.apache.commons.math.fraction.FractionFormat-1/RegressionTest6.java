import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int31 = fraction30.intValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction25.add(fraction27);
        int int34 = fraction33.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.add(fraction39);
        int int46 = fraction45.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction33.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int56 = fraction55.intValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction52.subtract(fraction55);
        boolean boolean59 = fraction55.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction33.add(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction0.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction33.reciprocal();
        short short64 = fraction63.shortValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-117 / 1" + "'", str26, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-117) + "'", int31 == (-117));
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-117 / 1" + "'", str38, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-117) + "'", int56 == (-117));
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 0 + "'", short64 == (short) 0);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("100", (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        boolean boolean7 = numberFormat2.equals((java.lang.Object) throwableArray6);
        numberFormat2.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat12 = properFractionFormat10.getDenominatorFormat();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.add(fraction20);
        int int27 = fraction26.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction26.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        boolean boolean40 = parsePosition15.equals((java.lang.Object) fraction39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat10.parse("\u52a0\u62ff\u5927", parsePosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-117 / 1" + "'", str19, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        numberFormat18.setGroupingUsed(false);
        boolean boolean24 = numberFormat18.isGroupingUsed();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat28.setCurrency(currency32);
        numberFormat25.setCurrency(currency32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.getScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale39, locale42, locale43 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList45, filteringMode47);
        java.lang.String[] strArray56 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList57);
        boolean boolean60 = numberFormat25.equals((java.lang.Object) strList57);
        numberFormat25.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 10);
        parsePosition68.setErrorIndex((int) (byte) 1);
        java.lang.Object obj71 = fractionFormat65.parseObject("United Kingdom", parsePosition68);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayLanguage(locale73);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getNumberInstance(locale73);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance();
        numberFormat77.setMaximumIntegerDigits((-1));
        java.util.Currency currency80 = numberFormat77.getCurrency();
        numberFormat76.setCurrency(currency80);
        numberFormat75.setCurrency(currency80);
        fractionFormat65.setNumeratorFormat(numberFormat75);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getPercentInstance();
        numberFormat85.setMaximumIntegerDigits((-1));
        java.util.Currency currency88 = numberFormat85.getCurrency();
        numberFormat84.setCurrency(currency88);
        numberFormat75.setCurrency(currency88);
        numberFormat25.setCurrency(currency88);
        java.util.Currency currency92 = numberFormat25.getCurrency();
        numberFormat18.setCurrency(currency92);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
// flaky:         org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str40, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str74, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(currency80);
// flaky:         org.junit.Assert.assertEquals(currency80.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(currency88);
// flaky:         org.junit.Assert.assertEquals(currency88.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency92);
// flaky:         org.junit.Assert.assertEquals(currency92.toString(), "XXX");
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = new org.apache.commons.math.fraction.FractionFormat();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance();
        java.lang.String str3 = numberFormat1.format(100L);
        int int4 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setMaximumIntegerDigits(1);
        boolean boolean8 = numberFormat1.equals((java.lang.Object) (-117));
        java.lang.String str10 = numberFormat1.format((double) (-1));
        fractionFormat0.setDenominatorFormat(numberFormat1);
        java.lang.Object obj12 = numberFormat1.clone();
        java.lang.Object obj13 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1" + "'", str10, "-1");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale19.getDisplayCountry(locale22);
        java.util.Locale.Builder builder24 = builder18.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder24.setExtension('u', "\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ?? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "United Kingdom" + "'", str23, "United Kingdom");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("13.455");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 13.455 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("-1\240357\240200,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 %");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-1?357?200");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder23 = builder2.setExtension('a', "Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder2.setUnicodeLocaleKeyword("Chinese (Taiwan)", "java.text.ParsePosition[index=52,errorIndex=9]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        long long5 = fraction3.longValue();
        int int6 = fraction3.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.negate();
        short short9 = fraction3.shortValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList5 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3, filteringMode4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale19, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        java.util.Locale locale29 = java.util.Locale.lookup(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("en");
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale42.getScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale42, locale45, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList48, filteringMode50);
        boolean boolean52 = fraction37.equals((java.lang.Object) localeList51);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale locale54 = java.util.Locale.lookup(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale locale55 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap56);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode4.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNull(locale54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(languageRangeList57);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.util.Currency currency26 = numberFormat23.getCurrency();
        java.lang.String str28 = numberFormat23.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat13, numberFormat23);
        fractionFormat2.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj36 = numberFormat32.parseObject("hi!", parsePosition35);
        parsePosition35.setErrorIndex(10);
        org.apache.commons.math.fraction.Fraction fraction39 = fractionFormat2.parse("anglais", parsePosition35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction41 = fractionFormat2.parse("java.text.parseposition[index=-1,errorindex=-1]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.parseposition[index=-1,errorindex=-1]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency26);
// flaky:         org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0%" + "'", str28, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(fraction39);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        boolean boolean27 = locale23.hasExtensions();
        java.util.Locale.Builder builder28 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale.Builder builder33 = builder18.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder18.clearExtensions();
        java.util.Locale.Builder builder36 = builder18.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder18.setRegion("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) (-117));
        java.lang.String str9 = numberFormat0.format((double) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap35);
        boolean boolean37 = numberFormat0.equals((java.lang.Object) languageRangeList11);
        numberFormat0.setMinimumFractionDigits(10);
        java.lang.StringBuffer stringBuffer41 = null;
        java.text.Format.Field field42 = null;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition(field42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = numberFormat0.format((long) (short) 1, stringBuffer41, fieldPosition43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale8.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList14, filteringMode16);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        java.lang.String[] strArray40 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale50.getScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.lang.String[] strArray67 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap71);
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale76.getDisplayLanguage(locale77);
        java.lang.String str79 = locale77.getScript();
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale77, locale80, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter(languageRangeList72, (java.util.Collection<java.util.Locale>) localeList86, filteringMode87);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList86);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale91 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str78, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("11,700%");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=11,700%");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("kanada", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        java.lang.String str12 = locale6.getLanguage();
        java.lang.String str13 = locale6.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale22.getVariant();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale20.getDisplayLanguage(locale22);
        java.util.Set<java.lang.Character> charSet26 = locale22.getExtensionKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale22);
        java.lang.String str28 = locale22.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        java.lang.String str33 = locale22.getDisplayLanguage(locale29);
        java.lang.String str34 = locale6.getDisplayCountry(locale22);
        java.util.Set<java.lang.String> strSet35 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u97d3\u6587" + "'", str21, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese" + "'", str25, "Chinese");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u82f1\u6587" + "'", str33, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        double double9 = fraction8.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int14 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.subtract(fraction13);
        double double16 = fraction15.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.negate();
        double double18 = fraction17.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction17.reciprocal();
        long long21 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction8.multiply(fraction17);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.008547008547008548d) + "'", double9 == (-0.008547008547008548d));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 117.0d + "'", double16 == 117.0d);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-117.0d) + "'", double18 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-117L) + "'", long21 == (-117L));
        org.junit.Assert.assertNotNull(fraction22);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        boolean boolean3 = numberFormat2.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        java.text.NumberFormat numberFormat78 = properFractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction82 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long83 = fraction82.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction82.abs();
        java.lang.StringBuffer stringBuffer85 = null;
        java.text.NumberFormat.Field field86 = java.text.NumberFormat.Field.FRACTION;
        java.text.FieldPosition fieldPosition88 = new java.text.FieldPosition((java.text.Format.Field) field86, (-4));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = properFractionFormat17.format(fraction84, stringBuffer85, fieldPosition88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
// flaky:         org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6cd5\u6587" + "'", str65, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(field86);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getLanguage();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setVariant("");
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale26.getDisplayLanguage(locale31);
        java.util.Locale.Builder builder33 = builder23.setLocale(locale31);
        java.util.Locale.setDefault(category0, locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = locale31.getUnicodeLocaleType("13 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 13 / 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u52a0\u62ff\u5927" + "'", str16, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "China" + "'", str17, "China");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CAN" + "'", str18, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587" + "'", str32, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale18);
        properFractionFormat11.setWholeFormat(numberFormat21);
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction29.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction26.subtract(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str44 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int49 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction43.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction40.subtract(fraction52);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int61 = fraction60.intValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction57.subtract(fraction60);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction53.add(fraction57);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction38.multiply(fraction53);
        java.util.Locale locale66 = java.util.Locale.UK;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.lang.String str70 = locale66.getDisplayScript(locale68);
        java.lang.String str71 = locale68.toLanguageTag();
        java.lang.String str72 = locale68.getVariant();
        boolean boolean73 = fraction65.equals((java.lang.Object) locale68);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction25.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.abs();
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.FRACTION;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field77, (-4));
        int int80 = fieldPosition79.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = properFractionFormat11.format(fraction75, stringBuffer76, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.000%" + "'", str8, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-117 / 1" + "'", str30, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-117 / 1" + "'", str44, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-117) + "'", int49 == (-117));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-117) + "'", int61 == (-117));
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ko" + "'", str71, "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.getISO3Language();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat8);
        java.text.NumberFormat numberFormat10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat9.setNumeratorFormat(numberFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        java.lang.String str59 = locale58.getDisplayCountry();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale58);
        properFractionFormat56.setWholeFormat(numberFormat60);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.text.NumberFormat numberFormat65 = fractionFormat64.getNumeratorFormat();
        java.text.NumberFormat numberFormat66 = fractionFormat64.getNumeratorFormat();
        int int67 = numberFormat66.getMinimumIntegerDigits();
        numberFormat66.setMaximumIntegerDigits((int) ' ');
        java.lang.Object obj70 = numberFormat66.clone();
        java.text.ParsePosition parsePosition73 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Number number74 = numberFormat66.parse("\uc911\uad6d\uc5b4\ub300\ub9cc)", parsePosition73);
        parsePosition73.setErrorIndex((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction77 = properFractionFormat56.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=117]", parsePosition73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u52a0\u62ff\u5927" + "'", str1, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
// flaky:         org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
// flaky:         org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(number74);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        parsePosition33.setErrorIndex((int) ' ');
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat17.parse("coreano", parsePosition33);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.util.Currency currency43 = numberFormat40.getCurrency();
        numberFormat39.setCurrency(currency43);
        java.lang.String str46 = numberFormat39.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat48 = fractionFormat47.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat39, numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 10);
        parsePosition52.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat49.parse("fran\347ais", parsePosition52);
        int int56 = parsePosition52.getIndex();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.lang.String str62 = locale59.getVariant();
        java.util.Locale.setDefault(category57, locale59);
        java.lang.String str64 = locale59.getDisplayName();
        java.util.Set<java.lang.Character> charSet65 = locale59.getExtensionKeys();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getIntegerInstance(locale59);
        java.util.Locale locale70 = new java.util.Locale("United Kingdom", "French", "zh_CN");
        java.lang.String str71 = locale59.getDisplayScript(locale70);
        boolean boolean72 = parsePosition52.equals((java.lang.Object) str71);
        org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat17.parse("", parsePosition52);
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.Format.Field field76 = null;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition(field76);
        fieldPosition77.setEndIndex((int) (byte) 97);
        int int80 = fieldPosition77.getField();
        java.lang.String str81 = fieldPosition77.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer82 = properFractionFormat17.format((java.lang.Object) 52.0d, stringBuffer75, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency43);
// flaky:         org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10,000%" + "'", str46, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertEquals(locale70.toString(), "united kingdom_FRENCH_zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(fraction73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=97]" + "'", str81, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=97]");
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setVariant("\uce90\ub098\ub2e4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) (-117));
        java.lang.String str9 = numberFormat0.format((double) (-1));
        boolean boolean10 = numberFormat0.isGroupingUsed();
        java.lang.StringBuffer stringBuffer12 = null;
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) (short) 0);
        java.lang.String str16 = fieldPosition15.toString();
        java.lang.String str17 = fieldPosition15.toString();
        fieldPosition15.setBeginIndex((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getDisplayLanguage();
        boolean boolean22 = fieldPosition15.equals((java.lang.Object) str21);
        int int23 = fieldPosition15.getEndIndex();
        java.lang.String str24 = fieldPosition15.toString();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition(9);
        boolean boolean27 = fieldPosition15.equals((java.lang.Object) 9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer28 = numberFormat0.format((long) 117, stringBuffer12, fieldPosition15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str17, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str21, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int3 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = parseException2.getSuppressed();
        java.lang.Throwable throwable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            parseException2.addSuppressed(throwable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setVariant("CHN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: CHN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((int) (short) -13572);
        numberFormat24.setMaximumFractionDigits(0);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.lang.String str67 = locale63.getDisplayCountry();
        java.util.Locale locale68 = locale63.stripExtensions();
        java.lang.String str69 = locale68.getDisplayName();
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale68);
        boolean boolean71 = numberFormat24.equals((java.lang.Object) numberFormat70);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        numberFormat0.setMaximumFractionDigits((int) (short) -117);
        int int7 = numberFormat0.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        java.lang.String str15 = numberFormat8.format((double) 100);
        java.math.RoundingMode roundingMode16 = numberFormat8.getRoundingMode();
        boolean boolean17 = numberFormat0.equals((java.lang.Object) roundingMode16);
        numberFormat0.setMaximumIntegerDigits(100);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
// flaky:         org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10,000%" + "'", str15, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode16.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setVariant("");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale65.getDisplayLanguage(locale70);
        java.util.Locale.Builder builder72 = builder62.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale.Builder builder74 = builder72.clearExtensions();
        java.util.Locale locale75 = builder74.build();
        java.util.Locale.Builder builder76 = builder59.setLocale(locale75);
        java.lang.String str77 = locale75.getLanguage();
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getIntegerInstance(locale75);
        numberFormat78.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u671d\u9c9c\u6587" + "'", str71, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "zh" + "'", str77, "zh");
        org.junit.Assert.assertNotNull(numberFormat78);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 3200L, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 3,200 to fraction (-3,199/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        numberFormat7.setCurrency(currency12);
        java.math.RoundingMode roundingMode15 = numberFormat7.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode15);
        boolean boolean17 = numberFormat0.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
// flaky:         org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=120,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=120,endindex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English (Canada)", (double) (byte) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=97.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        java.text.ParseException parseException2 = new java.text.ParseException("-1", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.UK;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale3.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale5);
        java.lang.String str9 = locale5.getScript();
        java.lang.String str10 = locale0.getDisplayScript(locale5);
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.lang.String str14 = locale5.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str16 = locale11.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uce90\ub098\ub2e4" + "'", str12, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-CA" + "'", str16, "en-CA");
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguage("French");
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale20.getDisplayName(locale21);
        java.lang.String str24 = locale17.getDisplayName(locale21);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale27 = new java.util.Locale("francese");
        java.lang.String str28 = locale21.getDisplayScript(locale27);
        java.lang.String str29 = locale21.getDisplayVariant();
        java.lang.String str30 = locale21.getCountry();
        java.util.Locale.Builder builder31 = builder13.setLocale(locale21);
        java.util.Locale locale32 = builder13.build();
        java.util.Locale.Builder builder35 = builder13.setExtension('u', "fr-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder35.setUnicodeLocaleKeyword("\u52a0\u62ff\u5927", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=1,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en" + "'", str24, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale27.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        boolean boolean20 = numberFormat8.equals((java.lang.Object) locale15);
        java.lang.String str21 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale15);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParseException: java.text.ParseException: 100", "FR", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str6 = locale3.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.parseexception: java.text.parseexception: 100_FR");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.parseexception: java.text.parseexception: 100" + "'", str6, "java.text.parseexception: java.text.parseexception: 100");
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("10.000%");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10.000%");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 10.0f, (double) (short) 100, 0);
        short short4 = fraction3.shortValue();
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 10 + "'", short4 == (short) 10);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 115, (int) (short) -13572);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 115 to fraction (9,223,372,036,854,775,694/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.lang.String str17 = locale16.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 0, (-1));
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) 1);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertNull(field2);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\244 100,00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=? 100,00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 117);
        byte byte2 = fraction1.byteValue();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 117 + "'", byte2 == (byte) 117);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        int int51 = fraction50.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction54.add(fraction56);
        int int63 = fraction62.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction50.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int73 = fraction72.intValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.subtract(fraction72);
        boolean boolean76 = fraction72.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction72.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction50.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction39.divide(fraction50);
        org.apache.commons.math.fraction.Fraction fraction82 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction39.multiply(fraction82);
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100, (double) 'x', (-117));
        org.apache.commons.math.fraction.Fraction fraction89 = fraction88.reciprocal();
        int int90 = fraction88.intValue();
        org.apache.commons.math.fraction.Fraction fraction91 = fraction84.subtract(fraction88);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction91.negate();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-117 / 1" + "'", str55, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-117) + "'", int73 == (-117));
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        numberFormat40.setCurrency(currency44);
        numberFormat39.setCurrency(currency44);
        java.math.RoundingMode roundingMode47 = numberFormat39.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        numberFormat0.setMinimumFractionDigits((int) (short) 10);
        java.lang.Object obj52 = numberFormat0.clone();
        int int53 = numberFormat0.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        int int55 = numberFormat0.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
// flaky:         org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
// flaky:         org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setGroupingUsed(true);
        java.util.Currency currency11 = numberFormat0.getCurrency();
        java.lang.Object obj13 = numberFormat0.parseObject("10,000%");
        int int14 = numberFormat0.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency11);
// flaky:         org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 100L + "'", obj13, 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) ' ');
        int int6 = fieldPosition2.getEndIndex();
        java.text.Format.Field field7 = fieldPosition2.getFieldAttribute();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale8);
        java.lang.String str11 = locale8.getLanguage();
        java.util.Locale.setDefault(locale8);
        java.lang.String str13 = locale8.getDisplayName();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        boolean boolean15 = fieldPosition2.equals((java.lang.Object) locale8);
        java.lang.Class<?> wildcardClass16 = locale8.getClass();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u52a0\u62ff\u5927" + "'", str9, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (Canada)" + "'", str13, "English (Canada)");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        numberFormat0.setParseIntegerOnly(false);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str11 = field10.toString();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale12);
        boolean boolean15 = field10.equals((java.lang.Object) numberFormat14);
        java.lang.Object obj16 = numberFormat14.clone();
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.lang.String str29 = numberFormat18.format((double) 1);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayCountry();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = locale30.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat14, numberFormat18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number41 = numberFormat14.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str11, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "EUR");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u97d3\u6587" + "'", str36, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(32, (-35));
        byte byte3 = fraction2.byteValue();
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction6.subtract(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction23.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction20.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int41 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction33.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction18.multiply(fraction33);
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale48.toLanguageTag();
        java.lang.String str52 = locale48.getVariant();
        boolean boolean53 = fraction45.equals((java.lang.Object) locale48);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getCurrencyInstance(locale48);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayLanguage(locale60);
        boolean boolean62 = numberFormat56.equals((java.lang.Object) locale60);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj66 = numberFormat56.parseObject("China", parsePosition65);
        int int67 = parsePosition65.getErrorIndex();
        java.lang.String str68 = parsePosition65.toString();
        int int69 = parsePosition65.getIndex();
        java.lang.Number number70 = numberFormat54.parse("\ub300\ub9cc", parsePosition65);
        java.lang.Number number71 = numberFormat0.parse("java.text.parseposition[index=10,errorindex=10]", parsePosition65);
        java.text.NumberFormat.Field field72 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field72, (int) (short) 0);
        int int75 = fieldPosition74.getEndIndex();
        fieldPosition74.setBeginIndex((int) ' ');
        int int78 = fieldPosition74.getField();
        boolean boolean79 = numberFormat0.equals((java.lang.Object) int78);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "CAD");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-117 / 1" + "'", str24, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-117) + "'", int41 == (-117));
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str61, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=52]" + "'", str68, "java.text.ParsePosition[index=52,errorIndex=52]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNull(number70);
        org.junit.Assert.assertNull(number71);
        org.junit.Assert.assertNotNull(field72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("anglais");
        double double2 = languageRange1.getWeight();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        java.lang.String str11 = numberFormat4.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 10);
        parsePosition17.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat14.parse("fran\347ais", parsePosition17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        boolean boolean26 = parsePosition17.equals((java.lang.Object) fractionFormat25);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.lang.String str32 = locale29.getVariant();
        java.util.Locale.setDefault(category27, locale29);
        java.util.Locale locale34 = java.util.Locale.getDefault(category27);
        boolean boolean35 = parsePosition17.equals((java.lang.Object) locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        java.util.Locale.setDefault(locale34);
        boolean boolean38 = languageRange1.equals((java.lang.Object) locale34);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10,000%" + "'", str11, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ko");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.Object obj4 = null;
        boolean boolean5 = languageRange1.equals(obj4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        boolean boolean6 = locale0.hasExtensions();
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale0.getDisplayVariant(locale7);
        java.util.Locale locale10 = new java.util.Locale("100");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale0.getDisplayLanguage(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale17 = locale15.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale18.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayName(locale19);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale19);
        java.util.Locale locale25 = new java.util.Locale("francese");
        java.lang.String str26 = locale19.getDisplayScript(locale25);
        java.lang.String str27 = locale19.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.util.Locale.setDefault(locale29);
        java.lang.String str32 = locale19.getDisplayName(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale29);
        java.math.RoundingMode roundingMode34 = numberFormat33.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = fractionFormat13.format((java.lang.Object) roundingMode34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "100");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cor\351en" + "'", str22, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals(locale25.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fran\347ais" + "'", str32, "fran\347ais");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode34.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        java.lang.String str15 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat16.setMinimumFractionDigits(2);
        int int19 = numberFormat16.getMinimumIntegerDigits();
        java.util.Currency currency20 = numberFormat16.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction11.add(fraction13);
        int int20 = fraction19.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.multiply(fraction23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance();
        boolean boolean26 = numberFormat25.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        boolean boolean28 = numberFormat25.isParseIntegerOnly();
        boolean boolean29 = fraction23.equals((java.lang.Object) boolean28);
        int int30 = fraction23.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction8.add(fraction31);
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field34, (int) (short) 0);
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.text.Format.Field field38 = fieldPosition37.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer39 = properFractionFormat5.format(fraction31, stringBuffer33, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-117 / 1" + "'", str12, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(field38);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=32]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("zh", strMap2);
        java.util.Locale locale5 = new java.util.Locale("French");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str8 = locale5.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.lang.String str13 = locale5.getDisplayVariant(locale9);
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleKeys();
        java.lang.String str15 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("CAN");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getScript();
        java.lang.String str26 = locale21.getDisplayScript();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.util.Set<java.lang.String> strSet28 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.lang.String str35 = locale33.getScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale33, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.lang.String[] strArray50 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale61.getScript();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale61, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList67, filteringMode69);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet56, filteringMode69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet28, filteringMode69);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat75 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale74);
        java.lang.String str76 = locale74.getISO3Language();
        java.util.Set<java.lang.Character> charSet77 = locale74.getExtensionKeys();
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayLanguage(locale80);
        java.lang.String str82 = locale80.getScript();
        java.lang.String str83 = locale80.getVariant();
        java.util.Locale.setDefault(category78, locale80);
        java.lang.String str85 = locale80.getDisplayName();
        java.util.Locale locale86 = java.util.Locale.UK;
        java.lang.String str87 = locale86.getDisplayScript();
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleAttributes();
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.lang.String str90 = locale86.getDisplayCountry(locale89);
        java.lang.String str91 = locale80.getDisplayVariant(locale86);
        java.lang.String str92 = locale74.getDisplayName(locale86);
        java.util.Locale locale93 = java.util.Locale.US;
        java.lang.String str94 = locale74.getDisplayLanguage(locale93);
        java.util.Set<java.lang.String> strSet95 = locale74.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertEquals(locale5.toString(), "french");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "french" + "'", str8, "french");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str81, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str85, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "United Kingdom" + "'", str90, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strList96);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        java.util.Locale locale3 = new java.util.Locale("", "en-GB", "java.text.AttributedCharacterIterator$Attribute(language)");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.lang.String str15 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale11.getDisplayLanguage(locale16);
        java.lang.String str18 = locale5.getDisplayName(locale16);
        java.lang.String str19 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale21 = locale5.stripExtensions();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str23 = locale3.getDisplayLanguage(locale21);
        java.lang.String str24 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u671d\u9c9c\u6587" + "'", str17, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)" + "'", str24, "_EN-GB_java.text.AttributedCharacterIterator$Attribute(language)");
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance();
        java.lang.String str4 = numberFormat2.format(100L);
        int int5 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode11 = numberFormat8.getRoundingMode();
        numberFormat2.setRoundingMode(roundingMode11);
        numberFormat1.setRoundingMode(roundingMode11);
        boolean boolean14 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        int int18 = numberFormat17.getMinimumFractionDigits();
        java.util.Currency currency19 = numberFormat17.getCurrency();
        fractionFormat15.setDenominatorFormat(numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat21.parse("java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "EUR");
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-117), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.String str6 = locale2.getScript();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.util.Locale locale9 = new java.util.Locale("French");
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale2.getDisplayCountry(locale10);
        java.lang.String str12 = locale2.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals(locale9.toString(), "french");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "french");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) parseException6);
        java.lang.Throwable[] throwableArray9 = parseException6.getSuppressed();
        java.lang.Throwable[] throwableArray10 = parseException6.getSuppressed();
        java.lang.String str11 = parseException6.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str11, "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str7 = numberFormat5.format((long) 117);
        int int8 = numberFormat5.getMinimumFractionDigits();
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((-1));
        int int13 = fieldPosition12.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer14 = numberFormat5.format(1L, stringBuffer10, fieldPosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "117" + "'", str7, "117");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        double double9 = languageRange1.getWeight();
        java.lang.Class<?> wildcardClass10 = languageRange1.getClass();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "can" + "'", str7, "can");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "can" + "'", str8, "can");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        java.util.Locale locale3 = new java.util.Locale("-117 / 1", "14", "it_IT");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.lang.String str12 = locale4.getDisplayName(locale9);
        java.lang.String str13 = locale3.getDisplayScript(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        numberFormat16.setCurrency(currency23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        java.lang.String str31 = numberFormat26.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat16, numberFormat26);
        java.lang.Object obj33 = numberFormat26.clone();
        int int34 = numberFormat26.getMinimumFractionDigits();
        numberFormat26.setMaximumIntegerDigits((int) (byte) 117);
        numberFormat26.setMinimumFractionDigits(2147483647);
        org.apache.commons.math.fraction.Fraction fraction42 = new org.apache.commons.math.fraction.Fraction((double) (-13572), (double) 10L, (int) '#');
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction47 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0, (double) '4', 2);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 10, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction47.divide(fraction50);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction42.divide(fraction50);
        java.lang.String str53 = numberFormat26.format((java.lang.Object) fraction42);
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field55, (int) (short) 0);
        int int58 = fieldPosition57.getEndIndex();
        fieldPosition57.setBeginIndex((int) ' ');
        int int61 = fieldPosition57.getEndIndex();
        java.text.Format.Field field62 = fieldPosition57.getFieldAttribute();
        int int63 = fieldPosition57.getField();
        int int64 = fieldPosition57.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = fractionFormat14.format(fraction42, stringBuffer54, fieldPosition57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "-117 / 1_14_it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "coreano" + "'", str10, "coreano");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str11, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "EUR");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0 %" + "'", str31, "0 %");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-13572) + "'", int43 == (-13572));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\240357\240200,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 %" + "'", str53, "-1\240357\240200,0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 %");
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(field62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        numberFormat4.setGroupingUsed(true);
        numberFormat4.setMinimumIntegerDigits((int) (byte) 116);
        numberFormat4.setGroupingUsed(false);
        java.math.RoundingMode roundingMode11 = numberFormat4.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str4 = numberFormat2.format((double) 52);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat6 = null;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        java.lang.String str23 = numberFormat18.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat8, numberFormat18);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance();
        java.lang.String str27 = numberFormat25.format(100L);
        properFractionFormat24.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        int int32 = numberFormat29.getMinimumFractionDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.lang.String str38 = numberFormat36.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat29, numberFormat36);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        properFractionFormat39.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        boolean boolean51 = numberFormat45.equals((java.lang.Object) locale49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale49);
        boolean boolean53 = numberFormat42.equals((java.lang.Object) numberFormat52);
        numberFormat52.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat6, numberFormat52);
        java.lang.String str58 = numberFormat52.format((long) (byte) 117);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap62);
        java.util.Locale locale64 = java.util.Locale.UK;
        java.lang.String str65 = locale64.getDisplayScript();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet66);
        java.util.Locale locale68 = java.util.Locale.UK;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = locale68.getDisplayScript(locale70);
        java.util.Set<java.lang.String> strSet73 = locale70.getUnicodeLocaleKeys();
        java.lang.String str74 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = numberFormat52.format((java.lang.Object) languageRangeList60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$52.00" + "'", str4, "$52.00");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
// flaky:         org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
// flaky:         org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0 %" + "'", str23, "0 %");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "117" + "'", str58, "117");
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        java.util.Locale locale2 = new java.util.Locale("GB", "Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for KOREAN");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "gb_KOREAN");
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.setDefault(category5, locale7);
        java.lang.String str12 = locale7.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale7.getDisplayVariant(locale13);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale7.getDisplayLanguage(locale22);
        java.util.Locale locale26 = locale7.stripExtensions();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder2.setExtension('a', "java.text.AttributedCharacterIterator$Attribute(language)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: java.text.AttributedCharacterIterator$Attribute(language) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "coreano" + "'", str23, "coreano");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "coreano" + "'", str25, "coreano");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale.Builder builder7 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.removeUnicodeLocaleAttribute("zh_tw");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: zh_tw [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        parsePosition26.setIndex((int) (short) -1);
        java.lang.String str34 = parsePosition26.toString();
        parsePosition26.setErrorIndex((int) (short) -1);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=9]" + "'", str34, "java.text.ParsePosition[index=-1,errorIndex=9]");
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field8 = fieldPosition2.getFieldAttribute();
        java.lang.Object obj9 = null;
        boolean boolean10 = field8.equals(obj9);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field8);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(field8, (int) 'u');
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field8);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getScript();
        java.lang.Class<?> wildcardClass6 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        java.util.Locale locale2 = new java.util.Locale("-13 / 4", "");
        org.junit.Assert.assertEquals(locale2.toString(), "-13 / 4");
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        numberFormat14.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat14);
        int int18 = numberFormat2.getMinimumIntegerDigits();
        java.util.Currency currency19 = numberFormat2.getCurrency();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        numberFormat24.setCurrency(currency28);
        numberFormat21.setCurrency(currency28);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.util.Currency currency34 = numberFormat31.getCurrency();
        java.lang.String str36 = numberFormat31.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20, numberFormat21, numberFormat31);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance();
        java.lang.String str40 = numberFormat38.format(100L);
        properFractionFormat37.setWholeFormat(numberFormat38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance();
        java.lang.String str44 = numberFormat42.format(100L);
        int int45 = numberFormat42.getMinimumFractionDigits();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale47);
        java.lang.String str51 = numberFormat49.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat42, numberFormat49);
        java.lang.Object obj53 = numberFormat38.clone();
        boolean boolean54 = numberFormat2.equals((java.lang.Object) numberFormat38);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale57.getVariant();
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale62 = java.util.Locale.getDefault(category55);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.util.Locale.setDefault(category55, locale63);
        java.util.Locale locale66 = java.util.Locale.getDefault(category55);
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale66.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = numberFormat2.format((java.lang.Object) str69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(currency19);
// flaky:         org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
// flaky:         org.junit.Assert.assertEquals(currency28.toString(), "TWD");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency34);
// flaky:         org.junit.Assert.assertEquals(currency34.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0%" + "'", str36, "0%");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100" + "'", str40, "100");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "32" + "'", str51, "32");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fran\347ais" + "'", str67, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction7.add(fraction9);
        int int16 = fraction15.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction15.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction4.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int34 = fraction33.intValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.subtract(fraction33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale40, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        boolean boolean50 = fraction35.equals((java.lang.Object) localeList49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction4.divide(fraction35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat53 = fractionFormat52.getNumeratorFormat();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        numberFormat57.setMaximumIntegerDigits((-1));
        java.util.Currency currency60 = numberFormat57.getCurrency();
        numberFormat56.setCurrency(currency60);
        java.lang.String str63 = numberFormat56.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat65 = fractionFormat64.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55, numberFormat56, numberFormat65);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition((int) (short) 10);
        parsePosition69.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat66.parse("fran\347ais", parsePosition69);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        boolean boolean78 = parsePosition69.equals((java.lang.Object) fractionFormat77);
        java.lang.Object obj79 = numberFormat53.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition69);
        boolean boolean80 = fraction4.equals(obj79);
        long long81 = fraction4.longValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-117 / 1" + "'", str8, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-117) + "'", int34 == (-117));
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(currency60);
// flaky:         org.junit.Assert.assertEquals(currency60.toString(), "TWD");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10,000%" + "'", str63, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
// flaky:         org.junit.Assert.assertEquals(currency76.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getDenominatorFormat();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder1.setLanguageTag("14");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 14 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        java.util.Locale locale3 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale4.toLanguageTag();
        java.lang.String str8 = locale3.getDisplayName(locale4);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(32, (int) (byte) 97);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction14.multiply(fraction25);
        java.lang.StringBuffer stringBuffer27 = null;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((-1));
        int int30 = fieldPosition29.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = fractionFormat10.format(fraction26, stringBuffer27, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))" + "'", str8, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        java.util.Locale locale3 = new java.util.Locale("0%", "java.text.numberformat$field(currency) (JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0],Canada)", "117");
        org.junit.Assert.assertEquals(locale3.toString(), "0%_JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY) (JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0],CANADA)_117");
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        boolean boolean8 = numberFormat3.equals((java.lang.Object) throwableArray7);
        boolean boolean9 = attribute0.equals((java.lang.Object) numberFormat3);
        java.lang.String str10 = attribute0.toString();
        boolean boolean12 = attribute0.equals((java.lang.Object) "32");
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale13.getScript();
        java.lang.String str18 = locale13.getDisplayScript();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleAttributes();
        boolean boolean21 = attribute0.equals((java.lang.Object) locale13);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale13);
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction(0, (int) (byte) -116);
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) (short) 0);
        java.lang.String str30 = fieldPosition29.toString();
        int int31 = fieldPosition29.getBeginIndex();
        fieldPosition29.setEndIndex((int) (byte) 100);
        java.text.Format.Field field34 = fieldPosition29.getFieldAttribute();
        int int35 = fieldPosition29.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = numberFormat22.format((java.lang.Object) 0, stringBuffer26, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str10, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("anglais");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setVariant("French");
        java.util.Locale.Builder builder11 = builder7.setVariant("Chinese");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale19 = java.util.Locale.getDefault(category12);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale.Builder builder23 = builder11.setLocale(locale20);
        java.util.Locale.Builder builder24 = builder4.setLocale(locale20);
        java.util.Locale.Builder builder25 = builder4.clearExtensions();
        java.util.Locale.Builder builder27 = builder4.addUnicodeLocaleAttribute("Italian");
        java.util.Locale locale28 = builder27.build();
        java.lang.Object obj29 = locale28.clone();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr__#u-italian");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "fr__#u-italian");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "fr__#u-italian");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "fr__#u-italian");
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        numberFormat14.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat14);
        java.text.NumberFormat numberFormat18 = fractionFormat17.getDenominatorFormat();
        java.text.ParseException parseException21 = new java.text.ParseException("cor\351en", 100);
        boolean boolean22 = numberFormat18.equals((java.lang.Object) 100);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 4095, (int) (short) 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 4,095 to fraction (9,223,372,036,854,771,714/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        numberFormat2.setMaximumIntegerDigits(1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale8 = locale6.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale9.getDisplayName(locale10);
        java.lang.String str13 = locale6.getDisplayName(locale10);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        java.math.RoundingMode roundingMode16 = numberFormat14.getRoundingMode();
        java.text.NumberFormat numberFormat17 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat14, numberFormat17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = numberFormat2.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cor\351en" + "'", str13, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode16.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder19 = builder11.setExtension('u', "");
        java.util.Locale locale20 = builder19.build();
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = locale20.getDisplayVariant();
        java.lang.String str23 = locale20.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "chinese__#a-canada");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.FRACTION;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        boolean boolean4 = field0.equals((java.lang.Object) strSet3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.util.Currency currency10 = numberFormat7.getCurrency();
        numberFormat6.setCurrency(currency10);
        java.lang.String str13 = numberFormat6.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat15 = fractionFormat14.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5, numberFormat6, numberFormat15);
        java.math.RoundingMode roundingMode17 = numberFormat15.getRoundingMode();
        boolean boolean18 = field0.equals((java.lang.Object) roundingMode17);
        java.lang.String str19 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Franz\366sisch" + "'", str2, "Franz\366sisch");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10.000%" + "'", str13, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.NumberFormat$Field(fraction)" + "'", str19, "java.text.NumberFormat$Field(fraction)");
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.lang.String str4 = numberFormat1.format((double) (byte) -1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat8.setCurrency(currency13);
        boolean boolean16 = numberFormat8.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat8);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale.setDefault(category18, locale20);
        java.lang.String str25 = locale20.getDisplayName();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale20);
        boolean boolean27 = numberFormat8.equals((java.lang.Object) locale20);
        java.lang.String str28 = locale20.getCountry();
        java.lang.String str29 = locale20.getISO3Country();
        java.lang.String str30 = locale20.getDisplayLanguage();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERCENT;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 10);
        parsePosition7.setErrorIndex((int) (byte) 1);
        parsePosition7.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction12 = fractionFormat3.parse("French", parsePosition7);
        boolean boolean13 = field0.equals((java.lang.Object) "French");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        numberFormat32.setMaximumIntegerDigits((-1));
        java.util.Currency currency35 = numberFormat32.getCurrency();
        java.lang.String str37 = numberFormat32.format((double) 10);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat32);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 10);
        parsePosition47.setErrorIndex((int) (byte) 1);
        parsePosition47.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction52 = fractionFormat43.parse("French", parsePosition47);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance();
        numberFormat58.setMaximumIntegerDigits((-1));
        java.util.Currency currency61 = numberFormat58.getCurrency();
        numberFormat57.setCurrency(currency61);
        numberFormat54.setCurrency(currency61);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        numberFormat64.setMaximumIntegerDigits((-1));
        java.util.Currency currency67 = numberFormat64.getCurrency();
        java.lang.String str69 = numberFormat64.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53, numberFormat54, numberFormat64);
        fractionFormat43.setDenominatorFormat(numberFormat64);
        int int72 = numberFormat64.getMaximumIntegerDigits();
        fractionFormat40.setDenominatorFormat(numberFormat64);
        boolean boolean74 = field0.equals((java.lang.Object) numberFormat64);
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -116);
        java.lang.String str77 = field0.toString();
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -43);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str2, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0%" + "'", str37, "0%");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str42, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0%" + "'", str69, "0%");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.NumberFormat$Field(percent)" + "'", str77, "java.text.NumberFormat$Field(percent)");
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -117, (-1));
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str10 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int15 = fraction14.intValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.subtract(fraction14);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction6.subtract(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str24 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int29 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction23.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction20.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int41 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction33.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction18.multiply(fraction33);
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale46.getDisplayScript(locale48);
        java.lang.String str51 = locale48.toLanguageTag();
        java.lang.String str52 = locale48.getVariant();
        boolean boolean53 = fraction45.equals((java.lang.Object) locale48);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction5.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int59 = fraction58.intValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.subtract(fraction58);
        boolean boolean62 = fraction58.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction58.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int71 = fraction70.intValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.subtract(fraction70);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction66.multiply(fraction67);
        org.apache.commons.math.fraction.Fraction fraction74 = fraction58.add(fraction73);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction5.subtract(fraction73);
        boolean boolean76 = fraction2.equals((java.lang.Object) fraction75);
        int int77 = fraction75.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-117 / 1" + "'", str10, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-117) + "'", int15 == (-117));
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-117 / 1" + "'", str24, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-117) + "'", int29 == (-117));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-117) + "'", int41 == (-117));
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-117) + "'", int59 == (-117));
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-117) + "'", int71 == (-117));
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        java.text.ParseException parseException2 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        parseException5.addSuppressed((java.lang.Throwable) parseException9);
        parseException2.addSuppressed((java.lang.Throwable) parseException9);
        java.text.ParseException parseException15 = new java.text.ParseException("", (-13572));
        parseException2.addSuppressed((java.lang.Throwable) parseException15);
        java.lang.String str17 = parseException15.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParseException: " + "'", str17, "java.text.ParseException: ");
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = fractionFormat2.getDenominatorFormat();
        numberFormat12.setMaximumFractionDigits((int) (byte) 100);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getNumberInstance(locale21);
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(2147483647);
        boolean boolean26 = numberFormat23.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat23);
        java.lang.String str29 = numberFormat15.format((long) 52);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency31 = numberFormat30.getCurrency();
        boolean boolean32 = numberFormat30.isParseIntegerOnly();
        java.lang.String str34 = numberFormat30.format((double) 0.0f);
        numberFormat30.setMinimumFractionDigits(2147483647);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat15, numberFormat30);
        java.text.NumberFormat numberFormat38 = properFractionFormat37.getNumeratorFormat();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getIntegerInstance(locale43);
        java.lang.String str47 = locale43.getCountry();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = locale43.getDisplayCountry(locale48);
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale52.getVariant();
        java.util.Locale.setDefault(category50, locale52);
        java.lang.String str57 = locale52.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        java.lang.String str63 = locale52.getDisplayVariant(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.lang.String str65 = locale48.getDisplayName(locale52);
        boolean boolean66 = numberFormat39.equals((java.lang.Object) locale52);
        java.util.Locale locale67 = locale52.stripExtensions();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getIntegerInstance(locale67);
        properFractionFormat37.setWholeFormat(numberFormat68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\244 0,00" + "'", str34, "\244 0,00");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str44, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category50.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "United Kingdom" + "'", str62, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(fractionFormat64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str65, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale2.getDisplayName(locale4);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.Character> charSet7 = locale4.getExtensionKeys();
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("eng", strMap10);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("en");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        java.lang.String[] strArray40 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Collection<java.util.Locale> localeCollection48 = null;
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, localeCollection48, filteringMode49);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, localeCollection48);
        java.util.Locale locale52 = java.util.Locale.lookup(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale57.getScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale57, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList63, filteringMode65);
        java.lang.String[] strArray74 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList75);
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = locale78.getDisplayScript();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = locale85.getScript();
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.util.Locale locale89 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray90 = new java.util.Locale[] { locale85, locale88, locale89 };
        java.util.ArrayList<java.util.Locale> localeList91 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList91, localeArray90);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.util.Locale>) localeList91, filteringMode93);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strSet80, filteringMode93);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList51, filteringMode93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet8, filteringMode93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "coreano" + "'", str5, "coreano");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode49.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode93.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(localeList96);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        numberFormat33.setMaximumIntegerDigits((int) (short) 100);
        numberFormat33.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        java.math.RoundingMode roundingMode41 = numberFormat33.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode41);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance();
        numberFormat48.setMaximumIntegerDigits((-1));
        java.util.Currency currency51 = numberFormat48.getCurrency();
        numberFormat47.setCurrency(currency51);
        numberFormat44.setCurrency(currency51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance();
        numberFormat54.setMaximumIntegerDigits((-1));
        java.util.Currency currency57 = numberFormat54.getCurrency();
        java.lang.String str59 = numberFormat54.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat60 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat44, numberFormat54);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance();
        java.lang.String str63 = numberFormat61.format(100L);
        properFractionFormat60.setWholeFormat(numberFormat61);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance();
        java.lang.String str67 = numberFormat65.format(100L);
        int int68 = numberFormat65.getMinimumFractionDigits();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getNumberInstance(locale70);
        java.lang.String str74 = numberFormat72.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61, numberFormat65, numberFormat72);
        java.text.NumberFormat numberFormat76 = properFractionFormat75.getWholeFormat();
        java.lang.Object obj77 = numberFormat76.clone();
        java.lang.String str79 = numberFormat76.format((long) '#');
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = new org.apache.commons.math.fraction.FractionFormat(numberFormat76);
        java.text.NumberFormat.Field field81 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition83 = new java.text.FieldPosition((java.text.Format.Field) field81, (int) (short) 0);
        java.lang.String str84 = fieldPosition83.toString();
        java.lang.String str85 = fieldPosition83.toString();
        fieldPosition83.setBeginIndex((int) (byte) 10);
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.lang.String str89 = locale88.getDisplayLanguage();
        boolean boolean90 = fieldPosition83.equals((java.lang.Object) str89);
        int int91 = fieldPosition83.getEndIndex();
        java.lang.String str92 = fieldPosition83.toString();
        java.text.NumberFormat numberFormat93 = java.text.NumberFormat.getInstance();
        java.util.Currency currency94 = numberFormat93.getCurrency();
        java.math.RoundingMode roundingMode95 = numberFormat93.getRoundingMode();
        java.util.Currency currency96 = numberFormat93.getCurrency();
        boolean boolean97 = fieldPosition83.equals((java.lang.Object) currency96);
        numberFormat76.setCurrency(currency96);
        numberFormat29.setCurrency(currency96);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0%" + "'", str59, "0%");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100" + "'", str63, "100");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str71, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "32" + "'", str74, "32");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "35" + "'", str79, "35");
        org.junit.Assert.assertNotNull(field81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str84, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str85, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "francese" + "'", str89, "francese");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]" + "'", str92, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat93);
        org.junit.Assert.assertNotNull(currency94);
        org.junit.Assert.assertEquals(currency94.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode95 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode95.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency96);
        org.junit.Assert.assertEquals(currency96.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        boolean boolean7 = fraction3.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int14 = fraction13.intValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction10.subtract(fraction13);
        double double16 = fraction15.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction3.divide(fraction15);
        double double18 = fraction3.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str27 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction26.add(fraction28);
        int int35 = fraction34.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction34.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.abs();
        boolean boolean48 = parsePosition23.equals((java.lang.Object) fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction21.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        int int54 = fraction53.getDenominator();
        float float55 = fraction53.floatValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.multiply(fraction53);
        int int57 = fraction47.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction3.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction61 = fraction59.divide(fraction60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-117) + "'", int14 == (-117));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 117.0d + "'", double16 == 117.0d);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-117.0d) + "'", double18 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-117 / 1" + "'", str27, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + (-1.0f) + "'", float55 == (-1.0f));
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = builder11.build();
        java.lang.String str13 = locale12.getLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("French");
        java.util.Locale locale17 = java.util.Locale.UK;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale16.getDisplayVariant(locale19);
        java.lang.String str24 = locale12.getDisplayScript(locale16);
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field25, (int) (short) 0);
        boolean boolean28 = locale16.equals((java.lang.Object) fieldPosition27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "french");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        int int13 = numberFormat12.getMaximumFractionDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = builder3.build();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        parsePosition8.setErrorIndex((int) ' ');
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        java.lang.String str14 = fieldPosition13.toString();
        fieldPosition13.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        java.util.Currency currency25 = numberFormat22.getCurrency();
        numberFormat21.setCurrency(currency25);
        numberFormat18.setCurrency(currency25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        numberFormat28.setMaximumIntegerDigits((-1));
        java.util.Currency currency31 = numberFormat28.getCurrency();
        java.lang.String str33 = numberFormat28.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat18, numberFormat28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance();
        java.lang.String str37 = numberFormat35.format(100L);
        properFractionFormat34.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat39 = properFractionFormat34.getWholeFormat();
        boolean boolean40 = fieldPosition13.equals((java.lang.Object) properFractionFormat34);
        java.text.NumberFormat numberFormat41 = properFractionFormat34.getWholeFormat();
        java.text.AttributedCharacterIterator.Attribute attribute42 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = fractionFormat43.getNumeratorFormat();
        java.text.ParseException parseException48 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray49 = parseException48.getSuppressed();
        boolean boolean50 = numberFormat45.equals((java.lang.Object) throwableArray49);
        boolean boolean51 = attribute42.equals((java.lang.Object) numberFormat45);
        java.lang.String str52 = attribute42.toString();
        boolean boolean54 = attribute42.equals((java.lang.Object) "32");
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale55.getISO3Language();
        java.lang.String str59 = locale55.getScript();
        java.lang.String str60 = locale55.getDisplayScript();
        java.lang.String str61 = locale55.getDisplayVariant();
        java.util.Set<java.lang.String> strSet62 = locale55.getUnicodeLocaleAttributes();
        boolean boolean63 = attribute42.equals((java.lang.Object) locale55);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getIntegerInstance(locale55);
        properFractionFormat34.setNumeratorFormat(numberFormat64);
        boolean boolean66 = parsePosition8.equals((java.lang.Object) numberFormat64);
        java.lang.StringBuffer stringBuffer67 = null;
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition(2147483647);
        java.text.Format.Field field70 = fieldPosition69.getFieldAttribute();
        java.lang.String str71 = fieldPosition69.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer72 = numberFormat6.format((java.lang.Object) boolean66, stringBuffer67, fieldPosition69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0%" + "'", str33, "0%");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attribute42);
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str52, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(field70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]" + "'", str71, "java.text.FieldPosition[field=2147483647,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder16 = builder11.setExtension('a', "Canada");
        java.util.Locale.Builder builder19 = builder11.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder11.setUnicodeLocaleKeyword("java.text.FieldPosition[field=117,attribute=null,beginIndex=0,endIndex=-35]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=100]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.FieldPosition[field=117,attribute=null,beginIndex=0,endIndex=-35] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        java.lang.String str7 = numberFormat2.format((double) 10);
        boolean boolean9 = numberFormat2.equals((java.lang.Object) "");
        fractionFormat1.setNumeratorFormat(numberFormat2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        int int12 = numberFormat2.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0%" + "'", str7, "0%");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        int int8 = numberFormat7.getMinimumFractionDigits();
        java.lang.String str10 = numberFormat7.format((double) (byte) -1);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        numberFormat15.setCurrency(currency19);
        numberFormat14.setCurrency(currency19);
        boolean boolean22 = numberFormat14.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat14);
        fractionFormat5.setNumeratorFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction28 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction28.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction35 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) 'a');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction35.divide(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getNumberInstance(locale42);
        java.lang.Object obj45 = numberFormat44.clone();
        boolean boolean46 = fraction31.equals((java.lang.Object) numberFormat44);
        java.lang.StringBuffer stringBuffer47 = null;
        java.text.NumberFormat.Field field48 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field48, (int) (short) 0);
        int int51 = fieldPosition50.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction53 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        boolean boolean55 = fieldPosition50.equals((java.lang.Object) fraction54);
        fieldPosition50.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer58 = fractionFormat5.format((java.lang.Object) fraction31, stringBuffer47, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-1" + "'", str10, "-1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(field48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f));
        java.text.NumberFormat.Field field2 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field2, (int) (short) 0);
        java.lang.String str5 = fieldPosition4.toString();
        java.lang.String str6 = fieldPosition4.toString();
        fieldPosition4.setBeginIndex((int) (byte) 10);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getDisplayLanguage();
        boolean boolean11 = fieldPosition4.equals((java.lang.Object) str10);
        boolean boolean13 = fieldPosition4.equals((java.lang.Object) (short) -1);
        fieldPosition4.setBeginIndex((-117));
        int int16 = fieldPosition4.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = fraction1.compareTo((java.lang.Object) fieldPosition4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.FieldPosition cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str5, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str6, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        java.util.Locale locale1 = new java.util.Locale("Kanada");
        java.lang.String str2 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "kanada");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("anglais");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale11 = new java.util.Locale("francese");
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale5.getDisplayVariant();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.util.Locale.setDefault(locale15);
        java.lang.String str18 = locale5.getDisplayName(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Locale locale21 = new java.util.Locale("fr");
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale25.toLanguageTag();
        java.lang.String str29 = locale22.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale25);
        java.lang.String str31 = locale25.toLanguageTag();
        boolean boolean32 = numberFormat19.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale11.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str29, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ko" + "'", str31, "ko");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat11.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        numberFormat1.setGroupingUsed(false);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 10);
        parsePosition18.setErrorIndex((int) (byte) 1);
        java.lang.Object obj21 = fractionFormat15.parseObject("United Kingdom", parsePosition18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        numberFormat26.setCurrency(currency30);
        numberFormat25.setCurrency(currency30);
        fractionFormat15.setNumeratorFormat(numberFormat25);
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = numberFormat1.format((java.lang.Object) numberFormat25, stringBuffer34, fieldPosition35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "EUR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "EUR");
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.negate();
        double double8 = fraction7.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction13.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction27.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction43.multiply(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction40.add(fraction44);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction25.multiply(fraction40);
        java.util.Locale locale53 = java.util.Locale.UK;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayLanguage(locale55);
        java.lang.String str57 = locale53.getDisplayScript(locale55);
        java.lang.String str58 = locale55.toLanguageTag();
        java.lang.String str59 = locale55.getVariant();
        boolean boolean60 = fraction52.equals((java.lang.Object) locale55);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction12.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction52.reciprocal();
        int int63 = fraction7.compareTo((java.lang.Object) fraction52);
        java.text.ParseException parseException66 = new java.text.ParseException("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = fraction7.compareTo((java.lang.Object) "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-117.0d) + "'", double8 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-117 / 1" + "'", str17, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str56, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ko" + "'", str58, "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParseException: anglais", "united kingdom (FRENCH,zh,CN)", "32");
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.parseexception: anglais_UNITED KINGDOM (FRENCH,ZH,CN)_32");
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587\u7f8e\u56fd)");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.multiply(fraction22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance();
        boolean boolean25 = numberFormat24.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        boolean boolean27 = numberFormat24.isParseIntegerOnly();
        boolean boolean28 = fraction22.equals((java.lang.Object) boolean27);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.multiply(fraction34);
        int int36 = fraction22.compareTo((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str44 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int49 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.subtract(fraction48);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction43.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction40.subtract(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction39.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction30.divide(fraction54);
        java.lang.String str57 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction7.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        java.lang.String str60 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.parse("can", strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        boolean boolean66 = fraction58.equals((java.lang.Object) strMap64);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-117 / 1" + "'", str44, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-117) + "'", int49 == (-117));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1 / 1" + "'", str57, "1 / 1");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "117 / 1" + "'", str60, "117 / 1");
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj17 = numberFormat13.parseObject("hi!", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat11.parse("\244 32.00", parsePosition16);
        java.text.NumberFormat numberFormat20 = properFractionFormat11.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=-1,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10\240000 %" + "'", str8, "10\240000 %");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str18, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction19);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str16 = locale1.getISO3Country();
        java.lang.String str17 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        int int5 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setParseIntegerOnly(true);
        boolean boolean8 = numberFormat0.isParseIntegerOnly();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        boolean boolean18 = numberFormat11.equals((java.lang.Object) "");
        fractionFormat10.setNumeratorFormat(numberFormat11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        numberFormat23.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat23);
        numberFormat23.setGroupingUsed(true);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        numberFormat34.setMaximumIntegerDigits((-1));
        java.util.Currency currency37 = numberFormat34.getCurrency();
        numberFormat33.setCurrency(currency37);
        numberFormat32.setCurrency(currency37);
        numberFormat23.setCurrency(currency37);
        java.math.RoundingMode roundingMode41 = numberFormat23.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode41);
        java.lang.Object obj43 = numberFormat0.clone();
        java.lang.String str45 = numberFormat0.format((double) (short) 287);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "EUR");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "EUR");
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0 %" + "'", str45, "0 %");
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.Object obj6 = numberFormat5.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((-1));
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((int) (short) -1170);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer13 = fractionFormat7.format((java.lang.Object) parsePosition9, stringBuffer10, fieldPosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale11);
        java.lang.String str15 = locale11.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("KOREAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: KOREAN");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat1);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str7 = locale2.getISO3Language();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMinimumFractionDigits(2);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction2.abs();
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction26 = fraction23.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str31 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int36 = fraction35.intValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction30.add(fraction32);
        int int39 = fraction38.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int47 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.subtract(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction42.multiply(fraction43);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction38.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.negate();
        float float52 = fraction49.floatValue();
        boolean boolean53 = fraction27.equals((java.lang.Object) float52);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "117 / 1" + "'", str13, "117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-117 / 1" + "'", str31, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-117) + "'", int36 == (-117));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-117) + "'", int47 == (-117));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.util.Locale.setDefault(category3, locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str11 = locale0.getDisplayVariant(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "japonais (Japon)" + "'", str1, "japonais (Japon)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "japonais" + "'", str2, "japonais");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        java.util.Locale locale3 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=1,endIndex=0]", "\u52a0\u62ff\u5927", "\u5fb7\u56fd");
        java.lang.String str4 = locale3.getLanguage();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=1,endindex=0]" + "'", str4, "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=1,endindex=0]");
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(9);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.text.NumberFormat numberFormat5 = fractionFormat4.getNumeratorFormat();
        boolean boolean6 = parsePosition1.equals((java.lang.Object) numberFormat5);
        java.lang.Class<?> wildcardClass7 = numberFormat5.getClass();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str3, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        fieldPosition2.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        boolean boolean29 = fieldPosition2.equals((java.lang.Object) properFractionFormat23);
        java.text.NumberFormat numberFormat30 = properFractionFormat23.getWholeFormat();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat37.parse("java.text.ParseException: 100", parsePosition40);
        java.lang.String str42 = parsePosition40.toString();
        java.lang.Object obj43 = properFractionFormat23.parseObject("und", parsePosition40);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
// flaky:         org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0 %" + "'", str22, "0 %");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(fraction41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str42, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction7.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction7.abs();
        double double22 = fraction21.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction5.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction5.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction51 = new org.apache.commons.math.fraction.Fraction((double) 4);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction37.divide(fraction51);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.setVariant("");
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale locale57 = builder55.build();
        java.text.NumberFormat.Field field58 = java.text.NumberFormat.Field.PERMILLE;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.lang.String str64 = locale59.getDisplayCountry(locale60);
        boolean boolean65 = field58.equals((java.lang.Object) locale59);
        java.lang.String str66 = locale59.getDisplayVariant();
        java.lang.String str67 = locale59.getScript();
        java.lang.String str68 = locale59.getDisplayLanguage();
        java.util.Locale.Builder builder69 = builder55.setLocale(locale59);
        java.util.Locale locale70 = builder55.build();
        java.util.Locale.Builder builder71 = builder55.clear();
        java.util.Locale.Builder builder72 = builder55.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = fraction52.compareTo((java.lang.Object) builder72);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale$Builder cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(field58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "kor" + "'", str63, "kor");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str68, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition1.setBeginIndex((-117));
        java.lang.String str4 = fieldPosition1.toString();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        boolean boolean13 = locale9.hasExtensions();
        java.util.Locale.Builder builder14 = builder7.setLocale(locale9);
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder17 = builder14.setLanguageTag("coreano");
        boolean boolean18 = fieldPosition1.equals((java.lang.Object) builder14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder14.setUnicodeLocaleKeyword("FRENCH", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: FRENCH [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=-117,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=-117,endIndex=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setExtension('a', "-0 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = locale1.getDisplayName(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.lang.Class<?> wildcardClass6 = locale3.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "coreano" + "'", str4, "coreano");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale4 = new java.util.Locale("francese");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "francese");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        numberFormat2.setMaximumIntegerDigits(1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale8 = locale6.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale9.getDisplayName(locale10);
        java.lang.String str13 = locale6.getDisplayName(locale10);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        java.math.RoundingMode roundingMode16 = numberFormat14.getRoundingMode();
        java.text.NumberFormat numberFormat17 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat14, numberFormat17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 10);
        parsePosition22.setErrorIndex((int) (byte) 1);
        int int25 = parsePosition22.getErrorIndex();
        parsePosition22.setErrorIndex(4095);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat19.parse("Italian", parsePosition22);
        parsePosition22.setIndex(0);
        java.lang.String str31 = parsePosition22.toString();
        int int32 = parsePosition22.getErrorIndex();
        parsePosition22.setErrorIndex((int) (short) -1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cor\351en" + "'", str13, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode16.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=9]" + "'", str31, "java.text.ParsePosition[index=0,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.getISO3Language();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat8);
        java.lang.Object obj10 = numberFormat8.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) 1, (int) (byte) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        int int1 = numberFormat0.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        int int5 = numberFormat4.getMinimumFractionDigits();
        numberFormat4.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat14.setCurrency(currency18);
        numberFormat11.setCurrency(currency18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance();
        numberFormat21.setMaximumIntegerDigits((-1));
        java.util.Currency currency24 = numberFormat21.getCurrency();
        java.lang.String str26 = numberFormat21.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat11, numberFormat21);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance();
        java.lang.String str31 = numberFormat29.format(100L);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj37 = numberFormat33.parseObject("hi!", parsePosition36);
        java.lang.Number number38 = numberFormat29.parse("10,000%", parsePosition36);
        int int39 = parsePosition36.getErrorIndex();
        java.lang.Object obj40 = properFractionFormat27.parseObject("French", parsePosition36);
        java.lang.Object obj41 = fractionFormat8.parseObject("kor", parsePosition36);
        java.lang.Object obj42 = numberFormat0.parseObject("java.text.NumberFormat$Field(currency)", parsePosition36);
        java.lang.Object obj44 = numberFormat0.parseObject("1 / 1");
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
// flaky:         org.junit.Assert.assertEquals(currency18.toString(), "CAD");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency24);
// flaky:         org.junit.Assert.assertEquals(currency24.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0%" + "'", str26, "0%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + 1L + "'", obj44, 1L);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str3 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        java.lang.String str7 = locale0.getDisplayScript(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("en_US");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=en_us");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        java.util.Locale locale2 = new java.util.Locale("United Kingdom", "1");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat5 = fractionFormat4.getNumeratorFormat();
        int int6 = numberFormat5.getMinimumFractionDigits();
        numberFormat5.setParseIntegerOnly(false);
        int int9 = numberFormat5.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        int int12 = numberFormat11.getMinimumFractionDigits();
        java.util.Currency currency13 = numberFormat11.getCurrency();
        numberFormat5.setCurrency(currency13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.Format.Field field17 = null;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition(field17);
        fieldPosition18.setEndIndex((int) (byte) 97);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = numberFormat3.format((java.lang.Object) numberFormat5, stringBuffer16, fieldPosition18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "united kingdom_1");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(currency13);
// flaky:         org.junit.Assert.assertEquals(currency13.toString(), "CAD");
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(2147483647);
        boolean boolean11 = numberFormat8.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat8);
        java.lang.String str14 = numberFormat0.format((long) 52);
        boolean boolean15 = numberFormat0.isGroupingUsed();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
// flaky:         org.junit.Assert.assertEquals(currency3.toString(), "CAD");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0%" + "'", str14, "0%");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.setVariant("anglais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.removeUnicodeLocaleAttribute("java.text.ParseException: java.text.ParseException: 100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParseException: java.text.ParseException: 100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 3, (double) 116L, (int) (byte) 117);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        numberFormat41.setMaximumIntegerDigits((-1));
        java.util.Currency currency44 = numberFormat41.getCurrency();
        numberFormat40.setCurrency(currency44);
        numberFormat39.setCurrency(currency44);
        java.math.RoundingMode roundingMode47 = numberFormat39.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        numberFormat0.setMinimumFractionDigits((int) (short) 10);
        java.lang.String str53 = numberFormat0.format((long) 52);
        java.math.RoundingMode roundingMode54 = numberFormat0.getRoundingMode();
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field57, 0);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) (byte) -4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer63 = numberFormat0.format((long) 2147483647, stringBuffer56, fieldPosition62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
// flaky:         org.junit.Assert.assertEquals(currency7.toString(), "CAD");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency44);
// flaky:         org.junit.Assert.assertEquals(currency44.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + ".0000000000%" + "'", str53, ".0000000000%");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field57);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        boolean boolean20 = numberFormat8.equals((java.lang.Object) locale15);
        java.lang.String str21 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder6.setVariant("\uc77c\ubcf8\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj17 = numberFormat13.parseObject("hi!", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat11.parse("\244 32.00", parsePosition16);
        java.text.NumberFormat numberFormat20 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        int int24 = numberFormat21.getMinimumFractionDigits();
        numberFormat21.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode30 = numberFormat27.getRoundingMode();
        numberFormat21.setRoundingMode(roundingMode30);
        boolean boolean32 = numberFormat21.isGroupingUsed();
        properFractionFormat11.setWholeFormat(numberFormat21);
        java.text.NumberFormat numberFormat34 = properFractionFormat11.getWholeFormat();
        java.lang.Class<?> wildcardClass35 = properFractionFormat11.getClass();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str18, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("-116 / 117");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        java.util.Locale locale1 = new java.util.Locale("fr");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) -117);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction1.multiply(fraction5);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale7.getDisplayCountry(locale10);
        java.util.Locale.setDefault(locale7);
        java.lang.String str13 = locale7.getLanguage();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = fraction1.compareTo((java.lang.Object) fractionFormat15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.fraction.FractionFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United Kingdom" + "'", str11, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.lang.String str8 = locale7.getDisplayVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        java.lang.String str17 = numberFormat12.format((double) 10);
        boolean boolean19 = numberFormat12.equals((java.lang.Object) "");
        fractionFormat11.setNumeratorFormat(numberFormat12);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(2147483647);
        java.lang.Object obj24 = numberFormat12.parseObject("\uc601\uad6d", parsePosition23);
        java.lang.Object obj25 = numberFormat12.clone();
        java.lang.StringBuffer stringBuffer26 = null;
        java.text.NumberFormat.Field field27 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field27, (int) (short) 0);
        int int30 = fieldPosition29.getEndIndex();
        java.text.Format.Field field31 = fieldPosition29.getFieldAttribute();
        int int32 = fieldPosition29.getField();
        java.text.Format.Field field33 = fieldPosition29.getFieldAttribute();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        boolean boolean36 = fieldPosition29.equals((java.lang.Object) locale34);
        int int37 = fieldPosition29.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = numberFormat9.format((java.lang.Object) numberFormat12, stringBuffer26, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0%" + "'", str17, "0%");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(field27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder20.clear();
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder35.setExtension('x', "\uc911\uad6d\uc5b4\ub300\ub9cc)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ???????? (?????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.util.Currency currency10 = numberFormat7.getCurrency();
        numberFormat6.setCurrency(currency10);
        numberFormat3.setCurrency(currency10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        java.lang.String str18 = numberFormat13.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat3, numberFormat13);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj29 = numberFormat25.parseObject("hi!", parsePosition28);
        java.lang.Number number30 = numberFormat21.parse("10,000%", parsePosition28);
        int int31 = parsePosition28.getErrorIndex();
        int int32 = parsePosition28.getIndex();
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat19.parse("French", parsePosition28);
        int int34 = parsePosition28.getIndex();
        java.lang.Object obj35 = numberFormat0.parseObject("\uce90\ub098\ub2e4", parsePosition28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) ' ');
        java.lang.Object obj41 = properFractionFormat36.parseObject("java.text.parseexception: ", parsePosition40);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(52);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertNull(field2);
        org.junit.Assert.assertNull(field3);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMinimumIntegerDigits((int) (short) 10);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.util.Currency currency12 = numberFormat9.getCurrency();
        numberFormat8.setCurrency(currency12);
        java.lang.String str15 = numberFormat8.format((double) 100);
        java.math.RoundingMode roundingMode16 = numberFormat8.getRoundingMode();
        numberFormat5.setRoundingMode(roundingMode16);
        numberFormat4.setRoundingMode(roundingMode16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale19.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        numberFormat29.setCurrency(currency33);
        numberFormat26.setCurrency(currency33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        java.lang.String str41 = numberFormat36.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat26, numberFormat36);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance();
        java.lang.String str45 = numberFormat43.format(100L);
        properFractionFormat42.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance();
        java.lang.String str49 = numberFormat47.format(100L);
        int int50 = numberFormat47.getMinimumFractionDigits();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale52);
        java.lang.String str56 = numberFormat54.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43, numberFormat47, numberFormat54);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency59 = numberFormat58.getCurrency();
        numberFormat43.setCurrency(currency59);
        fractionFormat24.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat62 = fractionFormat24.getDenominatorFormat();
        java.math.RoundingMode roundingMode63 = numberFormat62.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode63);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency12);
// flaky:         org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10,000%" + "'", str15, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode16 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode16.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
// flaky:         org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
// flaky:         org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0%" + "'", str41, "0%");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str53, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "32" + "'", str56, "32");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency59);
// flaky:         org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + roundingMode63 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode63.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        java.util.Locale locale2 = new java.util.Locale("", "cor\351en (Cor\351e du Sud)");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "_COR\351EN (COR\351E DU SUD)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "COR\351EN (COR\351E DU SUD)" + "'", str3, "COR\351EN (COR\351E DU SUD)");
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str10 = locale5.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale5.getDisplayVariant(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str19 = locale0.getDisplayName(locale5);
        boolean boolean20 = locale0.hasExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.lang.Class<?> wildcardClass23 = fractionFormat21.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Object obj4 = numberFormat0.clone();
        boolean boolean5 = numberFormat0.isGroupingUsed();
        boolean boolean6 = numberFormat0.isGroupingUsed();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = properFractionFormat17.getNumeratorFormat();
        java.text.NumberFormat numberFormat33 = properFractionFormat17.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat17.getDenominatorFormat();
        java.text.AttributedCharacterIterator.Attribute attribute35 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat37 = fractionFormat36.getNumeratorFormat();
        java.text.NumberFormat numberFormat38 = fractionFormat36.getNumeratorFormat();
        java.text.ParseException parseException41 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray42 = parseException41.getSuppressed();
        boolean boolean43 = numberFormat38.equals((java.lang.Object) throwableArray42);
        boolean boolean44 = attribute35.equals((java.lang.Object) numberFormat38);
        numberFormat38.setParseIntegerOnly(true);
        properFractionFormat17.setWholeFormat(numberFormat38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction49 = properFractionFormat17.parse("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"?????\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(attribute35);
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        int int3 = fraction2.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        org.junit.Assert.assertNotNull(field0);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        boolean boolean27 = locale23.hasExtensions();
        java.util.Locale.Builder builder28 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale.Builder builder33 = builder18.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder18.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.addUnicodeLocaleAttribute("chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder36.addUnicodeLocaleAttribute("-0.009");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: -0.009 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(350);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale11);
        java.lang.String str16 = locale11.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale17.getDisplayScript(locale19);
        java.lang.String str23 = locale11.getDisplayVariant(locale19);
        boolean boolean24 = field0.equals((java.lang.Object) locale19);
        java.lang.String str25 = locale19.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en_GB" + "'", str25, "en_GB");
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        boolean boolean7 = numberFormat0.equals((java.lang.Object) (-117));
        java.lang.String str9 = numberFormat0.format((double) (-1));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int18 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.subtract(fraction17);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction14);
        float float21 = fraction14.floatValue();
        long long22 = fraction14.longValue();
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (short) 0);
        int int27 = fieldPosition26.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        boolean boolean31 = fieldPosition26.equals((java.lang.Object) fraction30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.util.Currency currency36 = numberFormat33.getCurrency();
        numberFormat32.setCurrency(currency36);
        java.lang.String str39 = numberFormat32.format((double) 100);
        numberFormat32.setParseIntegerOnly(false);
        numberFormat32.setMaximumIntegerDigits((int) 'x');
        java.lang.String str45 = numberFormat32.format((long) (short) 100);
        boolean boolean46 = fieldPosition26.equals((java.lang.Object) str45);
        fieldPosition26.setEndIndex((int) 'x');
        int int49 = fieldPosition26.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer50 = properFractionFormat10.format(fraction14, stringBuffer23, fieldPosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1" + "'", str9, "-1");
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-117) + "'", int18 == (-117));
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency36);
// flaky:         org.junit.Assert.assertEquals(currency36.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10\240000 %" + "'", str39, "10\240000 %");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "10\240000 %" + "'", str45, "10\240000 %");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode8 = numberFormat5.getRoundingMode();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getVariant();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat5, numberFormat11);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        int int11 = fraction10.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int19 = fraction18.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.subtract(fraction18);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction14.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction10.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction27.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction24.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction41.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction37.add(fraction41);
        java.text.ParseException parseException51 = new java.text.ParseException("anglais", (-117));
        java.text.ParseException parseException54 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray55 = parseException54.getSuppressed();
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field56, (int) (short) 0);
        int int59 = fieldPosition58.getEndIndex();
        java.text.ParseException parseException62 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray63 = parseException62.getSuppressed();
        int int64 = parseException62.getErrorOffset();
        boolean boolean65 = fieldPosition58.equals((java.lang.Object) parseException62);
        java.text.ParseException parseException68 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int69 = parseException68.getErrorOffset();
        parseException62.addSuppressed((java.lang.Throwable) parseException68);
        parseException54.addSuppressed((java.lang.Throwable) parseException62);
        parseException51.addSuppressed((java.lang.Throwable) parseException54);
        boolean boolean73 = fraction37.equals((java.lang.Object) parseException54);
        boolean boolean74 = fraction23.equals((java.lang.Object) fraction37);
        float float75 = fraction37.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-117) + "'", int19 == (-117));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-117 / 1" + "'", str28, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-117) + "'", int45 == (-117));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + (-116.0f) + "'", float75 == (-116.0f));
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        java.text.ParseException parseException2 = new java.text.ParseException("", 10);
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int6 = parseException5.getErrorOffset();
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.text.ParseException parseException10 = new java.text.ParseException("\u6cd5\u6587", (-117));
        java.text.ParseException parseException13 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray14 = parseException13.getSuppressed();
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field15, (int) (short) 0);
        int int18 = fieldPosition17.getEndIndex();
        java.text.ParseException parseException21 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray22 = parseException21.getSuppressed();
        int int23 = parseException21.getErrorOffset();
        boolean boolean24 = fieldPosition17.equals((java.lang.Object) parseException21);
        java.text.ParseException parseException27 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int28 = parseException27.getErrorOffset();
        parseException21.addSuppressed((java.lang.Throwable) parseException27);
        parseException13.addSuppressed((java.lang.Throwable) parseException21);
        parseException10.addSuppressed((java.lang.Throwable) parseException21);
        parseException5.addSuppressed((java.lang.Throwable) parseException10);
        java.text.ParseException parseException35 = new java.text.ParseException("\u52a0\u62ff\u5927", (int) ' ');
        parseException10.addSuppressed((java.lang.Throwable) parseException35);
        java.text.ParseException parseException39 = new java.text.ParseException("10\240000 %", 117);
        java.text.ParseException parseException42 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.lang.Throwable[] throwableArray43 = parseException42.getSuppressed();
        java.text.ParseException parseException46 = new java.text.ParseException("", 10);
        java.text.ParseException parseException49 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int50 = parseException49.getErrorOffset();
        parseException46.addSuppressed((java.lang.Throwable) parseException49);
        java.text.ParseException parseException54 = new java.text.ParseException("\u6cd5\u6587", (-117));
        java.text.ParseException parseException57 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray58 = parseException57.getSuppressed();
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field59, (int) (short) 0);
        int int62 = fieldPosition61.getEndIndex();
        java.text.ParseException parseException65 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray66 = parseException65.getSuppressed();
        int int67 = parseException65.getErrorOffset();
        boolean boolean68 = fieldPosition61.equals((java.lang.Object) parseException65);
        java.text.ParseException parseException71 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int72 = parseException71.getErrorOffset();
        parseException65.addSuppressed((java.lang.Throwable) parseException71);
        parseException57.addSuppressed((java.lang.Throwable) parseException65);
        parseException54.addSuppressed((java.lang.Throwable) parseException65);
        parseException49.addSuppressed((java.lang.Throwable) parseException54);
        parseException42.addSuppressed((java.lang.Throwable) parseException54);
        java.lang.Throwable[] throwableArray78 = parseException54.getSuppressed();
        parseException39.addSuppressed((java.lang.Throwable) parseException54);
        parseException35.addSuppressed((java.lang.Throwable) parseException54);
        int int81 = parseException35.getErrorOffset();
        java.lang.Class<?> wildcardClass82 = parseException35.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 32 + "'", int81 == 32);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = numberFormat2.parseObject("\ubbf8\uad6d");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) ' ');
        int int6 = fieldPosition2.getBeginIndex();
        int int7 = fieldPosition2.getField();
        fieldPosition2.setEndIndex((int) '4');
        java.lang.String str10 = fieldPosition2.toString();
        java.text.Format.Field field11 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setBeginIndex((-35));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=52]" + "'", str10, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=52]");
        org.junit.Assert.assertNotNull(field11);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clearExtensions();
        java.util.Locale.Builder builder60 = builder59.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder60.setRegion("java.text.ParsePosition[index=-117,errorIndex=-1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.ParsePosition[index=-117,errorIndex=-1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("us");
        java.lang.Object obj2 = null;
        boolean boolean3 = languageRange1.equals(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh_CN", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zh_cn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(1);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (short) -4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=0,ENDINDEX=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseexception: java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=0,endindex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Locale.Builder builder20 = builder12.setLocale(locale15);
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale25 = new java.util.Locale("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str26 = locale25.getVariant();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale25);
        java.util.Locale.setDefault(category0, locale25);
        java.lang.String str29 = locale25.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(locale25.toString(), "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str26, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str29, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat4.setCurrency(currency11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.util.Currency currency17 = numberFormat14.getCurrency();
        java.lang.String str19 = numberFormat14.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3, numberFormat4, numberFormat14);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.lang.String str23 = numberFormat21.format(100L);
        properFractionFormat20.setWholeFormat(numberFormat21);
        java.text.NumberFormat numberFormat25 = properFractionFormat20.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        boolean boolean27 = field0.equals((java.lang.Object) numberFormat25);
        java.math.RoundingMode roundingMode28 = numberFormat25.getRoundingMode();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0%" + "'", str19, "0%");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode28.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat7 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = fractionFormat6.getNumeratorFormat();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj14 = numberFormat10.parseObject("hi!", parsePosition13);
        org.apache.commons.math.fraction.Fraction fraction15 = fractionFormat6.parse("-117 / 1", parsePosition13);
        java.lang.String str16 = parsePosition13.toString();
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat3.parse("cor\351en (Cor\351e du Sud)", parsePosition13);
        parsePosition13.setErrorIndex((int) (byte) -1);
        parsePosition13.setErrorIndex((-4096));
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(fraction15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str16, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertNull(fraction17);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.getScript();
        java.lang.String str11 = locale6.getDisplayScript();
        java.lang.String str12 = locale6.getDisplayVariant();
        java.util.Set<java.lang.String> strSet13 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale6);
        boolean boolean15 = numberFormat0.equals((java.lang.Object) numberFormat14);
        java.lang.StringBuffer stringBuffer17 = null;
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field18, (int) (short) 0);
        java.lang.String str21 = fieldPosition20.toString();
        java.lang.String str22 = fieldPosition20.toString();
        fieldPosition20.setBeginIndex((int) (byte) 10);
        int int25 = fieldPosition20.getBeginIndex();
        java.text.Format.Field field26 = fieldPosition20.getFieldAttribute();
        java.lang.String str27 = field26.toString();
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition(field26, (int) (short) 287);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = numberFormat14.format((java.lang.Object) 32, stringBuffer17, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str21, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str22, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str27, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-117.0d), (int) (short) -2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -117 to fraction (-9,223,372,036,854,775,690/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int6 = fraction5.intValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.subtract(fraction5);
        boolean boolean9 = fraction5.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.reciprocal();
        float float11 = fraction5.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction1.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((double) 0.0f);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int19 = fraction18.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction15.subtract(fraction18);
        boolean boolean22 = fraction18.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.reciprocal();
        float float24 = fraction18.floatValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction14.multiply(fraction18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction26 = fraction1.divide(fraction25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The fraction to divide by must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-117) + "'", int6 == (-117));
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + (-117.0f) + "'", float11 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-117) + "'", int19 == (-117));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + (-117.0f) + "'", float24 == (-117.0f));
        org.junit.Assert.assertNotNull(fraction25);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field7, 3);
        int int11 = fieldPosition10.getField();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(9);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        boolean boolean18 = parsePosition13.equals((java.lang.Object) numberFormat17);
        boolean boolean19 = numberFormat17.isParseIntegerOnly();
        boolean boolean20 = fieldPosition10.equals((java.lang.Object) numberFormat17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6, numberFormat17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u6cd5\u6587" + "'", str15, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        java.util.Locale locale2 = new java.util.Locale("java.text.NumberFormat$Field(percent)", "zh");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.numberformat$field(percent)_ZH");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat23.getDenominatorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction26 = fractionFormat23.parse("english");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"english\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat24);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Taiwan");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale11, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList17, filteringMode19);
        java.lang.String[] strArray28 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale38.getScript();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale38, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList44, filteringMode46);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter(languageRangeList33, (java.util.Collection<java.util.Locale>) localeList47, filteringMode48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList3, strCollection6, filteringMode48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale22 = java.util.Locale.getDefault(category15);
        java.util.Locale locale23 = java.util.Locale.getDefault(category15);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale27 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str28 = locale23.getDisplayLanguage(locale27);
        java.util.Locale.Builder builder29 = builder14.setLocale(locale23);
        java.util.Locale.Builder builder31 = builder14.setRegion("FR");
        java.util.Locale.Builder builder33 = builder14.setVariant("");
        java.util.Locale.Builder builder35 = builder14.removeUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder38 = builder14.setExtension('x', "35");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder14.setScript("java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale27.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean" + "'", str28, "Korean");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction7.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction21 = fraction7.abs();
        double double22 = fraction21.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction5.subtract(fraction21);
        int int24 = fraction5.getDenominator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.Object obj6 = numberFormat5.clone();
        numberFormat5.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat2.equals((java.lang.Object) numberFormat4);
        java.lang.Object obj6 = numberFormat4.clone();
        java.lang.Object obj7 = numberFormat4.clone();
        java.lang.Object obj8 = numberFormat4.clone();
        numberFormat4.setMaximumIntegerDigits(35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        numberFormat0.setMaximumFractionDigits((int) (short) -117);
        int int7 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setGroupingUsed(false);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(13689);
        boolean boolean12 = numberFormat0.equals((java.lang.Object) fieldPosition11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getVariant();
        java.util.Locale locale19 = locale17.stripExtensions();
        boolean boolean20 = numberFormat0.equals((java.lang.Object) locale17);
        java.lang.String str21 = locale17.getDisplayCountry();
        java.lang.String str22 = locale17.getDisplayScript();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction1.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str11 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int16 = fraction15.intValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.subtract(fraction15);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction10.add(fraction12);
        int int19 = fraction18.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction22 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.multiply(fraction22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance();
        boolean boolean25 = numberFormat24.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        boolean boolean27 = numberFormat24.isParseIntegerOnly();
        boolean boolean28 = fraction22.equals((java.lang.Object) boolean27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction7.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction1.divide(fraction30);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-117 / 1" + "'", str11, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-117) + "'", int16 == (-117));
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh_TW", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zh_tw");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.setExtension('#', "java.text.ParsePosition[index=10,errorIndex=117]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.lang.String str4 = numberFormat1.format((double) (byte) -1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat8.setCurrency(currency13);
        boolean boolean16 = numberFormat8.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat8);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.lang.String str23 = locale20.getVariant();
        java.util.Locale.setDefault(category18, locale20);
        java.lang.String str25 = locale20.getDisplayName();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale20);
        boolean boolean27 = numberFormat8.equals((java.lang.Object) locale20);
        java.lang.String str28 = locale20.getDisplayScript();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u82f1\u6587\u52a0\u62ff\u5927)", (double) (-117));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("Deutsch");
        java.util.Locale locale11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setUnicodeLocaleKeyword("\u97d3\u6587", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "deutsch");
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        boolean boolean14 = locale10.hasExtensions();
        java.util.Locale.Builder builder15 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Locale.Builder builder20 = builder4.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        int int7 = fieldPosition2.getBeginIndex();
        int int8 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder2.setExtension('a', "java.text.NumberFormat$Field(integer)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: java.text.NumberFormat$Field(integer) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((double) '#');
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        java.lang.String str9 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        java.lang.String str14 = fieldPosition13.toString();
        java.lang.String str15 = fieldPosition13.toString();
        fieldPosition13.setBeginIndex((int) (byte) 10);
        fieldPosition13.setBeginIndex((int) '4');
        boolean boolean21 = fieldPosition13.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field22 = fieldPosition13.getFieldAttribute();
        fieldPosition13.setEndIndex(10);
        int int25 = fieldPosition13.getBeginIndex();
        int int26 = fieldPosition13.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = fractionFormat5.format(fraction7, stringBuffer10, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "35 / 1" + "'", str8, "35 / 1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "35 / 1" + "'", str9, "35 / 1");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str15, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ko");
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) 'x', (double) '#', 100);
        boolean boolean6 = languageRange1.equals((java.lang.Object) fraction5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.lang.String str4 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        boolean boolean12 = fraction8.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.reciprocal();
        double double14 = fraction13.doubleValue();
        boolean boolean15 = fieldPosition2.equals((java.lang.Object) fraction13);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        boolean boolean23 = fraction19.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction13.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.abs();
        double double27 = fraction26.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((double) 11.7f);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str33 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction32);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int38 = fraction37.intValue();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction32.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction29.divide(fraction41);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction26.multiply(fraction29);
        double double45 = fraction44.doubleValue();
        int int46 = fraction44.getNumerator();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.008547008547008548d) + "'", double14 == (-0.008547008547008548d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 117.0d + "'", double27 == 117.0d);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-117 / 1" + "'", str33, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-117) + "'", int38 == (-117));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1368.9d + "'", double45 == 1368.9d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13689 + "'", int46 == 13689);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        boolean boolean6 = numberFormat0.equals((java.lang.Object) locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = fractionFormat8.parseObject("und");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(fractionFormat8);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        java.math.RoundingMode roundingMode11 = numberFormat9.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        java.lang.Object obj13 = null;
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field15, (int) (short) 0);
        int int18 = fieldPosition17.getEndIndex();
        java.text.ParseException parseException21 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray22 = parseException21.getSuppressed();
        int int23 = parseException21.getErrorOffset();
        boolean boolean24 = fieldPosition17.equals((java.lang.Object) parseException21);
        java.lang.String str25 = fieldPosition17.toString();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getDisplayVariant();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale26.getDisplayScript(locale28);
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleKeys();
        boolean boolean33 = fieldPosition17.equals((java.lang.Object) locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer34 = numberFormat9.format(obj13, stringBuffer14, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str25, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = locale1.getDisplayName(locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str6 = locale3.getISO3Country();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale3);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 117);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "coreano" + "'", str4, "coreano");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str5, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        int int2 = numberFormat1.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale7);
        java.lang.Object obj11 = numberFormat10.clone();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.ParseException: cor\351en", parsePosition14);
        parsePosition14.setIndex(9);
        java.lang.Object obj18 = properFractionFormat3.parseObject("Allemagne", parsePosition14);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.lang.String str24 = numberFormat19.format((double) 10);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale25.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.text.NumberFormat numberFormat28 = fractionFormat27.getDenominatorFormat();
        java.lang.String str30 = numberFormat28.format((double) 14L);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getNumeratorFormat();
        int int33 = numberFormat32.getMinimumFractionDigits();
        numberFormat32.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19, numberFormat28, numberFormat32);
        properFractionFormat3.setWholeFormat(numberFormat28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str26, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale0);
        java.lang.String str6 = locale0.getCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        int int8 = numberFormat7.getMaximumFractionDigits();
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        int int14 = fieldPosition13.getEndIndex();
        java.util.Locale locale17 = new java.util.Locale("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=-1,endIndex=0]", "China");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.util.Locale.setDefault(category18, locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.lang.String str26 = locale17.getDisplayVariant(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        boolean boolean28 = fieldPosition13.equals((java.lang.Object) fractionFormat27);
        fieldPosition13.setBeginIndex((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer31 = numberFormat7.format((double) (byte) 32, stringBuffer10, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "United Kingdom" + "'", str4, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GB" + "'", str6, "GB");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale17.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(per mille),beginindex=-1,endindex=0]_CHINA");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        boolean boolean8 = numberFormat2.equals((java.lang.Object) locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str10 = locale6.getDisplayScript();
        java.util.Locale.Builder builder11 = builder1.setLocale(locale6);
        java.lang.String str12 = locale6.getLanguage();
        java.lang.String str13 = locale6.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale22.getVariant();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale20.getDisplayLanguage(locale22);
        java.util.Set<java.lang.Character> charSet26 = locale22.getExtensionKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale22);
        java.lang.String str28 = locale22.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale29);
        java.lang.String str33 = locale22.getDisplayLanguage(locale29);
        java.lang.String str34 = locale6.getDisplayCountry(locale22);
        java.lang.Class<?> wildcardClass35 = locale6.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u97d3\u6587" + "'", str21, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese" + "'", str25, "Chinese");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u82f1\u6587" + "'", str33, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        boolean boolean22 = locale18.hasExtensions();
        java.util.Locale.Builder builder23 = builder16.setLocale(locale18);
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet24, filteringMode82);
        java.util.Locale locale86 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.lang.String str88 = locale87.getDisplayCountry();
        java.lang.String str89 = locale86.getDisplayCountry(locale87);
        java.util.Locale locale91 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale91);
        java.lang.String str93 = locale87.getDisplayScript(locale91);
        java.util.Set<java.lang.String> strSet94 = locale91.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet94);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap96 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList97 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap96);
        java.util.Collection<java.lang.String> strCollection98 = null;
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\uce90\ub098\ub2e4" + "'", str88, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "China" + "'", str89, "China");
        org.junit.Assert.assertEquals(locale91.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(languageRangeList97);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.divide(fraction11);
        java.util.Locale locale14 = java.util.Locale.UK;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = locale16.getDisplayName(locale23);
        boolean boolean27 = fraction11.equals((java.lang.Object) locale16);
        java.lang.String str28 = locale16.getLanguage();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number5 = numberFormat0.parse("CAN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"CAN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance();
        java.lang.String str45 = numberFormat43.format(100L);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj51 = numberFormat47.parseObject("hi!", parsePosition50);
        java.lang.Number number52 = numberFormat43.parse("10,000%", parsePosition50);
        fractionFormat5.setDenominatorFormat(numberFormat43);
        java.text.NumberFormat numberFormat54 = fractionFormat5.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertNotNull(numberFormat54);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setVariant("");
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        boolean boolean27 = locale23.hasExtensions();
        java.util.Locale.Builder builder28 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clear();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale.Builder builder33 = builder18.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder34.setLanguage("JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: JAVA.TEXT.PARSEEXCEPTION: JAVA.TEXT.PARSEEXCEPTION: 100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale7);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        numberFormat16.setMaximumIntegerDigits((-1));
        java.util.Currency currency19 = numberFormat16.getCurrency();
        numberFormat15.setCurrency(currency19);
        numberFormat12.setCurrency(currency19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat12);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        numberFormat23.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean29 = numberFormat28.isGroupingUsed();
        numberFormat28.setParseIntegerOnly(false);
        java.lang.Number number33 = numberFormat28.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat23, numberFormat28);
        java.text.NumberFormat numberFormat35 = properFractionFormat34.getWholeFormat();
        java.lang.Object obj36 = numberFormat35.clone();
        java.lang.Object obj37 = numberFormat35.clone();
        boolean boolean38 = numberFormat10.equals((java.lang.Object) numberFormat35);
        boolean boolean39 = numberFormat10.isGroupingUsed();
        boolean boolean40 = numberFormat0.equals((java.lang.Object) numberFormat10);
        int int41 = numberFormat0.getMaximumFractionDigits();
        numberFormat0.setMaximumIntegerDigits((int) (byte) -117);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = numberFormat0.parseObject("und-francese");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 0L + "'", number33, 0L);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.lang.String str4 = numberFormat1.format((double) (byte) -1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj10 = numberFormat6.parseObject("hi!", parsePosition9);
        java.lang.String str11 = parsePosition9.toString();
        java.lang.Object obj12 = numberFormat1.parseObject("", parsePosition9);
        int int13 = parsePosition9.getIndex();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str11, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = locale9.getDisplayName(locale16);
        java.lang.String str20 = locale16.getScript();
        java.lang.String str21 = locale0.getDisplayName(locale16);
        java.lang.String str22 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zho" + "'", str22, "zho");
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        java.util.Locale locale2 = new java.util.Locale("5.200%", "10,000%");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        numberFormat3.setGroupingUsed(true);
        org.junit.Assert.assertEquals(locale2.toString(), "5.200%_10,000%");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction1.negate();
        byte byte4 = fraction1.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 10 + "'", byte4 == (byte) 10);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale15 = java.util.Locale.getDefault(category8);
        java.util.Locale locale16 = java.util.Locale.getDefault(category8);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        int int18 = numberFormat17.getMaximumFractionDigits();
        numberFormat17.setMinimumFractionDigits((int) 'a');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        boolean boolean22 = languageRange1.equals((java.lang.Object) properFractionFormat21);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "can" + "'", str6, "can");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("java.text.ParsePosition[index=10,errorIndex=117]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseposition[index=10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        int int9 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        numberFormat8.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getDisplayCountry();
        boolean boolean20 = numberFormat8.equals((java.lang.Object) locale15);
        java.lang.String str21 = locale15.getDisplayCountry();
        java.util.Locale.Builder builder22 = builder6.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("0%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("-13.572");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-13.572");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder24.setLocale(locale27);
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder33 = builder30.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder33.setExtension('4', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = locale0.stripExtensions();
        boolean boolean6 = locale0.hasExtensions();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.lang.StringBuffer stringBuffer10 = null;
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 0);
        int int14 = fieldPosition13.getEndIndex();
        java.text.Format.Field field15 = fieldPosition13.getFieldAttribute();
        int int16 = fieldPosition13.getField();
        fieldPosition13.setBeginIndex(97);
        int int19 = fieldPosition13.getEndIndex();
        fieldPosition13.setEndIndex(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat8.format((java.lang.Object) (short) 35, stringBuffer10, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int17 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.subtract(fraction16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        boolean boolean33 = fraction18.equals((java.lang.Object) localeList32);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction11.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int40 = fraction39.intValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.subtract(fraction39);
        boolean boolean43 = fraction39.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int52 = fraction51.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction47.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction39.add(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str61 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int66 = fraction65.intValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.subtract(fraction65);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction60.add(fraction62);
        int int69 = fraction68.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction72 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction68.multiply(fraction72);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getNumberInstance();
        boolean boolean75 = numberFormat74.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat76 = new org.apache.commons.math.fraction.FractionFormat(numberFormat74);
        boolean boolean77 = numberFormat74.isParseIntegerOnly();
        boolean boolean78 = fraction72.equals((java.lang.Object) boolean77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction57.multiply(fraction72);
        int int80 = fraction79.intValue();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction56.add(fraction79);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction35.subtract(fraction56);
        int int83 = fraction35.getDenominator();
        java.lang.String str84 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction35);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-117) + "'", int17 == (-117));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-117) + "'", int40 == (-117));
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-117) + "'", int52 == (-117));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-117 / 1" + "'", str61, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-117) + "'", int66 == (-117));
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 117 + "'", int83 == 117);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-116 / 117" + "'", str84, "-116 / 117");
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder14 = builder11.setUnicodeLocaleKeyword("TW", "anglais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder11.setScript("\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        java.util.Locale locale3 = new java.util.Locale("13,572", "inglese", "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder56.setUnicodeLocaleKeyword("GB", "\u97d3\u6587\u6cd5\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction7.add(fraction9);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getDisplayVariant();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = locale19.getDisplayCountry(locale20);
        java.lang.String str23 = locale16.getDisplayCountry(locale20);
        boolean boolean24 = fraction7.equals((java.lang.Object) locale16);
        java.util.Set<java.lang.String> strSet25 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getScript();
        java.util.Locale.setDefault(category26, locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale28);
        java.lang.String str34 = locale16.getDisplayVariant(locale28);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getIntegerInstance(locale28);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        numberFormat39.setCurrency(currency46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        numberFormat49.setMaximumIntegerDigits((-1));
        java.util.Currency currency52 = numberFormat49.getCurrency();
        java.lang.String str54 = numberFormat49.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat39, numberFormat49);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance();
        java.lang.String str59 = numberFormat57.format(100L);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj65 = numberFormat61.parseObject("hi!", parsePosition64);
        java.lang.Number number66 = numberFormat57.parse("10,000%", parsePosition64);
        int int67 = parsePosition64.getErrorIndex();
        int int68 = parsePosition64.getIndex();
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat55.parse("French", parsePosition64);
        int int70 = parsePosition64.getIndex();
        java.lang.Object obj71 = numberFormat36.parseObject("\uce90\ub098\ub2e4", parsePosition64);
        int int72 = numberFormat36.getMinimumIntegerDigits();
        java.util.Currency currency73 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat35, numberFormat36);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int79 = fraction78.intValue();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction75.subtract(fraction78);
        double double81 = fraction80.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction80.negate();
        double double83 = fraction82.doubleValue();
        java.lang.StringBuffer stringBuffer84 = null;
        java.text.NumberFormat.Field field85 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition87 = new java.text.FieldPosition((java.text.Format.Field) field85, (int) (short) 0);
        int int88 = fieldPosition87.getEndIndex();
        java.text.Format.Field field89 = fieldPosition87.getFieldAttribute();
        int int90 = fieldPosition87.getField();
        fieldPosition87.setBeginIndex(97);
        int int93 = fieldPosition87.getEndIndex();
        fieldPosition87.setEndIndex(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer96 = properFractionFormat74.format(fraction82, stringBuffer84, fieldPosition87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-117 / 1" + "'", str8, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uce90\ub098\ub2e4" + "'", str21, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "China" + "'", str22, "China");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0%" + "'", str54, "0%");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100" + "'", str59, "100");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(number66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(currency73);
        org.junit.Assert.assertEquals(currency73.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-117) + "'", int79 == (-117));
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 117.0d + "'", double81 == 117.0d);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-117.0d) + "'", double83 == (-117.0d));
        org.junit.Assert.assertNotNull(field85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        java.lang.String str16 = numberFormat9.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat18 = fractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat9, numberFormat18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 10);
        parsePosition22.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat19.parse("fran\347ais", parsePosition22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.util.Currency currency29 = numberFormat26.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        boolean boolean31 = parsePosition22.equals((java.lang.Object) fractionFormat30);
        java.lang.Object obj32 = numberFormat6.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition22);
        java.lang.Object obj33 = numberFormat2.parseObject("\u610f\u5927\u5229\u6587\u610f\u5927\u5229)", parsePosition22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uce90\ub098\ub2e4" + "'", str1, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10,000%" + "'", str16, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(fraction25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        java.util.Locale locale2 = new java.util.Locale("java.text.NumberFormat$Field(integer)", "chinois (Taiwan)");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.numberformat$field(integer)_CHINOIS (TAIWAN)");
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale2);
        java.lang.Object obj6 = numberFormat5.clone();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance();
        java.lang.String str10 = numberFormat8.format(100L);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj16 = numberFormat12.parseObject("hi!", parsePosition15);
        java.lang.Number number17 = numberFormat8.parse("10,000%", parsePosition15);
        int int18 = parsePosition15.getErrorIndex();
        int int19 = parsePosition15.getIndex();
        int int20 = parsePosition15.getErrorIndex();
        java.lang.Object obj21 = numberFormat5.parseObject("cor\351en", parsePosition15);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        int int27 = numberFormat24.getMinimumFractionDigits();
        numberFormat24.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode33 = numberFormat30.getRoundingMode();
        numberFormat24.setRoundingMode(roundingMode33);
        numberFormat23.setRoundingMode(roundingMode33);
        boolean boolean36 = parsePosition15.equals((java.lang.Object) numberFormat23);
        int int37 = numberFormat23.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100" + "'", str10, "100");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(number17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + roundingMode33 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode33.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.text.ParseException: java.text.ParsePosition[index=52,errorIndex=52]", (double) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=120.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("cor\351en (Cor\351e du Sud)", (double) (short) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        boolean boolean7 = numberFormat2.equals((java.lang.Object) throwableArray6);
        numberFormat2.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        java.text.NumberFormat numberFormat12 = null;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat17.setCurrency(currency21);
        numberFormat14.setCurrency(currency21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        java.lang.String str29 = numberFormat24.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat14, numberFormat24);
        numberFormat14.setMinimumIntegerDigits((int) 'x');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat12, numberFormat14);
        numberFormat14.setMaximumIntegerDigits(0);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.lang.String str12 = locale8.getDisplayCountry();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) locale8);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale19.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder26 = builder16.setLocale(locale24);
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder28 = builder26.clearExtensions();
        java.util.Locale locale29 = builder28.build();
        java.util.Locale locale32 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str34 = locale29.getDisplayVariant(locale32);
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str36 = locale32.getDisplayLanguage(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = numberFormat1.format((java.lang.Object) str36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u671d\u9c9c\u6587" + "'", str25, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale32.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str36, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 3);
        int int4 = fieldPosition3.getField();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(9);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        boolean boolean11 = parsePosition6.equals((java.lang.Object) numberFormat10);
        boolean boolean12 = numberFormat10.isParseIntegerOnly();
        boolean boolean13 = fieldPosition3.equals((java.lang.Object) numberFormat10);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits((-1));
        java.util.Currency currency32 = numberFormat29.getCurrency();
        numberFormat28.setCurrency(currency32);
        numberFormat25.setCurrency(currency32);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat25);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        numberFormat36.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean42 = numberFormat41.isGroupingUsed();
        numberFormat41.setParseIntegerOnly(false);
        java.lang.Number number46 = numberFormat41.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25, numberFormat36, numberFormat41);
        java.text.NumberFormat numberFormat48 = properFractionFormat47.getWholeFormat();
        java.lang.Object obj49 = numberFormat48.clone();
        java.lang.Object obj50 = numberFormat48.clone();
        boolean boolean51 = numberFormat23.equals((java.lang.Object) numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat48);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (byte) 10);
        int int56 = parsePosition55.getIndex();
        java.lang.Object obj57 = numberFormat17.parseObject("ko", parsePosition55);
        java.lang.Object obj58 = numberFormat10.parseObject("-1 / 1", parsePosition55);
        parsePosition55.setIndex(96);
        int int61 = parsePosition55.getErrorIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str8, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0L + "'", number46, 0L);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.lang.String str4 = numberFormat1.format((double) (byte) -1);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getNumberInstance(locale6);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat8.setCurrency(currency13);
        boolean boolean16 = numberFormat8.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat8);
        numberFormat1.setParseIntegerOnly(true);
        numberFormat1.setMinimumIntegerDigits(3);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale26.getScript();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale26, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.lang.String[] strArray43 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = numberFormat1.format((java.lang.Object) strList44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        java.util.Locale locale2 = new java.util.Locale("java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]", "CN");
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.Object obj4 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]" + "'", str3, "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]_CN");
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        java.lang.String str41 = numberFormat34.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat34, numberFormat43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj50 = numberFormat46.parseObject("hi!", parsePosition49);
        java.lang.String str51 = parsePosition49.toString();
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat44.parse("\244 32.00", parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat17.parse("\uc911\uad6d\uc5b4", parsePosition49);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.text.NumberFormat numberFormat58 = fractionFormat57.getDenominatorFormat();
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat57.parse("french", parsePosition61);
        parsePosition61.setErrorIndex((int) (short) -117);
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat17.parse("100", parsePosition61);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale67);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 10);
        parsePosition71.setErrorIndex((int) (byte) 1);
        java.lang.Object obj74 = fractionFormat68.parseObject("United Kingdom", parsePosition71);
        int int75 = parsePosition71.getIndex();
        java.lang.Object obj76 = properFractionFormat17.parseObject("\244 117.00", parsePosition71);
        parsePosition71.setIndex((int) '4');
        int int79 = parsePosition71.getIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str51, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str56, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat68);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        numberFormat24.setParseIntegerOnly(false);
        java.util.Locale locale30 = new java.util.Locale("java.text.ParsePosition[index=10,errorIndex=10]", "\u52a0\u62ff\u5927", "java.text.ParseException: 100");
        boolean boolean31 = numberFormat24.equals((java.lang.Object) "java.text.ParseException: 100");
        boolean boolean32 = numberFormat24.isGroupingUsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = numberFormat24.parseObject("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "\u52a0\u62ff\u5927_java.text.ParseException: 100");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        java.util.Locale locale3 = new java.util.Locale("\244 10.00", "\u5fb7\u570b", "5.200%");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\244\u5fb7\u570b_5.200%");
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        int int9 = parsePosition6.getErrorIndex();
        java.lang.Number number10 = numberFormat3.parse("CAN", parsePosition6);
        int int11 = parsePosition6.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        java.lang.String str47 = numberFormat45.format(100L);
        int int48 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        numberFormat51.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode54 = numberFormat51.getRoundingMode();
        numberFormat45.setRoundingMode(roundingMode54);
        numberFormat44.setRoundingMode(roundingMode54);
        numberFormat24.setRoundingMode(roundingMode54);
        java.lang.Object obj58 = numberFormat24.clone();
        numberFormat24.setMinimumFractionDigits((-117));
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.NumberFormat.Field field63 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field63, (int) (short) 0);
        java.lang.String str66 = fieldPosition65.toString();
        java.lang.String str67 = fieldPosition65.toString();
        fieldPosition65.setBeginIndex((int) (byte) 10);
        fieldPosition65.setEndIndex((int) (byte) 1);
        java.text.Format.Field field72 = fieldPosition65.getFieldAttribute();
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition(field72, 32);
        java.text.FieldPosition fieldPosition75 = new java.text.FieldPosition(field72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer76 = numberFormat24.format((java.lang.Object) "cinese (Cina)", stringBuffer62, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100" + "'", str47, "100");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str66, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field72);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale3 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setVariant("");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale3.getDisplayLanguage(locale11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str16 = locale3.getDisplayLanguage(locale15);
        java.lang.String str17 = locale0.getDisplayScript(locale3);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale locale23 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=32]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        java.util.Locale.setDefault(locale23);
        java.lang.String str26 = locale3.getDisplayVariant(locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = locale23.getUnicodeLocaleType("\244 97.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ? 97.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale3.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uce90\ub098\ub2e4" + "'", str13, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=10,endindex=32]_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        numberFormat14.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        numberFormat18.setMaximumIntegerDigits((-1));
        java.util.Currency currency21 = numberFormat18.getCurrency();
        numberFormat17.setCurrency(currency21);
        numberFormat14.setCurrency(currency21);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        java.lang.String str29 = numberFormat24.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat14, numberFormat24);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.util.Currency currency34 = numberFormat31.getCurrency();
        java.lang.String str36 = numberFormat31.format((double) 10);
        boolean boolean38 = numberFormat31.equals((java.lang.Object) "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat31);
        int int40 = numberFormat14.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        java.lang.String str49 = numberFormat44.format((double) 10);
        boolean boolean51 = numberFormat44.equals((java.lang.Object) "");
        fractionFormat43.setNumeratorFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale54);
        numberFormat56.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat56);
        numberFormat56.setGroupingUsed(true);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) (short) 10);
        parsePosition64.setErrorIndex((int) ' ');
        java.lang.Object obj67 = numberFormat56.parseObject("\244 32.00", parsePosition64);
        properFractionFormat41.setDenominatorFormat(numberFormat56);
        fractionFormat12.setDenominatorFormat(numberFormat56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction71 = fractionFormat12.parse("Canada");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"Canada\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0%" + "'", str29, "0%");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0%" + "'", str36, "0%");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0%" + "'", str49, "0%");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=32]", "\u30d5\u30e9\u30f3\u30b9\u8a9e", "-117 / 1");
        boolean boolean4 = locale3.hasExtensions();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u30d5\u30e9\u30f3\u30b9\u8a9e_-117 / 1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((-117), (int) (byte) 1);
        boolean boolean9 = numberFormat4.equals((java.lang.Object) (byte) 1);
        numberFormat4.setParseIntegerOnly(true);
        java.lang.Object obj12 = numberFormat4.clone();
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field15, (int) (short) 0);
        int int18 = fieldPosition17.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        boolean boolean22 = fieldPosition17.equals((java.lang.Object) fraction21);
        java.text.Format.Field field23 = fieldPosition17.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = numberFormat4.format((java.lang.Object) "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=32,endIndex=52]", stringBuffer14, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field23);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) ' ', (int) 'u');
        long long3 = fraction2.longValue();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance();
        java.lang.String str8 = numberFormat6.format(100L);
        int int9 = numberFormat6.getMinimumFractionDigits();
        numberFormat6.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode15 = numberFormat12.getRoundingMode();
        numberFormat6.setRoundingMode(roundingMode15);
        numberFormat5.setRoundingMode(roundingMode15);
        boolean boolean18 = numberFormat5.isParseIntegerOnly();
        boolean boolean19 = fraction2.equals((java.lang.Object) numberFormat5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction22 = properFractionFormat20.parse("0%");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"0%\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + roundingMode15 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode15.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayName(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        numberFormat9.setMaximumFractionDigits(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cor\351en" + "'", str8, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.multiply(fraction31);
        int int39 = fraction24.compareTo((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        boolean boolean47 = fraction43.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction38.multiply(fraction43);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder51.clearExtensions();
        java.util.Locale.Builder builder54 = builder51.clearExtensions();
        boolean boolean55 = fraction38.equals((java.lang.Object) builder51);
        java.util.Locale.Builder builder56 = builder51.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("can");
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setVariant("");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.lang.String str69 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale65.getDisplayLanguage(locale70);
        java.util.Locale.Builder builder72 = builder62.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale.Builder builder74 = builder72.clearExtensions();
        java.util.Locale locale75 = builder74.build();
        java.util.Locale.Builder builder76 = builder59.setLocale(locale75);
        java.util.Locale locale77 = builder76.build();
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str79 = locale77.getDisplayName();
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getCurrencyInstance(locale77);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u671d\u9c9c\u6587" + "'", str71, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CHN" + "'", str78, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str79, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(numberFormat80);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.getCountry();
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str15 = locale10.getDisplayName();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale16.getDisplayCountry(locale19);
        java.lang.String str21 = locale10.getDisplayVariant(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str23 = locale6.getDisplayName(locale10);
        java.lang.String str24 = locale6.getISO3Country();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setVariant("");
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale29.getISO3Language();
        boolean boolean33 = locale29.hasExtensions();
        java.util.Locale.Builder builder34 = builder27.setLocale(locale29);
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale.Builder builder37 = builder34.setRegion("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        int int40 = numberFormat39.getMinimumFractionDigits();
        numberFormat39.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat39);
        numberFormat39.setMaximumIntegerDigits((int) 'u');
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str50 = locale46.getDisplayCountry();
        boolean boolean51 = numberFormat39.equals((java.lang.Object) locale46);
        java.lang.String str52 = locale46.getDisplayCountry();
        java.util.Locale.Builder builder53 = builder37.setLocale(locale46);
        java.util.Locale locale54 = builder37.build();
        java.lang.String str55 = locale6.getDisplayScript(locale54);
        java.lang.String str56 = locale6.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United Kingdom" + "'", str20, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fractionFormat22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str23, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DEU" + "'", str24, "DEU");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str48, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale9);
        java.lang.String str14 = locale9.getDisplayName();
        java.lang.String str15 = locale9.getCountry();
        java.lang.String str16 = locale5.getDisplayCountry(locale9);
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale9.getDisplayScript(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getNumberInstance(locale26);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition(2147483647);
        boolean boolean31 = numberFormat28.equals((java.lang.Object) 2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat28);
        java.lang.String str34 = numberFormat20.format((long) 52);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.lang.String str39 = locale35.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        numberFormat46.setMaximumIntegerDigits((-1));
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat45.setCurrency(currency49);
        numberFormat42.setCurrency(currency49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        java.lang.String str57 = numberFormat52.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat42, numberFormat52);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getInstance();
        java.lang.String str61 = numberFormat59.format(100L);
        properFractionFormat58.setWholeFormat(numberFormat59);
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getInstance();
        java.lang.String str65 = numberFormat63.format(100L);
        int int66 = numberFormat63.getMinimumFractionDigits();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale67.getDisplayLanguage(locale68);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getNumberInstance(locale68);
        java.lang.String str72 = numberFormat70.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat73 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat59, numberFormat63, numberFormat70);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency75 = numberFormat74.getCurrency();
        numberFormat59.setCurrency(currency75);
        fractionFormat40.setDenominatorFormat(numberFormat59);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance();
        numberFormat78.setMaximumIntegerDigits((-1));
        numberFormat78.setMinimumIntegerDigits(0);
        fractionFormat40.setDenominatorFormat(numberFormat78);
        java.math.RoundingMode roundingMode84 = numberFormat78.getRoundingMode();
        numberFormat20.setRoundingMode(roundingMode84);
        fractionFormat19.setDenominatorFormat(numberFormat20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u97d3\u6587" + "'", str6, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ub300\ub9cc" + "'", str7, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Taiwan" + "'", str16, "Taiwan");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0%" + "'", str34, "0%");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0%" + "'", str57, "0%");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "100" + "'", str65, "100");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str69, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "32" + "'", str72, "32");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(currency75);
        org.junit.Assert.assertEquals(currency75.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode84.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale13.getScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale13, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        boolean boolean23 = fraction8.equals((java.lang.Object) localeList22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.divide(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.multiply(fraction29);
        int int33 = fraction29.getDenominator();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("de-DE");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("\244 10,00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ? 10,00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getNumeratorFormat();
        numberFormat35.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int8 = fraction7.intValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction10 = fraction2.add(fraction4);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.negate();
        int int14 = fraction11.getDenominator();
        float float15 = fraction11.floatValue();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.clearExtensions();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.util.Locale.Builder builder25 = builder16.setLocale(locale21);
        boolean boolean26 = fraction11.equals((java.lang.Object) locale21);
        java.util.Set<java.lang.Character> charSet27 = locale21.getExtensionKeys();
        java.util.Locale locale28 = locale21.stripExtensions();
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale28.getUnicodeLocaleType("Korean");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Korean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-117 / 1" + "'", str3, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-117) + "'", int8 == (-117));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 117.0f + "'", float15 == 117.0f);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        java.lang.String str41 = numberFormat34.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat34, numberFormat43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj50 = numberFormat46.parseObject("hi!", parsePosition49);
        java.lang.String str51 = parsePosition49.toString();
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat44.parse("\244 32.00", parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat17.parse("\uc911\uad6d\uc5b4", parsePosition49);
        java.text.NumberFormat numberFormat54 = properFractionFormat17.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction(350, (-13572));
        java.lang.StringBuffer stringBuffer58 = null;
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.lang.String str60 = field59.toString();
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field59, (int) (byte) 117);
        java.lang.String str63 = fieldPosition62.toString();
        int int64 = fieldPosition62.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = properFractionFormat17.format((java.lang.Object) fraction57, stringBuffer58, fieldPosition62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str51, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str60, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.FieldPosition[field=117,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str63, "java.text.FieldPosition[field=117,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 117 + "'", int64 == 117);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -1);
        java.lang.String str2 = parsePosition1.toString();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        numberFormat3.setMaximumIntegerDigits((int) (short) 100);
        numberFormat3.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.math.RoundingMode roundingMode11 = numberFormat3.getRoundingMode();
        numberFormat3.setGroupingUsed(true);
        boolean boolean14 = numberFormat3.isParseIntegerOnly();
        boolean boolean15 = parsePosition1.equals((java.lang.Object) boolean14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale2.getCountry();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        boolean boolean8 = locale2.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str7, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj17 = numberFormat13.parseObject("hi!", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        org.apache.commons.math.fraction.Fraction fraction19 = properFractionFormat11.parse("\244 32.00", parsePosition16);
        java.text.NumberFormat numberFormat20 = properFractionFormat11.getDenominatorFormat();
        java.text.NumberFormat numberFormat21 = properFractionFormat11.getNumeratorFormat();
        numberFormat21.setMinimumIntegerDigits((-117));
        java.lang.String str25 = numberFormat21.format((double) 350);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str18, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "35,000%" + "'", str25, "35,000%");
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale7.getDisplayScript(locale9);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        java.lang.String str15 = locale7.getISO3Language();
        java.lang.String str16 = locale7.getScript();
        java.lang.String str17 = locale1.getDisplayVariant(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setScript("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field4, (int) (short) 0);
        int int7 = fieldPosition6.getEndIndex();
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray11 = parseException10.getSuppressed();
        int int12 = parseException10.getErrorOffset();
        boolean boolean13 = fieldPosition6.equals((java.lang.Object) parseException10);
        java.text.ParseException parseException16 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int17 = parseException16.getErrorOffset();
        parseException10.addSuppressed((java.lang.Throwable) parseException16);
        parseException2.addSuppressed((java.lang.Throwable) parseException10);
        int int20 = parseException10.getErrorOffset();
        int int21 = parseException10.getErrorOffset();
        java.lang.Throwable[] throwableArray22 = parseException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setVariant("");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        boolean boolean15 = locale11.hasExtensions();
        java.util.Locale.Builder builder16 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder16.clear();
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("Chinese");
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder22.clearExtensions();
        java.util.Locale.Builder builder27 = builder25.setScript("");
        java.util.Locale locale28 = builder27.build();
        java.lang.String str29 = locale1.getDisplayLanguage(locale28);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale1);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getCurrencyInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = numberFormat31.parse("0 (x-lvariant-it-it)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"0 (x-lvariant-it-it)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder34.setScript("java.text.ParsePosition[index=10,errorIndex=9]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.ParsePosition[index=10,errorIndex=9] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        numberFormat2.setMinimumFractionDigits(97);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        java.lang.String str4 = numberFormat1.format((double) (byte) -1);
        java.lang.String str6 = numberFormat1.format((long) 'x');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj8 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "120" + "'", str6, "120");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(3);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = builder11.build();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.util.Currency currency18 = numberFormat15.getCurrency();
        numberFormat14.setCurrency(currency18);
        java.lang.String str21 = numberFormat14.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat23 = fractionFormat22.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat14, numberFormat23);
        int int25 = numberFormat14.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        numberFormat26.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        numberFormat30.setMaximumIntegerDigits((-1));
        java.util.Currency currency33 = numberFormat30.getCurrency();
        numberFormat29.setCurrency(currency33);
        numberFormat26.setCurrency(currency33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale40, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        java.lang.String[] strArray57 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList58);
        boolean boolean61 = numberFormat26.equals((java.lang.Object) strList58);
        numberFormat26.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        boolean boolean66 = locale12.equals((java.lang.Object) fractionFormat65);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency18);
// flaky:         org.junit.Assert.assertEquals(currency18.toString(), "EUR");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10.000%" + "'", str21, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency33);
// flaky:         org.junit.Assert.assertEquals(currency33.toString(), "EUR");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.util.Locale> localeCollection23 = null;
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection23, filteringMode24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.lang.String str30 = locale26.getScript();
        java.lang.String str31 = locale26.getDisplayScript();
        java.lang.String str32 = locale26.getDisplayVariant();
        java.util.Set<java.lang.String> strSet33 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet33, filteringMode34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale42.getScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale42, locale45, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList48, filteringMode50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getVariant();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale58.getISO3Language();
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale66.getDisplayLanguage(locale67);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getNumberInstance(locale67);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.lang.String str74 = locale72.getScript();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getScript();
        java.lang.String str79 = locale76.getVariant();
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale53, locale57, locale58, locale62, locale64, locale67, locale70, locale72, locale76 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale.LanguageRange[] languageRangeArray83 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList84 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList84, languageRangeArray83);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale86.getDisplayLanguage(locale87);
        java.lang.String str89 = locale87.getScript();
        java.util.Locale locale90 = java.util.Locale.KOREAN;
        java.util.Locale locale91 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray92 = new java.util.Locale[] { locale87, locale90, locale91 };
        java.util.ArrayList<java.util.Locale> localeList93 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList93, localeArray92);
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList84, (java.util.Collection<java.util.Locale>) localeList93, filteringMode95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList81, filteringMode95);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList97);
        java.util.List<java.util.Locale> localeList99 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais" + "'", str15, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode24.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str68, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str73, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(languageRangeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str88, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "ko");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNotNull(localeList98);
        org.junit.Assert.assertNotNull(localeList99);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.lang.String str16 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = locale12.getDisplayLanguage(locale17);
        java.lang.String str19 = locale6.getDisplayName(locale17);
        java.util.Locale.Builder builder20 = builder2.setLocale(locale6);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getVariant();
        java.util.Locale.setDefault(category21, locale23);
        java.lang.String str28 = locale23.getDisplayName();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale29.getDisplayCountry(locale32);
        java.lang.String str34 = locale23.getDisplayVariant(locale29);
        java.lang.String str35 = locale23.getDisplayName();
        java.util.Locale.Builder builder36 = builder20.setLocale(locale23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder36.setScript("Royaume-Uni");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Royaume-Uni [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u671d\u9c9c\u6587" + "'", str18, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "United Kingdom" + "'", str33, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("French");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setVariant("");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        boolean boolean21 = locale17.hasExtensions();
        java.util.Locale.Builder builder22 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("Chinese");
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale.setDefault(category28, locale30);
        java.util.Locale locale35 = java.util.Locale.getDefault(category28);
        java.util.Locale locale36 = java.util.Locale.getDefault(category28);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale40 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str41 = locale36.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder42 = builder27.setLocale(locale36);
        boolean boolean43 = locale36.hasExtensions();
        java.util.Locale.setDefault(category0, locale36);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale36);
        java.lang.Object obj46 = locale36.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale40.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Korean" + "'", str41, "Korean");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "ko");
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        java.util.Locale locale3 = new java.util.Locale("-4", "cinese (Cina)", "-0");
        org.junit.Assert.assertEquals(locale3.toString(), "-4_CINESE (CINA)_-0");
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        java.lang.String str2 = numberFormat0.format(100L);
        int int3 = numberFormat0.getMinimumFractionDigits();
        numberFormat0.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode9 = numberFormat6.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode9);
        java.lang.Class<?> wildcardClass11 = roundingMode9.getClass();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.util.Locale.Builder builder11 = builder3.setLocale(locale6);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.Builder builder14 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder15 = builder11.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder15.setExtension('4', "Deutschland");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        java.util.Locale locale1 = new java.util.Locale("\244 32.00");
        org.junit.Assert.assertEquals(locale1.toString(), "\244 32.00");
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        numberFormat43.setMinimumIntegerDigits(0);
        fractionFormat5.setDenominatorFormat(numberFormat43);
        java.lang.Object obj49 = numberFormat43.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.text.NumberFormat numberFormat51 = fractionFormat50.getNumeratorFormat();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getDisplayVariant();
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale52.getDisplayScript(locale54);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale52.getDisplayVariant(locale58);
        java.lang.String str60 = locale58.getVariant();
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str63 = locale62.getISO3Language();
        java.util.Locale locale66 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=32]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        java.lang.String str67 = locale62.getDisplayVariant(locale66);
        java.lang.String str68 = locale58.getDisplayVariant(locale62);
        java.lang.StringBuffer stringBuffer69 = null;
        java.text.NumberFormat.Field field70 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition((java.text.Format.Field) field70);
        fieldPosition71.setBeginIndex((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = numberFormat51.format((java.lang.Object) locale58, stringBuffer69, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale66.toString(), "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=10,endindex=32]_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(field70);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumFractionDigits((int) 'u');
        int int9 = numberFormat5.getMaximumIntegerDigits();
        int int10 = numberFormat5.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("0,00 \244");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0,00 ? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        float float8 = fraction7.floatValue();
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) (-1L), (double) (short) 10, (-117));
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str17 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction16);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int22 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.subtract(fraction21);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction16.add(fraction18);
        int int25 = fraction24.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int33 = fraction32.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction24.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction13.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction7.subtract(fraction13);
        org.apache.commons.math.fraction.Fraction fraction43 = new org.apache.commons.math.fraction.Fraction((double) ' ', (double) (short) 10, (int) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction43.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction39.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction39.negate();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + (-0.008547009f) + "'", float8 == (-0.008547009f));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-117 / 1" + "'", str17, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-117) + "'", int22 == (-117));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-117) + "'", int33 == (-117));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale.setDefault(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale14.getUnicodeLocaleType("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: cinese (Cina)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        boolean boolean7 = fieldPosition2.equals((java.lang.Object) fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int12 = fraction11.intValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.subtract(fraction11);
        boolean boolean15 = fraction11.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int24 = fraction23.intValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction11.add(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.subtract(fraction31);
        double double34 = fraction33.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction33.negate();
        double double36 = fraction35.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = new org.apache.commons.math.fraction.Fraction((int) (byte) 0, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int50 = fraction49.intValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.subtract(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction44.add(fraction46);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction41.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str59 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int64 = fraction63.intValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction58.add(fraction60);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction55.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int76 = fraction75.intValue();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction72.subtract(fraction75);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction71.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction68.add(fraction72);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction53.multiply(fraction68);
        java.util.Locale locale81 = java.util.Locale.UK;
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayLanguage(locale83);
        java.lang.String str85 = locale81.getDisplayScript(locale83);
        java.lang.String str86 = locale83.toLanguageTag();
        java.lang.String str87 = locale83.getVariant();
        boolean boolean88 = fraction80.equals((java.lang.Object) locale83);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction40.multiply(fraction80);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction80.reciprocal();
        int int91 = fraction35.compareTo((java.lang.Object) fraction80);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction27.subtract(fraction80);
        int int93 = fraction92.intValue();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction6.subtract(fraction92);
        org.apache.commons.math.fraction.Fraction fraction95 = fraction94.abs();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-117) + "'", int12 == (-117));
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-117) + "'", int24 == (-117));
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-117) + "'", int32 == (-117));
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 117.0d + "'", double34 == 117.0d);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-117.0d) + "'", double36 == (-117.0d));
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-117 / 1" + "'", str45, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-117) + "'", int50 == (-117));
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-117 / 1" + "'", str59, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-117) + "'", int64 == (-117));
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-117) + "'", int76 == (-117));
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str84, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ko" + "'", str86, "ko");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 13455 + "'", int93 == 13455);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertNotNull(fraction95);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 350, (double) (byte) -35, 13455);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 350 to fraction (-349/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        java.util.Locale locale1 = new java.util.Locale("5.200%");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("anglais (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: anglais (Canada)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "5.200%");
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        java.lang.Object obj64 = properFractionFormat51.parseObject("French", parsePosition60);
        parsePosition60.setErrorIndex((-117));
        java.lang.Object obj67 = numberFormat29.parseObject("-1 / 1", parsePosition60);
        numberFormat29.setMaximumIntegerDigits((int) (byte) 116);
        java.text.NumberFormat numberFormat70 = null;
        java.util.Locale locale73 = new java.util.Locale("United Kingdom", "1");
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getIntegerInstance(locale73);
        boolean boolean75 = numberFormat74.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat70, numberFormat74);
        numberFormat29.setMinimumIntegerDigits((-1));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals(locale73.toString(), "united kingdom_1");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayName(locale5);
        java.lang.String str9 = locale0.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale15);
        java.lang.String str19 = locale15.getCountry();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale15.getDisplayCountry(locale20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.lang.String str29 = locale24.getDisplayName();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale30.getDisplayCountry(locale33);
        java.lang.String str35 = locale24.getDisplayVariant(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str37 = locale20.getDisplayName(locale24);
        boolean boolean38 = numberFormat11.equals((java.lang.Object) locale24);
        fractionFormat10.setDenominatorFormat(numberFormat11);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        numberFormat46.setMaximumIntegerDigits((-1));
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat45.setCurrency(currency49);
        numberFormat42.setCurrency(currency49);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.util.Currency currency55 = numberFormat52.getCurrency();
        java.lang.String str57 = numberFormat52.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat42, numberFormat52);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance();
        java.lang.String str62 = numberFormat60.format(100L);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj68 = numberFormat64.parseObject("hi!", parsePosition67);
        java.lang.Number number69 = numberFormat60.parse("10,000%", parsePosition67);
        int int70 = parsePosition67.getErrorIndex();
        java.lang.Object obj71 = properFractionFormat58.parseObject("French", parsePosition67);
        parsePosition67.setIndex((int) (short) 10);
        java.lang.Object obj74 = numberFormat11.parseObject("Chinesisch (China)", parsePosition67);
        java.lang.StringBuffer stringBuffer76 = null;
        java.text.NumberFormat.Field field77 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field77, (int) (short) 0);
        int int80 = fieldPosition79.getEndIndex();
        fieldPosition79.setBeginIndex((int) ' ');
        int int83 = fieldPosition79.getBeginIndex();
        int int84 = fieldPosition79.getField();
        fieldPosition79.setEndIndex((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer87 = numberFormat11.format(3L, stringBuffer76, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "coreano" + "'", str6, "coreano");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str7, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "United Kingdom" + "'", str34, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(fractionFormat36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str37, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0%" + "'", str57, "0%");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100" + "'", str62, "100");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(number69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(field77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 32 + "'", int83 == 32);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(97.0d);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat6 = fractionFormat5.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        numberFormat6.setCurrency(currency11);
        java.math.RoundingMode roundingMode14 = numberFormat6.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        java.lang.String str20 = numberFormat4.format((double) (-117L));
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        boolean boolean32 = numberFormat25.equals((java.lang.Object) "");
        fractionFormat24.setNumeratorFormat(numberFormat25);
        java.lang.Object obj34 = fractionFormat24.clone();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency36 = numberFormat35.getCurrency();
        fractionFormat24.setNumeratorFormat(numberFormat35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        numberFormat39.setCurrency(currency46);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        numberFormat49.setMaximumIntegerDigits((-1));
        java.util.Currency currency52 = numberFormat49.getCurrency();
        java.lang.String str54 = numberFormat49.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38, numberFormat39, numberFormat49);
        java.lang.Object obj56 = numberFormat49.clone();
        fractionFormat24.setDenominatorFormat(numberFormat49);
        java.lang.StringBuffer stringBuffer58 = null;
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field59, (int) (short) 0);
        int int62 = fieldPosition61.getEndIndex();
        java.text.Format.Field field63 = fieldPosition61.getFieldAttribute();
        int int64 = fieldPosition61.getField();
        java.text.Format.Field field65 = fieldPosition61.getFieldAttribute();
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getInstance(locale66);
        boolean boolean68 = fieldPosition61.equals((java.lang.Object) locale66);
        fieldPosition61.setEndIndex((int) (short) 117);
        boolean boolean72 = fieldPosition61.equals((java.lang.Object) "\uce90\ub098\ub2e4");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer73 = fractionFormat22.format((java.lang.Object) numberFormat49, stringBuffer58, fieldPosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode14 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode14.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-117" + "'", str20, "-117");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0%" + "'", str54, "0%");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        java.util.Locale locale2 = new java.util.Locale("Korean (South Korea)", "java.text.ParsePosition[index=-1,errorIndex=117]");
        java.lang.String str3 = locale2.getScript();
        org.junit.Assert.assertEquals(locale2.toString(), "korean (south korea)_JAVA.TEXT.PARSEPOSITION[INDEX=-1,ERRORINDEX=117]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParseException: cor\351en", "\uc601\uad6d");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("java.text.ParseException: ko");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParseException: ko");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: cor\351\uc601\uad6d");
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat85 = properFractionFormat32.getWholeFormat();
        java.math.RoundingMode roundingMode86 = numberFormat85.getRoundingMode();
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale87.getDisplayVariant();
        java.util.Locale locale89 = java.util.Locale.UK;
        java.lang.String str90 = locale89.getDisplayScript();
        java.util.Set<java.lang.String> strSet91 = locale89.getUnicodeLocaleAttributes();
        java.lang.String str92 = locale87.getDisplayScript(locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator93 = numberFormat85.formatToCharacterIterator((java.lang.Object) str92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertTrue("'" + roundingMode86 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode86.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.setDefault(category5, locale7);
        java.lang.String str12 = locale7.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale7.getDisplayVariant(locale13);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale20.getDisplayName(locale22);
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale7.getDisplayLanguage(locale22);
        java.util.Locale locale26 = locale7.stripExtensions();
        java.util.Locale.Builder builder27 = builder2.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder2.setExtension('4', "chinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "coreano" + "'", str23, "coreano");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "coreano" + "'", str25, "coreano");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        int int10 = fraction9.getDenominator();
        long long11 = fraction9.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int20 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction14.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.negate();
        int int26 = fraction23.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction23.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction9.multiply(fraction23);
        short short29 = fraction9.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-117 / 1" + "'", str15, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-117) + "'", int20 == (-117));
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 0 + "'", short29 == (short) 0);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getISO3Country();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat11.setCurrency(currency15);
        numberFormat8.setCurrency(currency15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale22.getScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale22, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.lang.String[] strArray39 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList40);
        boolean boolean43 = numberFormat8.equals((java.lang.Object) strList40);
        numberFormat8.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getNumeratorFormat();
        java.lang.Object obj48 = numberFormat47.clone();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.text.NumberFormat numberFormat52 = fractionFormat51.getNumeratorFormat();
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 10);
        parsePosition55.setErrorIndex((int) (byte) 1);
        parsePosition55.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat51.parse("French", parsePosition55);
        java.text.NumberFormat numberFormat61 = fractionFormat51.getDenominatorFormat();
        numberFormat61.setMaximumFractionDigits((int) (byte) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat61);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale65);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = fractionFormat66.getNumeratorFormat();
        int int69 = numberFormat68.getMinimumFractionDigits();
        java.lang.String str71 = numberFormat68.format((long) (byte) -116);
        numberFormat68.setMaximumIntegerDigits((int) (byte) 0);
        java.util.Locale locale74 = java.util.Locale.UK;
        java.lang.String str75 = locale74.getDisplayScript();
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getInstance(locale74);
        numberFormat77.setMinimumFractionDigits((int) 'x');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat80 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat68, numberFormat77);
        boolean boolean81 = locale5.equals((java.lang.Object) properFractionFormat80);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cor\351en" + "'", str6, "cor\351en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode30.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fran\347ais" + "'", str50, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-116" + "'", str71, "-116");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        short short4 = fraction2.shortValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 0 + "'", short4 == (short) 0);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat12.getNumeratorFormat();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        boolean boolean19 = numberFormat14.equals((java.lang.Object) throwableArray18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat20.getNumeratorFormat();
        java.text.ParseException parseException25 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray26 = parseException25.getSuppressed();
        boolean boolean27 = numberFormat22.equals((java.lang.Object) throwableArray26);
        numberFormat22.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getDisplayVariant();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale36.getDisplayName(locale38);
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.lang.String str41 = locale33.getDisplayName(locale38);
        java.lang.String str42 = locale33.toLanguageTag();
        java.lang.String str43 = locale33.getDisplayVariant();
        boolean boolean44 = numberFormat14.equals((java.lang.Object) locale33);
        java.text.ParseException parseException47 = new java.text.ParseException("10\240000 %", 117);
        java.text.ParseException parseException50 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.lang.Throwable[] throwableArray51 = parseException50.getSuppressed();
        java.text.ParseException parseException54 = new java.text.ParseException("", 10);
        java.text.ParseException parseException57 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int58 = parseException57.getErrorOffset();
        parseException54.addSuppressed((java.lang.Throwable) parseException57);
        java.text.ParseException parseException62 = new java.text.ParseException("\u6cd5\u6587", (-117));
        java.text.ParseException parseException65 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray66 = parseException65.getSuppressed();
        java.text.NumberFormat.Field field67 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition69 = new java.text.FieldPosition((java.text.Format.Field) field67, (int) (short) 0);
        int int70 = fieldPosition69.getEndIndex();
        java.text.ParseException parseException73 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray74 = parseException73.getSuppressed();
        int int75 = parseException73.getErrorOffset();
        boolean boolean76 = fieldPosition69.equals((java.lang.Object) parseException73);
        java.text.ParseException parseException79 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int80 = parseException79.getErrorOffset();
        parseException73.addSuppressed((java.lang.Throwable) parseException79);
        parseException65.addSuppressed((java.lang.Throwable) parseException73);
        parseException62.addSuppressed((java.lang.Throwable) parseException73);
        parseException57.addSuppressed((java.lang.Throwable) parseException62);
        parseException50.addSuppressed((java.lang.Throwable) parseException62);
        java.lang.Throwable[] throwableArray86 = parseException62.getSuppressed();
        parseException47.addSuppressed((java.lang.Throwable) parseException62);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator88 = numberFormat14.formatToCharacterIterator((java.lang.Object) parseException62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10.000%" + "'", str8, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "coreano" + "'", str39, "coreano");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "italien" + "'", str40, "italien");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "coreano" + "'", str41, "coreano");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(field67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.lang.String str6 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) -1);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayLanguage(locale59);
        java.lang.String str61 = locale59.getScript();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale40, locale44, locale45, locale49, locale51, locale54, locale57, locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayLanguage(locale74);
        java.lang.String str76 = locale74.getScript();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale74, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList68, filteringMode82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean86 = parsePosition10.equals((java.lang.Object) languageRangeList12);
        java.lang.Object obj87 = numberFormat7.parseObject("kor", parsePosition10);
        int int88 = numberFormat7.getMinimumIntegerDigits();
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) (short) -1);
        java.lang.String str92 = parsePosition91.toString();
        parsePosition91.setIndex((int) 'x');
        java.lang.Number number95 = numberFormat7.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=97]", parsePosition91);
        java.lang.String str97 = numberFormat7.format((long) (short) 117);
        numberFormat7.setMinimumIntegerDigits(4095);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str64, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str75, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNull(number95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\244 117.00" + "'", str97, "\244 117.00");
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((-1));
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str5 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int10 = fraction9.intValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.subtract(fraction9);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.add(fraction6);
        int int13 = fraction12.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int21 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.subtract(fraction20);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        boolean boolean26 = parsePosition1.equals((java.lang.Object) fraction25);
        parsePosition1.setErrorIndex(4);
        java.lang.String str29 = parsePosition1.toString();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-117 / 1" + "'", str5, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-117) + "'", int10 == (-117));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-117) + "'", int21 == (-117));
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=4]" + "'", str29, "java.text.ParsePosition[index=-1,errorIndex=4]");
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        java.text.ParseException parseException2 = new java.text.ParseException("1", (int) (byte) -117);
        int int3 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        int int5 = parseException2.getErrorOffset();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException13 = new java.text.ParseException("anglais", (-117));
        parseException10.addSuppressed((java.lang.Throwable) parseException13);
        int int15 = parseException10.getErrorOffset();
        boolean boolean16 = fieldPosition7.equals((java.lang.Object) parseException10);
        java.text.ParseException parseException19 = new java.text.ParseException("", 10);
        java.text.ParseException parseException22 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int23 = parseException22.getErrorOffset();
        parseException19.addSuppressed((java.lang.Throwable) parseException22);
        parseException10.addSuppressed((java.lang.Throwable) parseException19);
        java.text.ParseException parseException28 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray29 = parseException28.getSuppressed();
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field30, (int) (short) 0);
        int int33 = fieldPosition32.getEndIndex();
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        int int38 = parseException36.getErrorOffset();
        boolean boolean39 = fieldPosition32.equals((java.lang.Object) parseException36);
        java.text.ParseException parseException42 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int43 = parseException42.getErrorOffset();
        parseException36.addSuppressed((java.lang.Throwable) parseException42);
        parseException28.addSuppressed((java.lang.Throwable) parseException36);
        java.text.ParseException parseException48 = new java.text.ParseException("100", (int) (byte) -1);
        parseException28.addSuppressed((java.lang.Throwable) parseException48);
        parseException19.addSuppressed((java.lang.Throwable) parseException28);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException55 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException58 = new java.text.ParseException("anglais", (-117));
        parseException55.addSuppressed((java.lang.Throwable) parseException58);
        int int60 = parseException55.getErrorOffset();
        boolean boolean61 = fieldPosition52.equals((java.lang.Object) parseException55);
        java.text.ParseException parseException64 = new java.text.ParseException("", 10);
        java.text.ParseException parseException67 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int68 = parseException67.getErrorOffset();
        parseException64.addSuppressed((java.lang.Throwable) parseException67);
        parseException55.addSuppressed((java.lang.Throwable) parseException64);
        java.text.ParseException parseException73 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray74 = parseException73.getSuppressed();
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field75, (int) (short) 0);
        int int78 = fieldPosition77.getEndIndex();
        java.text.ParseException parseException81 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray82 = parseException81.getSuppressed();
        int int83 = parseException81.getErrorOffset();
        boolean boolean84 = fieldPosition77.equals((java.lang.Object) parseException81);
        java.text.ParseException parseException87 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int88 = parseException87.getErrorOffset();
        parseException81.addSuppressed((java.lang.Throwable) parseException87);
        parseException73.addSuppressed((java.lang.Throwable) parseException81);
        java.text.ParseException parseException93 = new java.text.ParseException("100", (int) (byte) -1);
        parseException73.addSuppressed((java.lang.Throwable) parseException93);
        parseException64.addSuppressed((java.lang.Throwable) parseException73);
        parseException19.addSuppressed((java.lang.Throwable) parseException64);
        parseException2.addSuppressed((java.lang.Throwable) parseException64);
        java.lang.Throwable[] throwableArray98 = parseException64.getSuppressed();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-117) + "'", int3 == (-117));
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-117) + "'", int5 == (-117));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.lang.String str11 = locale8.getISO3Language();
        java.lang.String str12 = locale8.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale8.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.String str19 = locale16.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale16);
        java.lang.String str22 = locale8.getDisplayName(locale16);
        java.lang.String str23 = locale0.getDisplayVariant(locale8);
        java.lang.String str24 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587" + "'", str14, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        java.util.Locale locale3 = new java.util.Locale("-117 / 1", "14", "it_IT");
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale3.getCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "-117 / 1_14_it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "14" + "'", str5, "14");
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str7 = locale1.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getCountry();
        java.lang.String str9 = locale6.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u671d\u9c9c\u6587" + "'", str7, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese (China)" + "'", str9, "Chinese (China)");
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance();
        numberFormat37.setMaximumIntegerDigits((-1));
        java.util.Currency currency40 = numberFormat37.getCurrency();
        numberFormat36.setCurrency(currency40);
        numberFormat33.setCurrency(currency40);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        java.lang.String str48 = numberFormat43.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat43);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance();
        java.lang.String str53 = numberFormat51.format(100L);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        java.lang.Number number60 = numberFormat51.parse("10,000%", parsePosition58);
        int int61 = parsePosition58.getErrorIndex();
        java.lang.Object obj62 = properFractionFormat49.parseObject("French", parsePosition58);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 10);
        parsePosition70.setErrorIndex((int) (byte) 1);
        parsePosition70.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction75 = fractionFormat66.parse("French", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat49.parse("", parsePosition70);
        java.lang.Object obj77 = properFractionFormat17.parseObject("java.text.NumberFormat$Field(currency)", parsePosition70);
        java.text.NumberFormat numberFormat78 = properFractionFormat17.getNumeratorFormat();
        java.util.Locale locale82 = new java.util.Locale("java.text.ParseException: ", "Korean", "\uc601\uc5b4");
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getNumberInstance(locale82);
        properFractionFormat17.setWholeFormat(numberFormat84);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition((int) (short) -1);
        int int89 = parsePosition88.getErrorIndex();
        int int90 = parsePosition88.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction91 = properFractionFormat17.parse("3,200", parsePosition88);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0%" + "'", str48, "0%");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6cd5\u6587" + "'", str65, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(numberFormat78);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getISO3Country();
        java.lang.String str7 = locale0.getDisplayCountry(locale4);
        java.lang.String str8 = locale0.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United Kingdom" + "'", str5, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United Kingdom" + "'", str7, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        int int33 = numberFormat29.getMaximumIntegerDigits();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) '4');
        java.lang.Number number37 = numberFormat29.parse("java.text.ParsePosition[index=10,errorIndex=9]", parsePosition36);
        numberFormat29.setGroupingUsed(false);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((-1));
        int int42 = parsePosition41.getIndex();
        boolean boolean43 = numberFormat29.equals((java.lang.Object) int42);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int51 = fraction50.intValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction47);
        double double54 = fraction53.doubleValue();
        long long55 = fraction53.longValue();
        java.lang.String str56 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = new org.apache.commons.math.fraction.Fraction((double) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.divide(fraction58);
        boolean boolean61 = numberFormat29.equals((java.lang.Object) fraction58);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-117) + "'", int51 == (-117));
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0 / 1" + "'", str56, "0 / 1");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        java.text.ParseException parseException2 = new java.text.ParseException("1", (int) (byte) -117);
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: 1" + "'", str3, "java.text.ParseException: 1");
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("35 / 1");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale1);
        java.lang.String str4 = numberFormat2.format((double) 97);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "97" + "'", str4, "97");
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale0.getDisplayName(locale2);
        java.lang.String str5 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinese" + "'", str3, "chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "French (France)" + "'", str4, "French (France)");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u6cd5\u56fd" + "'", str5, "\u6cd5\u56fd");
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 100L, (double) 10L, 116);
        short short4 = fraction3.shortValue();
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 100 + "'", short4 == (short) 100);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        numberFormat43.setMinimumIntegerDigits(0);
        fractionFormat5.setDenominatorFormat(numberFormat43);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.text.NumberFormat numberFormat52 = fractionFormat51.getNumeratorFormat();
        java.text.NumberFormat numberFormat53 = fractionFormat51.getNumeratorFormat();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj59 = numberFormat55.parseObject("hi!", parsePosition58);
        org.apache.commons.math.fraction.Fraction fraction60 = fractionFormat51.parse("-117 / 1", parsePosition58);
        java.lang.String str61 = parsePosition58.toString();
        java.lang.Object obj62 = numberFormat43.parseObject("en_GB", parsePosition58);
        java.util.Locale locale65 = new java.util.Locale("java.text.FieldPosition[field=-117,attribute=java.text.NumberFormat$Field(sign),beginIndex=0,endIndex=0]", "CN");
        boolean boolean66 = parsePosition58.equals((java.lang.Object) locale65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = locale65.getUnicodeLocaleType("\u82f1\u6587\u52a0\u62ff\u5927)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ?? (???)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(fraction60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str61, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals(locale65.toString(), "java.text.fieldposition[field=-117,attribute=java.text.numberformat$field(sign),beginindex=0,endindex=0]_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getVariant();
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale29 = java.util.Locale.getDefault(category22);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder34 = builder20.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder20.clear();
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder35.setLanguage("Chinesisch (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Chinesisch (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        java.util.Locale locale2 = new java.util.Locale("GB", "Korean");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale2);
        java.text.ParsePosition parsePosition5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number6 = numberFormat3.parse("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=13689,endIndex=0]", parsePosition5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "gb_KOREAN");
        org.junit.Assert.assertNotNull(numberFormat3);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale9 = java.util.Locale.UK;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange languageRange17 = new java.util.Locale.LanguageRange("CAN");
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] { languageRange17 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getScript();
        java.lang.String str26 = locale21.getDisplayScript();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.util.Set<java.lang.String> strSet28 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.lang.String str35 = locale33.getScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale33, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.lang.String[] strArray50 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale61.getScript();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale61, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList67, filteringMode69);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet56, filteringMode69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet28, filteringMode69);
        java.util.Locale.FilteringMode filteringMode73 = null;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet28, filteringMode73);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        java.util.Locale locale1 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale1);
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder8.build();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = locale1.getDisplayLanguage(locale9);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str14 = locale1.getDisplayLanguage(locale13);
        java.lang.String str15 = locale1.getDisplayLanguage();
        java.lang.String str16 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uce90\ub098\ub2e4" + "'", str11, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uce90\ub098\ub2e4" + "'", str14, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uce90\ub098\ub2e4" + "'", str15, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uce90\ub098\ub2e4" + "'", str16, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getScript();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.String str7 = locale0.getVariant();
        java.util.Locale.setDefault(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = locale0.getUnicodeLocaleType("-117 / 100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -117 / 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder26.setExtension('#', "\u82f1\u6587\u52a0\u62ff\u5927)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 52.0f);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParseException: 100");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        boolean boolean10 = locale6.hasExtensions();
        java.util.Locale.Builder builder11 = builder4.setLocale(locale6);
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clear();
        java.util.Locale locale14 = builder13.build();
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale1.getDisplayName(locale14);
        java.lang.String str17 = locale14.getDisplayScript();
        java.lang.String str18 = locale14.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.lang.String str7 = numberFormat4.format((long) (byte) 1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        numberFormat12.setCurrency(currency16);
        numberFormat9.setCurrency(currency16);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.lang.String str24 = numberFormat19.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat9, numberFormat19);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance();
        java.lang.String str29 = numberFormat27.format(100L);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj35 = numberFormat31.parseObject("hi!", parsePosition34);
        java.lang.Number number36 = numberFormat27.parse("10,000%", parsePosition34);
        int int37 = parsePosition34.getErrorIndex();
        java.lang.Object obj38 = properFractionFormat25.parseObject("French", parsePosition34);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 10);
        parsePosition46.setErrorIndex((int) (byte) 1);
        parsePosition46.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction51 = fractionFormat42.parse("French", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat25.parse("", parsePosition46);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getNumberInstance(locale54);
        java.lang.Object obj57 = numberFormat56.clone();
        properFractionFormat25.setWholeFormat(numberFormat56);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayLanguage(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.lang.String str64 = locale59.getDisplayCountry(locale60);
        java.lang.String str65 = locale60.toLanguageTag();
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getCurrencyInstance(locale60);
        boolean boolean67 = numberFormat66.isParseIntegerOnly();
        properFractionFormat25.setDenominatorFormat(numberFormat66);
        boolean boolean69 = numberFormat66.isParseIntegerOnly();
        numberFormat66.setMinimumIntegerDigits((int) (short) 1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat66);
        java.lang.StringBuffer stringBuffer73 = null;
        java.text.NumberFormat.Field field74 = java.text.NumberFormat.Field.SIGN;
        java.text.FieldPosition fieldPosition76 = new java.text.FieldPosition((java.text.Format.Field) field74, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fractionFormat2.format((java.lang.Object) numberFormat66, stringBuffer73, fieldPosition76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100%" + "'", str7, "100%");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "EUR");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0 %" + "'", str24, "0 %");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fran\347ais" + "'", str41, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "kor" + "'", str63, "kor");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ko" + "'", str65, "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(field74);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        numberFormat8.setMaximumIntegerDigits((int) (short) 100);
        numberFormat8.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        fractionFormat7.setDenominatorFormat(numberFormat8);
        boolean boolean17 = numberFormat8.isGroupingUsed();
        int int18 = numberFormat8.getMaximumFractionDigits();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = numberFormat8.format((java.lang.Object) builder19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getNumeratorFormat();
        java.lang.Object obj36 = numberFormat35.clone();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale39.getDisplayCountry(locale40);
        java.lang.String str45 = locale40.toLanguageTag();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance(locale40);
        java.lang.String str47 = locale37.getDisplayVariant(locale40);
        java.lang.String str49 = locale40.getExtension('u');
        java.lang.String str50 = locale40.getCountry();
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.setVariant("");
        java.util.Locale.Builder builder54 = builder53.clear();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayLanguage(locale56);
        java.lang.String str58 = locale55.getISO3Language();
        boolean boolean59 = locale55.hasExtensions();
        java.util.Locale.Builder builder60 = builder53.setLocale(locale55);
        java.util.Set<java.lang.String> strSet61 = locale55.getUnicodeLocaleKeys();
        java.lang.String str62 = locale40.getDisplayCountry(locale55);
        java.util.Locale.setDefault(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator64 = numberFormat35.formatToCharacterIterator((java.lang.Object) locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "EUR");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "EUR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ko" + "'", str45, "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str57, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.lang.String str41 = numberFormat0.format((double) 116);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = numberFormat0.parseObject("ita");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0%" + "'", str41, "0%");
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\244 100.00");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.text.NumberFormat numberFormat42 = fractionFormat41.getNumeratorFormat();
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 10);
        parsePosition45.setErrorIndex((int) (byte) 1);
        parsePosition45.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction50 = fractionFormat41.parse("French", parsePosition45);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance();
        numberFormat52.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        numberFormat56.setMaximumIntegerDigits((-1));
        java.util.Currency currency59 = numberFormat56.getCurrency();
        numberFormat55.setCurrency(currency59);
        numberFormat52.setCurrency(currency59);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        numberFormat62.setMaximumIntegerDigits((-1));
        java.util.Currency currency65 = numberFormat62.getCurrency();
        java.lang.String str67 = numberFormat62.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat52, numberFormat62);
        fractionFormat41.setDenominatorFormat(numberFormat62);
        properFractionFormat38.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat71 = properFractionFormat38.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat38.parse("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)__java.text.AttributedCharacterIterator$Attribute(reading)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"???????? (??????)__java.text.AttributedCharacterIterator$Attribute(reading)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str40, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0%" + "'", str67, "0%");
        org.junit.Assert.assertNotNull(numberFormat71);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        java.lang.String str8 = locale3.getDisplayCountry(locale4);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.lang.String str14 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale10.getDisplayLanguage(locale15);
        java.lang.String str17 = locale4.getDisplayName(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Set<java.lang.Character> charSet19 = locale4.getExtensionKeys();
        java.util.Locale.Builder builder20 = builder1.setLocale(locale4);
        java.util.Locale locale22 = new java.util.Locale("zh_TW");
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale4.getDisplayScript(locale22);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u671d\u9c9c\u6587" + "'", str16, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u671d\u9c9c\u6587" + "'", str17, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_tw");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh_tw" + "'", str23, "zh_tw");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        java.text.ParseException parseException2 = new java.text.ParseException("1", (int) (byte) -117);
        int int3 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        int int5 = parseException2.getErrorOffset();
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field6, (int) (short) 0);
        int int9 = fieldPosition8.getEndIndex();
        java.text.ParseException parseException12 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray13 = parseException12.getSuppressed();
        int int14 = parseException12.getErrorOffset();
        boolean boolean15 = fieldPosition8.equals((java.lang.Object) parseException12);
        java.text.ParseException parseException18 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int19 = parseException18.getErrorOffset();
        parseException12.addSuppressed((java.lang.Throwable) parseException18);
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field21, (int) (short) 0);
        int int24 = fieldPosition23.getEndIndex();
        java.text.ParseException parseException27 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray28 = parseException27.getSuppressed();
        int int29 = parseException27.getErrorOffset();
        boolean boolean30 = fieldPosition23.equals((java.lang.Object) parseException27);
        java.text.ParseException parseException33 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray34 = parseException33.getSuppressed();
        parseException27.addSuppressed((java.lang.Throwable) parseException33);
        java.lang.Throwable[] throwableArray36 = parseException33.getSuppressed();
        parseException18.addSuppressed((java.lang.Throwable) parseException33);
        parseException2.addSuppressed((java.lang.Throwable) parseException18);
        java.lang.String str39 = parseException18.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-117) + "'", int3 == (-117));
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-117) + "'", int5 == (-117));
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str39, "java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder24.setLocale(locale27);
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder32.setRegion("\244 1.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ? 1.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        int int9 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field10 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(field10, 3);
        fieldPosition12.setBeginIndex((int) 'u');
        int int15 = fieldPosition12.getEndIndex();
        int int16 = fieldPosition12.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        java.util.Locale locale2 = new java.util.Locale("french", "java.text.ParsePosition[index=-1,errorIndex=-1]");
        java.lang.String str3 = locale2.toLanguageTag();
        java.lang.String str4 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "french_JAVA.TEXT.PARSEPOSITION[INDEX=-1,ERRORINDEX=-1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "french" + "'", str3, "french");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.setDefault(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale8.getUnicodeLocaleType("tedesco (Germania)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: tedesco (Germania)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        java.util.Locale locale1 = new java.util.Locale("coreano");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("\ub3c5\uc77c\uc5b4\ub3c5\uc77c) (java.text.AttributedCharacterIterator$Attribute(reading))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ???????? (??????) (java.text.AttributedCharacterIterator$Attribute(reading))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "coreano");
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction12.reciprocal();
        byte byte16 = fraction15.byteValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (-117));
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction5.add(fraction7);
        int int14 = fraction13.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance();
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        boolean boolean22 = numberFormat19.isParseIntegerOnly();
        boolean boolean23 = fraction17.equals((java.lang.Object) boolean22);
        int int24 = fraction17.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction2.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.reciprocal();
        int int28 = fraction27.intValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-117 / 1" + "'", str6, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2) + "'", int28 == (-2));
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getVariant();
        java.util.Locale.setDefault(category4, locale6);
        java.lang.String str11 = locale6.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        java.lang.String str17 = locale6.getDisplayVariant(locale12);
        java.lang.String str18 = locale0.getDisplayName(locale12);
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = locale0.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getDisplayLanguage();
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = locale22.getDisplayCountry(locale25);
        java.lang.String str27 = locale19.getDisplayVariant(locale25);
        java.lang.String str28 = locale19.getLanguage();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United Kingdom" + "'", str16, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4" + "'", str21, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "United Kingdom" + "'", str26, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("-117 / 1", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=-117/1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        int int2 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMaximumIntegerDigits((int) 'u');
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 10);
        parsePosition10.setErrorIndex((int) (byte) 1);
        parsePosition10.setErrorIndex(0);
        int int15 = parsePosition10.getErrorIndex();
        java.lang.Number number16 = numberFormat1.parse("java.text.numberformat$field(per mille)", parsePosition10);
        java.lang.Object obj17 = numberFormat1.clone();
        java.util.Currency currency18 = numberFormat1.getCurrency();
        int int19 = numberFormat1.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(currency18);
// flaky:         org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 100);
        java.text.Format.Field field12 = fieldPosition11.getFieldAttribute();
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field12, (-4096));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(field12);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat46 = fractionFormat45.getNumeratorFormat();
        int int47 = numberFormat46.getMinimumFractionDigits();
        numberFormat46.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46);
        numberFormat46.setMaximumIntegerDigits((int) 'u');
        properFractionFormat17.setWholeFormat(numberFormat46);
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field55, (int) (short) 0);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance();
        java.lang.String str60 = numberFormat58.format(100L);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj66 = numberFormat62.parseObject("hi!", parsePosition65);
        java.lang.Number number67 = numberFormat58.parse("10,000%", parsePosition65);
        boolean boolean68 = field55.equals((java.lang.Object) parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat17.parse("\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)", parsePosition65);
        java.text.NumberFormat numberFormat70 = properFractionFormat17.getWholeFormat();
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        int int73 = numberFormat72.getMaximumIntegerDigits();
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder74.setVariant("");
        java.util.Locale.Builder builder77 = builder76.clear();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.lang.String str81 = locale78.getISO3Language();
        boolean boolean82 = locale78.hasExtensions();
        java.util.Locale.Builder builder83 = builder76.setLocale(locale78);
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getPercentInstance(locale78);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat72, numberFormat84);
        properFractionFormat17.setWholeFormat(numberFormat72);
        java.lang.StringBuffer stringBuffer88 = null;
        java.text.FieldPosition fieldPosition90 = new java.text.FieldPosition((int) (byte) 32);
        java.lang.String str91 = fieldPosition90.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer92 = numberFormat72.format((long) (byte) 1, stringBuffer88, fieldPosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais" + "'", str33, "fran\347ais");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str80, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "kor" + "'", str81, "kor");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.FieldPosition[field=32,attribute=null,beginIndex=0,endIndex=0]" + "'", str91, "java.text.FieldPosition[field=32,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\244 97.00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?97.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        java.text.ParseException parseException2 = new java.text.ParseException("100", (int) (short) -117);
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: 100" + "'", str3, "java.text.ParseException: 100");
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = numberFormat6.parseObject("Englisch");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getBeginIndex();
        java.lang.String str5 = fieldPosition2.toString();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList16, filteringMode18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale24, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.lang.String str56 = locale54.getScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayLanguage(locale58);
        java.lang.String str60 = locale58.getScript();
        java.lang.String str61 = locale58.getVariant();
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale35, locale39, locale40, locale44, locale46, locale49, locale52, locale54, locale58 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayLanguage(locale69);
        java.lang.String str71 = locale69.getScript();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale69, locale72, locale73 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList63, filteringMode77);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap81);
        java.util.Locale locale83 = java.util.Locale.UK;
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = locale83.getDisplayScript(locale85);
        java.util.Set<java.lang.String> strSet88 = locale85.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList82, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        boolean boolean91 = fieldPosition2.equals((java.lang.Object) filteringMode89);
        int int92 = fieldPosition2.getEndIndex();
        int int93 = fieldPosition2.getField();
        int int94 = fieldPosition2.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str5, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str25, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str42, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str70, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNull(locale80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("Deutsch");
        java.util.Locale.Builder builder11 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.setLanguageTag("-0.009");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        long long23 = fraction15.longValue();
        java.text.AttributedCharacterIterator.Attribute attribute24 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale25);
        boolean boolean27 = attribute24.equals((java.lang.Object) numberFormat26);
        boolean boolean28 = fraction15.equals((java.lang.Object) boolean27);
        double double29 = fraction15.doubleValue();
        double double30 = fraction15.doubleValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(attribute24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.02857142857142857d) + "'", double29 == (-0.02857142857142857d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-0.02857142857142857d) + "'", double30 == (-0.02857142857142857d));
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        boolean boolean7 = numberFormat2.equals((java.lang.Object) throwableArray6);
        numberFormat2.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        int int11 = numberFormat2.getMaximumFractionDigits();
        java.lang.Object obj12 = numberFormat2.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Canada" + "'", str2, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Canada" + "'", str3, "Canada");
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getCountry();
        boolean boolean4 = locale0.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale0.getUnicodeLocaleType("2.147.483.647");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2.147.483.647");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FR" + "'", str3, "FR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) str8);
        int int10 = fieldPosition2.getField();
        java.util.Locale locale13 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale13);
        boolean boolean16 = fieldPosition2.equals((java.lang.Object) numberFormat15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale22.getScript();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.util.Currency currency34 = numberFormat31.getCurrency();
        numberFormat30.setCurrency(currency34);
        numberFormat27.setCurrency(currency34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat27);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits((-1));
        numberFormat38.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean44 = numberFormat43.isGroupingUsed();
        numberFormat43.setParseIntegerOnly(false);
        java.lang.Number number48 = numberFormat43.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat38, numberFormat43);
        java.text.NumberFormat numberFormat50 = properFractionFormat49.getWholeFormat();
        java.lang.Object obj51 = numberFormat50.clone();
        java.lang.Object obj52 = numberFormat50.clone();
        boolean boolean53 = numberFormat25.equals((java.lang.Object) numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat50);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayLanguage(locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale57.getVariant();
        java.util.Locale.setDefault(category55, locale57);
        java.lang.String str62 = locale57.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.UK;
        java.lang.String str64 = locale63.getDisplayScript();
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = locale63.getDisplayCountry(locale66);
        java.lang.String str68 = locale57.getDisplayVariant(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale57);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance();
        numberFormat70.setMaximumIntegerDigits((-1));
        numberFormat70.setMaximumIntegerDigits((int) (short) 100);
        numberFormat70.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getPercentInstance();
        numberFormat78.setMaximumIntegerDigits((-1));
        numberFormat78.setMaximumIntegerDigits((int) (short) 100);
        numberFormat78.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat78);
        fractionFormat77.setDenominatorFormat(numberFormat78);
        fractionFormat69.setNumeratorFormat(numberFormat78);
        java.math.RoundingMode roundingMode88 = numberFormat78.getRoundingMode();
        numberFormat50.setRoundingMode(roundingMode88);
        numberFormat15.setRoundingMode(roundingMode88);
        int int91 = numberFormat15.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fran\347ais" + "'", str8, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Canada" + "'", str18, "Canada");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency34);
// flaky:         org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + number48 + "' != '" + 0L + "'", number48, 0L);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "United Kingdom" + "'", str67, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        boolean boolean9 = numberFormat0.isParseIntegerOnly();
        java.util.Currency currency10 = numberFormat0.getCurrency();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        numberFormat15.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode18 = numberFormat15.getRoundingMode();
        numberFormat0.setRoundingMode(roundingMode18);
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str23 = field22.toString();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale24);
        boolean boolean27 = field22.equals((java.lang.Object) numberFormat26);
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj29 = new java.lang.Object();
        boolean boolean30 = field28.equals(obj29);
        boolean boolean31 = field22.equals((java.lang.Object) field28);
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) (byte) 100);
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field22, (int) (short) 100);
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition((java.text.Format.Field) field22, (-35));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer38 = numberFormat0.format((long) (-13572), stringBuffer21, fieldPosition37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(currency10);
// flaky:         org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str23, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.lang.String str45 = numberFormat42.format((long) (byte) 1);
        java.text.NumberFormat numberFormat46 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat42, numberFormat46);
        int int48 = numberFormat42.getMinimumIntegerDigits();
        java.lang.Object obj49 = numberFormat42.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
// flaky:         org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
// flaky:         org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setUnicodeLocaleKeyword("chinese", "\uc601\uad6d");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng__#u-francese");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        boolean boolean5 = numberFormat3.isParseIntegerOnly();
        numberFormat3.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Franz\366sisch" + "'", str1, "Franz\366sisch");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese (Taiwan)", (double) (byte) -117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-117.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale locale4 = new java.util.Locale("francese");
        java.util.Locale.Builder builder5 = builder2.setLocale(locale4);
        java.util.Locale locale6 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.removeUnicodeLocaleAttribute("java.text.parseposition[index=10,errorindex=10]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.parseposition[index=10,errorindex=10] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale4.toString(), "francese");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "francese");
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (short) 0);
        int int11 = fieldPosition10.getEndIndex();
        java.text.ParseException parseException14 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray15 = parseException14.getSuppressed();
        int int16 = parseException14.getErrorOffset();
        boolean boolean17 = fieldPosition10.equals((java.lang.Object) parseException14);
        java.text.ParseException parseException20 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int21 = parseException20.getErrorOffset();
        parseException14.addSuppressed((java.lang.Throwable) parseException20);
        parseException6.addSuppressed((java.lang.Throwable) parseException14);
        java.text.NumberFormat.Field field24 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field24, (int) (short) 0);
        int int27 = fieldPosition26.getEndIndex();
        java.text.ParseException parseException30 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray31 = parseException30.getSuppressed();
        int int32 = parseException30.getErrorOffset();
        boolean boolean33 = fieldPosition26.equals((java.lang.Object) parseException30);
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        parseException30.addSuppressed((java.lang.Throwable) parseException36);
        java.lang.Throwable[] throwableArray39 = parseException36.getSuppressed();
        parseException6.addSuppressed((java.lang.Throwable) parseException36);
        parseException2.addSuppressed((java.lang.Throwable) parseException6);
        int int42 = parseException6.getErrorOffset();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        java.util.Locale locale1 = new java.util.Locale("java.text.NumberFormat$Field(currency)");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for java.text.numberformat$field(currency)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.numberformat$field(currency)");
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.lang.String str6 = locale4.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English" + "'", str3, "English");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale1.getDisplayName(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale1);
        int int17 = numberFormat16.getMaximumFractionDigits();
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.FieldPosition fieldPosition20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer21 = numberFormat16.format((long) (byte) -117, stringBuffer19, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u671d\u9c9c\u6587" + "'", str13, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 13455, 0.0d, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 13,455 to fraction (9,223,372,036,854,762,354/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 10.0f, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 10 to fraction (-9/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        java.util.Locale locale1 = new java.util.Locale("French");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str4 = locale1.toLanguageTag();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat5.setMaximumIntegerDigits(9);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        numberFormat9.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        numberFormat12.setCurrency(currency16);
        numberFormat9.setCurrency(currency16);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.lang.String str24 = numberFormat19.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat9, numberFormat19);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        java.lang.String str28 = numberFormat26.format(100L);
        properFractionFormat25.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance();
        java.lang.String str32 = numberFormat30.format(100L);
        int int33 = numberFormat30.getMinimumFractionDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale35);
        java.lang.String str39 = numberFormat37.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat30, numberFormat37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency42 = numberFormat41.getCurrency();
        numberFormat26.setCurrency(currency42);
        numberFormat5.setCurrency(currency42);
        java.util.Locale locale46 = new java.util.Locale("French");
        java.util.Locale locale47 = locale46.stripExtensions();
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getNumberInstance(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = numberFormat5.format((java.lang.Object) numberFormat50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "french");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "french" + "'", str4, "french");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
// flaky:         org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
// flaky:         org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100" + "'", str28, "100");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "100" + "'", str32, "100");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency42);
// flaky:         org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertEquals(locale46.toString(), "french");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(numberFormat50);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-4096), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 10);
        parsePosition14.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction17 = properFractionFormat11.parse("fran\347ais", parsePosition14);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale18);
        properFractionFormat11.setWholeFormat(numberFormat21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale27.getVariant();
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayScript();
        java.util.Locale.setDefault(category25, locale32);
        java.lang.String str36 = locale23.getDisplayCountry(locale32);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getNumberInstance(locale23);
        numberFormat37.setMinimumIntegerDigits((-1));
        numberFormat37.setGroupingUsed(false);
        java.lang.String str43 = numberFormat37.format((double) (byte) 0);
        int int44 = numberFormat37.getMinimumFractionDigits();
        properFractionFormat11.setDenominatorFormat(numberFormat37);
        int int46 = numberFormat37.getMaximumFractionDigits();
        numberFormat37.setMaximumFractionDigits((-4096));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(fraction17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u5fb7\u56fd" + "'", str36, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 10);
        parsePosition66.setErrorIndex((int) (byte) 1);
        java.lang.Object obj69 = fractionFormat63.parseObject("United Kingdom", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat17.parse("32", parsePosition66);
        java.text.NumberFormat numberFormat71 = properFractionFormat17.getDenominatorFormat();
        java.lang.Object obj72 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat73 = properFractionFormat17.getWholeFormat();
        int int74 = numberFormat73.getMinimumIntegerDigits();
        java.lang.String str76 = numberFormat73.format((double) (-13572.0f));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u6cd5\u6587" + "'", str33, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-13,572" + "'", str76, "-13,572");
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (short) -117);
        org.apache.commons.math.fraction.Fraction fraction2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = fraction1.multiply(fraction2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale3.getDisplayName(locale5);
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale0.getDisplayName(locale5);
        java.lang.String str9 = locale0.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str11 = locale0.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale0.getUnicodeLocaleType("usa");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: usa");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "coreano" + "'", str6, "coreano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str7, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (short) 0);
        int int11 = fieldPosition10.getEndIndex();
        java.text.ParseException parseException14 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray15 = parseException14.getSuppressed();
        int int16 = parseException14.getErrorOffset();
        boolean boolean17 = fieldPosition10.equals((java.lang.Object) parseException14);
        java.text.ParseException parseException20 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int21 = parseException20.getErrorOffset();
        parseException14.addSuppressed((java.lang.Throwable) parseException20);
        int int23 = parseException14.getErrorOffset();
        boolean boolean24 = languageRange1.equals((java.lang.Object) parseException14);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "can" + "'", str6, "can");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        numberFormat2.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj10 = numberFormat6.parseObject("hi!", parsePosition9);
        parsePosition9.setErrorIndex(10);
        java.lang.String str13 = parsePosition9.toString();
        java.lang.Number number14 = numberFormat2.parse("1 / 1", parsePosition9);
        boolean boolean15 = numberFormat2.isGroupingUsed();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.lang.String str20 = locale16.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.util.Currency currency30 = numberFormat27.getCurrency();
        numberFormat26.setCurrency(currency30);
        numberFormat23.setCurrency(currency30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.util.Currency currency36 = numberFormat33.getCurrency();
        java.lang.String str38 = numberFormat33.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat23, numberFormat33);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance();
        java.lang.String str42 = numberFormat40.format(100L);
        properFractionFormat39.setWholeFormat(numberFormat40);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance();
        java.lang.String str46 = numberFormat44.format(100L);
        int int47 = numberFormat44.getMinimumFractionDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale49);
        java.lang.String str53 = numberFormat51.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat44, numberFormat51);
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency56 = numberFormat55.getCurrency();
        numberFormat40.setCurrency(currency56);
        fractionFormat21.setDenominatorFormat(numberFormat40);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance(locale59);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance();
        java.lang.String str63 = numberFormat61.format(100L);
        int int64 = numberFormat61.getMinimumFractionDigits();
        numberFormat61.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode70 = numberFormat67.getRoundingMode();
        numberFormat61.setRoundingMode(roundingMode70);
        numberFormat60.setRoundingMode(roundingMode70);
        numberFormat40.setRoundingMode(roundingMode70);
        java.lang.Object obj74 = numberFormat40.clone();
        numberFormat40.setMinimumFractionDigits((int) (short) -13572);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat78 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale77);
        java.text.NumberFormat numberFormat79 = fractionFormat78.getNumeratorFormat();
        java.text.NumberFormat numberFormat80 = fractionFormat78.getNumeratorFormat();
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj86 = numberFormat82.parseObject("hi!", parsePosition85);
        org.apache.commons.math.fraction.Fraction fraction87 = fractionFormat78.parse("-117 / 1", parsePosition85);
        java.lang.String str88 = parsePosition85.toString();
        int int89 = parsePosition85.getIndex();
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("14");
        java.lang.String str92 = locale91.toLanguageTag();
        boolean boolean93 = parsePosition85.equals((java.lang.Object) locale91);
        java.text.NumberFormat numberFormat94 = java.text.NumberFormat.getPercentInstance(locale91);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat95 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat40, numberFormat94);
        java.lang.Object obj96 = null;
        java.lang.StringBuffer stringBuffer97 = null;
        java.text.FieldPosition fieldPosition98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer99 = numberFormat2.format(obj96, stringBuffer97, fieldPosition98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str13, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(number14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(currency30);
// flaky:         org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency36);
// flaky:         org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0%" + "'", str38, "0%");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "32" + "'", str53, "32");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(currency56);
// flaky:         org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100" + "'", str63, "100");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode70.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str88, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "und" + "'", str92, "und");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(numberFormat94);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getDisplayScript();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale0.getDisplayName(locale3);
        java.lang.String str8 = locale0.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.lang.String str13 = locale9.getScript();
        java.lang.String str14 = locale9.getDisplayScript();
        java.lang.String str15 = locale9.getDisplayVariant();
        java.lang.String str16 = locale0.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setVariant("");
        java.util.Locale.Builder builder21 = builder19.setVariant("French");
        java.util.Locale.Builder builder23 = builder19.setLanguageTag("Kanada");
        java.util.Locale locale24 = builder23.build();
        java.lang.String str25 = locale9.getDisplayLanguage(locale24);
        java.lang.String str26 = locale9.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str7, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str8, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str16, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "kanada");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean" + "'", str25, "Korean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        java.text.ParseException parseException2 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException5 = new java.text.ParseException("10,000%", (int) (byte) 1);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.lang.String str8 = parseException2.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uce90\ub098\ub2e4" + "'", str8, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        java.text.NumberFormat numberFormat25 = properFractionFormat23.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat27 = fractionFormat26.getNumeratorFormat();
        java.text.NumberFormat numberFormat28 = fractionFormat26.getNumeratorFormat();
        java.text.ParseException parseException31 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray32 = parseException31.getSuppressed();
        boolean boolean33 = numberFormat28.equals((java.lang.Object) throwableArray32);
        numberFormat28.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        java.text.NumberFormat numberFormat38 = null;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat40.setCurrency(currency47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        java.lang.String str55 = numberFormat50.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat40, numberFormat50);
        numberFormat40.setMinimumIntegerDigits((int) 'x');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat38, numberFormat40);
        java.text.NumberFormat numberFormat60 = properFractionFormat59.getDenominatorFormat();
        int int61 = numberFormat60.getMaximumFractionDigits();
        properFractionFormat23.setDenominatorFormat(numberFormat60);
        java.text.NumberFormat.Field field63 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field63, (int) (short) 0);
        int int66 = fieldPosition65.getEndIndex();
        java.text.ParseException parseException69 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray70 = parseException69.getSuppressed();
        int int71 = parseException69.getErrorOffset();
        boolean boolean72 = fieldPosition65.equals((java.lang.Object) parseException69);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setVariant("");
        java.util.Locale.Builder builder76 = builder75.clear();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.lang.String str80 = locale77.getISO3Language();
        boolean boolean81 = locale77.hasExtensions();
        java.util.Locale.Builder builder82 = builder75.setLocale(locale77);
        java.util.Locale.Builder builder83 = builder82.clear();
        boolean boolean84 = fieldPosition65.equals((java.lang.Object) builder83);
        java.util.Locale.Builder builder85 = builder83.clear();
        java.util.Locale.Builder builder86 = builder83.clear();
        java.util.Locale.Builder builder87 = builder86.clearExtensions();
        java.util.Locale.Builder builder88 = builder87.clearExtensions();
        java.util.Locale locale89 = builder87.build();
        java.lang.StringBuffer stringBuffer90 = null;
        java.text.NumberFormat.Field field91 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition93 = new java.text.FieldPosition((java.text.Format.Field) field91, (int) (short) 0);
        java.text.FieldPosition fieldPosition94 = new java.text.FieldPosition((java.text.Format.Field) field91);
        int int95 = fieldPosition94.getField();
        fieldPosition94.setEndIndex((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer98 = numberFormat60.format((java.lang.Object) builder87, stringBuffer90, fieldPosition94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
// flaky:         org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
// flaky:         org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0%" + "'", str55, "0%");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(field63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "kor" + "'", str80, "kor");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertNotNull(field91);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 13572, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 13,572 to fraction (-13,571/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (short) 117);
        double double2 = fraction1.doubleValue();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 117.0d + "'", double2 == 117.0d);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale9 = java.util.Locale.UK;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale20.getScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale20, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList26, filteringMode28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getScript();
        java.lang.String str34 = locale31.getVariant();
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayLanguage(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayLanguage(locale50);
        java.lang.String str52 = locale50.getScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        java.lang.String str56 = locale54.getScript();
        java.lang.String str57 = locale54.getVariant();
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale31, locale35, locale36, locale40, locale42, locale45, locale48, locale50, locale54 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayLanguage(locale65);
        java.lang.String str67 = locale65.getScript();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale65, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList59, filteringMode73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.lang.String str81 = locale78.getDisplayName(locale80);
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str46, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str51, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str55, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str66, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "coreano" + "'", str81, "coreano");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat2.equals((java.lang.Object) numberFormat4);
        int int6 = numberFormat2.getMinimumFractionDigits();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = numberFormat2.parseObject("java.text.numberformat$field(per mille)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u52a0\u62ff\u5927" + "'", str1, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = properFractionFormat32.getWholeFormat();
        java.lang.StringBuffer stringBuffer70 = null;
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition73 = new java.text.FieldPosition((java.text.Format.Field) field71, (int) (short) 0);
        int int74 = fieldPosition73.getEndIndex();
        java.text.Format.Field field75 = fieldPosition73.getFieldAttribute();
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition(field75, 1);
        java.lang.String str78 = fieldPosition77.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = numberFormat68.format((double) 116.97143f, stringBuffer70, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
// flaky:         org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
// flaky:         org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str78, "java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int10 = fraction9.intValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.subtract(fraction9);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction5.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction2.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        byte byte15 = fraction14.byteValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-117) + "'", int10 == (-117));
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("anglais");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale8.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale7.getDisplayScript(locale9);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        java.lang.String str15 = locale7.getISO3Language();
        java.lang.String str16 = locale7.getScript();
        java.lang.String str17 = locale1.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet18 = locale1.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale1.getUnicodeLocaleType("java.text.ParseException: anglais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParseException: anglais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-0.028571429f), 0);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getDisplayLanguage();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) str8);
        int int10 = fieldPosition2.getField();
        int int11 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field12 = fieldPosition2.getFieldAttribute();
        java.lang.String str13 = field12.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str8, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str13, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-116), (int) (byte) -10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -116 to fraction (117/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder9 = builder0.setLocale(locale5);
        java.util.Locale locale11 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.util.Locale.setDefault(locale11);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale11);
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale locale19 = builder18.build();
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.lang.String str21 = locale11.getDisplayLanguage(locale19);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        java.lang.String str24 = locale11.getDisplayLanguage(locale23);
        java.util.Set<java.lang.String> strSet25 = locale11.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder9.setLocale(locale11);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "coreano" + "'", str8, "coreano");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uce90\ub098\ub2e4" + "'", str21, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uce90\ub098\ub2e4" + "'", str24, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.negate();
        double double8 = fraction7.doubleValue();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayLanguage(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("-13\240572", "java.text.AttributedCharacterIterator$Attribute(language)", "zh_tw");
        java.lang.String str19 = locale12.getDisplayLanguage(locale18);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = fraction7.compareTo((java.lang.Object) locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-117.0d) + "'", double8 == (-117.0d));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str11, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "coreano" + "'", str13, "coreano");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals(locale18.toString(), "-13\240572_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(LANGUAGE)_zh_tw");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italian" + "'", str19, "Italian");
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = fractionFormat0.getNumeratorFormat();
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        boolean boolean7 = numberFormat2.equals((java.lang.Object) throwableArray6);
        numberFormat2.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale13);
        java.lang.String str16 = numberFormat14.format(0.0d);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getDisplayCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale22.getScript();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale22);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance();
        numberFormat27.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance();
        numberFormat31.setMaximumIntegerDigits((-1));
        java.util.Currency currency34 = numberFormat31.getCurrency();
        numberFormat30.setCurrency(currency34);
        numberFormat27.setCurrency(currency34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat27);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits((-1));
        numberFormat38.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean44 = numberFormat43.isGroupingUsed();
        numberFormat43.setParseIntegerOnly(false);
        java.lang.Number number48 = numberFormat43.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat38, numberFormat43);
        java.text.NumberFormat numberFormat50 = properFractionFormat49.getWholeFormat();
        java.lang.Object obj51 = numberFormat50.clone();
        java.lang.Object obj52 = numberFormat50.clone();
        boolean boolean53 = numberFormat25.equals((java.lang.Object) numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat19);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        parsePosition60.setErrorIndex(10);
        java.lang.String str64 = parsePosition60.toString();
        parsePosition60.setErrorIndex((int) ' ');
        java.lang.Object obj67 = numberFormat19.parseObject("GBR", parsePosition60);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat10.parse("CA", parsePosition60);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\2440.00" + "'", str16, "\2440.00");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u52a0\u62ff\u5927" + "'", str18, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + number48 + "' != '" + 0L + "'", number48, 0L);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str64, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(fraction68);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParsePosition[index=-1,errorIndex=-1]", "\244 10.00");
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = locale5.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale8.getDisplayName(locale9);
        java.lang.String str12 = locale5.getDisplayName(locale9);
        boolean boolean13 = locale5.hasExtensions();
        boolean boolean14 = locale2.equals((java.lang.Object) boolean13);
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseposition[index=-1,errorindex=-1]_\244 10.00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.parseposition[index=-1,errorindex=-1]" + "'", str3, "java.text.parseposition[index=-1,errorindex=-1]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en" + "'", str12, "cor\351en");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        boolean boolean18 = numberFormat11.isParseIntegerOnly();
        java.util.Currency currency19 = numberFormat11.getCurrency();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "XXX");
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        boolean boolean8 = numberFormat3.equals((java.lang.Object) throwableArray7);
        boolean boolean9 = attribute0.equals((java.lang.Object) numberFormat3);
        java.lang.String str10 = attribute0.toString();
        boolean boolean12 = attribute0.equals((java.lang.Object) "32");
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale13.getScript();
        java.lang.String str18 = locale13.getDisplayScript();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleAttributes();
        boolean boolean21 = attribute0.equals((java.lang.Object) locale13);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) -1);
        boolean boolean24 = attribute0.equals((java.lang.Object) parsePosition23);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str10, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        java.text.ParseException parseException2 = new java.text.ParseException("1", (int) (byte) -117);
        int int3 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray4 = parseException2.getSuppressed();
        int int5 = parseException2.getErrorOffset();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException10 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException13 = new java.text.ParseException("anglais", (-117));
        parseException10.addSuppressed((java.lang.Throwable) parseException13);
        int int15 = parseException10.getErrorOffset();
        boolean boolean16 = fieldPosition7.equals((java.lang.Object) parseException10);
        java.text.ParseException parseException19 = new java.text.ParseException("", 10);
        java.text.ParseException parseException22 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int23 = parseException22.getErrorOffset();
        parseException19.addSuppressed((java.lang.Throwable) parseException22);
        parseException10.addSuppressed((java.lang.Throwable) parseException19);
        java.text.ParseException parseException28 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray29 = parseException28.getSuppressed();
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field30, (int) (short) 0);
        int int33 = fieldPosition32.getEndIndex();
        java.text.ParseException parseException36 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray37 = parseException36.getSuppressed();
        int int38 = parseException36.getErrorOffset();
        boolean boolean39 = fieldPosition32.equals((java.lang.Object) parseException36);
        java.text.ParseException parseException42 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int43 = parseException42.getErrorOffset();
        parseException36.addSuppressed((java.lang.Throwable) parseException42);
        parseException28.addSuppressed((java.lang.Throwable) parseException36);
        java.text.ParseException parseException48 = new java.text.ParseException("100", (int) (byte) -1);
        parseException28.addSuppressed((java.lang.Throwable) parseException48);
        parseException19.addSuppressed((java.lang.Throwable) parseException28);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((int) 'a');
        java.text.ParseException parseException55 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.text.ParseException parseException58 = new java.text.ParseException("anglais", (-117));
        parseException55.addSuppressed((java.lang.Throwable) parseException58);
        int int60 = parseException55.getErrorOffset();
        boolean boolean61 = fieldPosition52.equals((java.lang.Object) parseException55);
        java.text.ParseException parseException64 = new java.text.ParseException("", 10);
        java.text.ParseException parseException67 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int68 = parseException67.getErrorOffset();
        parseException64.addSuppressed((java.lang.Throwable) parseException67);
        parseException55.addSuppressed((java.lang.Throwable) parseException64);
        java.text.ParseException parseException73 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray74 = parseException73.getSuppressed();
        java.text.NumberFormat.Field field75 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field75, (int) (short) 0);
        int int78 = fieldPosition77.getEndIndex();
        java.text.ParseException parseException81 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray82 = parseException81.getSuppressed();
        int int83 = parseException81.getErrorOffset();
        boolean boolean84 = fieldPosition77.equals((java.lang.Object) parseException81);
        java.text.ParseException parseException87 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int88 = parseException87.getErrorOffset();
        parseException81.addSuppressed((java.lang.Throwable) parseException87);
        parseException73.addSuppressed((java.lang.Throwable) parseException81);
        java.text.ParseException parseException93 = new java.text.ParseException("100", (int) (byte) -1);
        parseException73.addSuppressed((java.lang.Throwable) parseException93);
        parseException64.addSuppressed((java.lang.Throwable) parseException73);
        parseException19.addSuppressed((java.lang.Throwable) parseException64);
        parseException2.addSuppressed((java.lang.Throwable) parseException64);
        java.lang.String str98 = parseException64.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-117) + "'", int3 == (-117));
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-117) + "'", int5 == (-117));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "java.text.ParseException: " + "'", str98, "java.text.ParseException: ");
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat3.setCurrency(currency8);
        boolean boolean11 = numberFormat3.isGroupingUsed();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.text.NumberFormat numberFormat16 = fractionFormat15.getDenominatorFormat();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction20 = fractionFormat15.parse("french", parsePosition19);
        java.lang.Object obj21 = numberFormat3.parseObject("\2430.00", parsePosition19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance();
        numberFormat22.setMaximumIntegerDigits((-1));
        numberFormat22.setMaximumIntegerDigits((int) (short) 100);
        numberFormat22.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        java.math.RoundingMode roundingMode30 = numberFormat22.getRoundingMode();
        numberFormat3.setRoundingMode(roundingMode30);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance();
        java.lang.String str34 = numberFormat32.format(100L);
        int int35 = numberFormat32.getMinimumFractionDigits();
        numberFormat32.setMaximumIntegerDigits(1);
        boolean boolean39 = numberFormat32.equals((java.lang.Object) (-117));
        java.lang.String str41 = numberFormat32.format((double) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.lang.String str48 = locale46.getScript();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale46, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList52, filteringMode54);
        java.lang.String[] strArray63 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap67);
        boolean boolean69 = numberFormat32.equals((java.lang.Object) languageRangeList43);
        numberFormat32.setMinimumFractionDigits(0);
        java.lang.String str73 = numberFormat32.format((long) (byte) 100);
        numberFormat32.setMaximumIntegerDigits(0);
        java.lang.Class<?> wildcardClass76 = numberFormat32.getClass();
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.NumberFormat.Field field78 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field78);
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition((java.text.Format.Field) field78, 3);
        java.text.FieldPosition fieldPosition83 = new java.text.FieldPosition((java.text.Format.Field) field78, 0);
        int int84 = fieldPosition83.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer85 = numberFormat3.format((java.lang.Object) numberFormat32, stringBuffer77, fieldPosition83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587" + "'", str14, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder15 = builder4.setVariant("FRENCH");
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.lang.String str21 = locale16.getDisplayCountry(locale17);
        boolean boolean22 = locale16.hasExtensions();
        java.util.Locale.Builder builder23 = builder4.setLocale(locale16);
        java.util.Locale.Builder builder24 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder24.setScript("\244 97.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ? 97.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguageTag("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=13689,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=13689,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat39 = properFractionFormat38.getNumeratorFormat();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.lang.String str45 = numberFormat42.format((long) (byte) 1);
        java.text.NumberFormat numberFormat46 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat42, numberFormat46);
        int int48 = numberFormat42.getMinimumIntegerDigits();
        java.lang.Object obj49 = null;
        java.lang.StringBuffer stringBuffer50 = null;
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.PERCENT;
        java.text.FieldPosition fieldPosition53 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int58 = fraction57.intValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction54.subtract(fraction57);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale64.getScript();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale64, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        boolean boolean74 = fraction59.equals((java.lang.Object) localeList73);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.abs();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction75.divide(fraction80);
        int int83 = fraction82.getDenominator();
        boolean boolean84 = field51.equals((java.lang.Object) fraction82);
        java.text.FieldPosition fieldPosition85 = new java.text.FieldPosition((java.text.Format.Field) field51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer86 = numberFormat42.format(obj49, stringBuffer50, fieldPosition85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100%" + "'", str45, "100%");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-117) + "'", int58 == (-117));
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4095 + "'", int83 == 4095);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        java.lang.String[] strArray26 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap33);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("Chinese");
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.util.Locale locale40 = locale37.stripExtensions();
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.parse("Canada", strMap43);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.setVariant("");
        java.util.Locale.Builder builder48 = builder47.clear();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str54 = locale49.getDisplayCountry(locale50);
        java.util.Locale locale55 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str56 = locale50.getDisplayLanguage(locale55);
        java.util.Locale.Builder builder57 = builder47.setLocale(locale55);
        java.util.Locale.Builder builder58 = builder57.clearExtensions();
        java.util.Locale.Builder builder60 = builder58.setLanguage("French");
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayLanguage(locale62);
        java.util.Locale locale64 = locale62.stripExtensions();
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale66);
        java.lang.String str68 = locale65.getDisplayName(locale66);
        java.lang.String str69 = locale62.getDisplayName(locale66);
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale66);
        java.util.Locale locale72 = new java.util.Locale("francese");
        java.lang.String str73 = locale66.getDisplayScript(locale72);
        java.lang.String str74 = locale66.getDisplayVariant();
        java.lang.String str75 = locale66.getCountry();
        java.util.Locale.Builder builder76 = builder58.setLocale(locale66);
        java.util.Locale locale77 = builder58.build();
        java.util.Locale.setDefault(locale77);
        java.util.Set<java.lang.String> strSet79 = locale77.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList44, (java.util.Collection<java.lang.String>) strSet79, filteringMode80);
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet41, filteringMode80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "chinese");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "chinese" + "'", str38, "chinese");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "French (France)" + "'", str39, "French (France)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "chinese");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u671d\u9c9c\u6587" + "'", str56, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str63, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "cor\351en" + "'", str69, "cor\351en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals(locale72.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode80.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList82);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "us" + "'", str2, "us");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -1);
        parsePosition1.setErrorIndex(3);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str10 = locale5.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale11.getDisplayCountry(locale14);
        java.lang.String str16 = locale5.getDisplayVariant(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.lang.String str19 = locale0.getDisplayName(locale5);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str21 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "United Kingdom" + "'", str15, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4" + "'", str21, "\uc601\uc5b4");
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int4 = fraction3.intValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction0.subtract(fraction3);
        double double6 = fraction5.doubleValue();
        long long7 = fraction5.longValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction5.negate();
        int int9 = fraction5.getNumerator();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-117) + "'", int4 == (-117));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 117.0d + "'", double6 == 117.0d);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 117L + "'", long7 == 117L);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 117 + "'", int9 == 117);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("-13 / 4", (double) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        numberFormat3.setMaximumIntegerDigits((-1));
        java.util.Currency currency6 = numberFormat3.getCurrency();
        numberFormat2.setCurrency(currency6);
        numberFormat1.setCurrency(currency6);
        java.math.RoundingMode roundingMode9 = numberFormat1.getRoundingMode();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.text.NumberFormat numberFormat13 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat13);
        java.text.NumberFormat numberFormat15 = properFractionFormat14.getWholeFormat();
        java.lang.Object obj16 = numberFormat15.clone();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) ' ');
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertNull(field2);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("inglese");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale6, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayLanguage(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayLanguage(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayLanguage(locale31);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale31);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayLanguage(locale36);
        java.lang.String str38 = locale36.getScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale40.getVariant();
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale17, locale21, locale22, locale26, locale28, locale31, locale34, locale36, locale40 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayLanguage(locale51);
        java.lang.String str53 = locale51.getScript();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale51, locale54, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList45, filteringMode59);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayLanguage(locale66);
        java.lang.String str68 = locale66.getScript();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale66, locale69, locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList72, filteringMode74);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList75, filteringMode76);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Collection<java.util.Locale> localeCollection81 = null;
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, localeCollection81, filteringMode82);
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayLanguage(locale85);
        java.lang.String str87 = locale84.getISO3Language();
        java.lang.String str88 = locale84.getScript();
        java.lang.String str89 = locale84.getDisplayScript();
        java.lang.String str90 = locale84.getDisplayVariant();
        java.util.Set<java.lang.String> strSet91 = locale84.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet91, filteringMode92);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList77, filteringMode92);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap95 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList96 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str24, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str29, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str86, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "kor" + "'", str87, "kor");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode92.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(languageRangeList96);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 10);
        parsePosition33.setErrorIndex((int) ' ');
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat17.parse("coreano", parsePosition33);
        parsePosition33.setIndex(116);
        java.lang.String str39 = parsePosition33.toString();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0 %" + "'", str16, "0 %");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=116,errorIndex=9]" + "'", str39, "java.text.ParsePosition[index=116,errorIndex=9]");
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        int int2 = fraction1.getDenominator();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????? (??????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str15 = locale12.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Set<java.lang.Character> charSet19 = locale16.getExtensionKeys();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale22.getScript();
        java.lang.String str25 = locale22.getVariant();
        java.util.Locale.setDefault(category20, locale22);
        java.lang.String str27 = locale22.getDisplayName();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale28.getDisplayCountry(locale31);
        java.lang.String str33 = locale22.getDisplayVariant(locale28);
        java.lang.String str34 = locale16.getDisplayName(locale28);
        java.lang.String str35 = locale12.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder36 = builder11.setLocale(locale12);
        java.lang.Object obj37 = locale12.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "French" + "'", str13, "French");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fr" + "'", str15, "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "fr");
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean1 = numberFormat0.isGroupingUsed();
        numberFormat0.setParseIntegerOnly(false);
        java.lang.Number number5 = numberFormat0.parse("0%");
        java.util.Currency currency6 = numberFormat0.getCurrency();
        int int7 = numberFormat0.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0L + "'", number5, 0L);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.util.Currency currency3 = numberFormat0.getCurrency();
        java.lang.String str5 = numberFormat0.format((double) 10);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.util.Currency currency11 = numberFormat8.getCurrency();
        numberFormat7.setCurrency(currency11);
        java.lang.String str14 = numberFormat7.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat16);
        int int18 = numberFormat7.getMinimumFractionDigits();
        boolean boolean19 = numberFormat7.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction22 = fractionFormat20.parse("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"????????\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0%" + "'", str5, "0%");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10,000%" + "'", str14, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 10000L, (int) (short) -1170);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 10,000 to fraction (-9,999/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj7 = numberFormat3.parseObject("hi!", parsePosition6);
        java.lang.Object obj8 = numberFormat1.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition6);
        java.lang.String str10 = numberFormat1.format((double) 'x');
        numberFormat1.setMinimumIntegerDigits(1);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (byte) -1);
        java.lang.String str16 = parsePosition15.toString();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder20 = builder17.setVariant("");
        java.util.Locale.Builder builder21 = builder17.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.setLanguageTag("anglais");
        java.util.Locale locale24 = builder23.build();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        boolean boolean26 = parsePosition15.equals((java.lang.Object) builder25);
        java.lang.Object obj27 = numberFormat1.parseObject("10", parsePosition15);
        int int28 = parsePosition15.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "120" + "'", str10, "120");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        boolean boolean6 = locale2.hasExtensions();
        java.lang.String str7 = locale2.toLanguageTag();
        java.lang.String str8 = locale2.getScript();
        java.lang.String str9 = locale0.getDisplayLanguage(locale2);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category10);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale.setDefault(category10, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category10);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.util.Locale.setDefault(category10, locale22);
        java.lang.String str26 = locale0.getDisplayLanguage(locale22);
        java.util.Set<java.lang.Character> charSet27 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian (Italy)" + "'", str1, "Italian (Italy)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str9, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str26, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguageTag("13,572 / 35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 13,572 / 35 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        boolean boolean10 = fieldPosition2.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field11 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setEndIndex(10);
        int int14 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex(120);
        java.lang.String str17 = fieldPosition2.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=120,endIndex=10]" + "'", str17, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=120,endIndex=10]");
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder24.setLocale(locale27);
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder33 = builder30.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder30.setVariant("52,00 \244");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 52,00 ? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        java.util.Locale locale3 = new java.util.Locale("United Kingdom", "French", "zh_CN");
        java.util.Locale.setDefault(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale3.getUnicodeLocaleType("java.text.ParseException: ko");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParseException: ko");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "united kingdom_FRENCH_zh_CN");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        numberFormat4.setMaximumIntegerDigits((-1));
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat3.setCurrency(currency7);
        numberFormat0.setCurrency(currency7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = numberFormat0.equals((java.lang.Object) strList32);
        numberFormat0.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        numberFormat42.setMaximumIntegerDigits((-1));
        java.util.Currency currency45 = numberFormat42.getCurrency();
        numberFormat41.setCurrency(currency45);
        java.lang.String str48 = numberFormat41.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat50 = fractionFormat49.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40, numberFormat41, numberFormat50);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        parsePosition60.setErrorIndex((int) (short) 10);
        int int66 = parsePosition60.getErrorIndex();
        java.lang.Object obj67 = numberFormat41.parseObject("\u82f1\u6587\u7f8e\u570b)", parsePosition60);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat38.parse("java.text.ParsePosition[index=0,errorIndex=9]", parsePosition60);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) -1);
        int int72 = parsePosition71.getErrorIndex();
        int int73 = parsePosition71.getIndex();
        int int74 = parsePosition71.getErrorIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat38.parse("java.text.ParseException: 0,00 \244", parsePosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10,000%" + "'", str48, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(fraction68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.util.Currency currency13 = numberFormat10.getCurrency();
        numberFormat9.setCurrency(currency13);
        numberFormat6.setCurrency(currency13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat6);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        numberFormat17.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean23 = numberFormat22.isGroupingUsed();
        numberFormat22.setParseIntegerOnly(false);
        java.lang.Number number27 = numberFormat22.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat17, numberFormat22);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.lang.Object obj30 = numberFormat29.clone();
        java.lang.Object obj31 = numberFormat29.clone();
        boolean boolean32 = numberFormat4.equals((java.lang.Object) numberFormat29);
        numberFormat4.setGroupingUsed(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = numberFormat4.parseObject("fran\347ais");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 0L + "'", number27, 0L);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance();
        numberFormat39.setMaximumIntegerDigits((-1));
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat38.setCurrency(currency42);
        numberFormat35.setCurrency(currency42);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits((-1));
        java.util.Currency currency48 = numberFormat45.getCurrency();
        java.lang.String str50 = numberFormat45.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34, numberFormat35, numberFormat45);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance();
        java.lang.String str55 = numberFormat53.format(100L);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = numberFormat57.parseObject("hi!", parsePosition60);
        java.lang.Number number62 = numberFormat53.parse("10,000%", parsePosition60);
        int int63 = parsePosition60.getErrorIndex();
        int int64 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction65 = properFractionFormat51.parse("French", parsePosition60);
        int int66 = parsePosition60.getIndex();
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat32.parse("fran\347ais", parsePosition60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance();
        numberFormat68.setMaximumIntegerDigits((-1));
        java.util.Currency currency71 = numberFormat68.getCurrency();
        properFractionFormat32.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance();
        numberFormat73.setMaximumIntegerDigits((-1));
        java.util.Currency currency76 = numberFormat73.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73);
        numberFormat73.setMaximumFractionDigits((int) (short) -117);
        properFractionFormat32.setWholeFormat(numberFormat73);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance();
        numberFormat81.setMinimumIntegerDigits((-1));
        properFractionFormat32.setWholeFormat(numberFormat81);
        java.text.NumberFormat numberFormat85 = properFractionFormat32.getDenominatorFormat();
        java.lang.String str87 = numberFormat85.format(0L);
        numberFormat85.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0%" + "'", str50, "0%");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(number62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNull(fraction65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(currency71);
        org.junit.Assert.assertEquals(currency71.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        java.text.ParseException parseException2 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.text.ParseException parseException5 = new java.text.ParseException("\uc601\uc5b4", 9);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) parseException5);
        java.lang.String str8 = parseException5.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4" + "'", str8, "\uc601\uc5b4");
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getVariant();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale7.getUnicodeLocaleType("java.text.NumberFormat$Field(exponent sign)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.NumberFormat$Field(exponent sign)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u97d3\u6587" + "'", str6, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese" + "'", str10, "Chinese");
        org.junit.Assert.assertNotNull(fractionFormat11);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat24.setCurrency(currency40);
        fractionFormat5.setDenominatorFormat(numberFormat24);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance();
        java.lang.String str45 = numberFormat43.format(100L);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj51 = numberFormat47.parseObject("hi!", parsePosition50);
        java.lang.Number number52 = numberFormat43.parse("10,000%", parsePosition50);
        fractionFormat5.setDenominatorFormat(numberFormat43);
        boolean boolean54 = numberFormat43.isParseIntegerOnly();
        numberFormat43.setMinimumIntegerDigits((int) (byte) 117);
        int int57 = numberFormat43.getMaximumIntegerDigits();
        int int58 = numberFormat43.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(number52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 117 + "'", int58 == 117);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        int int1 = numberFormat0.getMaximumFractionDigits();
        numberFormat0.setMinimumIntegerDigits((int) (byte) 116);
        numberFormat0.setMaximumIntegerDigits((int) (short) 1);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.util.Locale.Builder builder19 = builder12.setLocale(locale14);
        java.util.Locale.Builder builder20 = builder19.clear();
        boolean boolean21 = fieldPosition2.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setVariant("francese");
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("anglais");
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        java.util.Locale.Builder builder30 = builder24.setLocale(locale27);
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("deu");
        java.util.Locale.Builder builder33 = builder30.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder30.setLanguageTag("united kingdom_1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: united kingdom_1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        int int12 = numberFormat1.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.lang.String str29 = locale27.getScript();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale27, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        java.lang.String[] strArray44 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList45);
        boolean boolean48 = numberFormat13.equals((java.lang.Object) strList45);
        numberFormat13.setMinimumFractionDigits(0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat13);
        int int52 = numberFormat13.getMinimumFractionDigits();
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field55, (int) (short) 0);
        int int58 = fieldPosition57.getEndIndex();
        fieldPosition57.setBeginIndex((int) ' ');
        int int61 = fieldPosition57.getBeginIndex();
        int int62 = fieldPosition57.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer63 = numberFormat13.format(1368.9d, stringBuffer54, fieldPosition57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
        org.junit.Assert.assertEquals(currency5.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance();
        java.lang.String str6 = numberFormat4.format(100L);
        int int7 = numberFormat4.getMinimumFractionDigits();
        numberFormat4.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        numberFormat10.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode13 = numberFormat10.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode13);
        numberFormat3.setRoundingMode(roundingMode13);
        int int16 = numberFormat3.getMinimumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.util.Locale locale25 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "10.000%");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale25);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale25);
        fractionFormat22.setNumeratorFormat(numberFormat27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat3, numberFormat27);
        numberFormat27.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str20, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_10.000%");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder4 = builder0.setLanguage("eng");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale7 = new java.util.Locale("\uce90\ub098\ub2e4");
        java.lang.String str8 = locale7.getDisplayVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.setLocale(locale7);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(locale7.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition((int) (short) 10);
        parsePosition4.setErrorIndex((int) (byte) 1);
        java.lang.Object obj7 = fractionFormat1.parseObject("United Kingdom", parsePosition4);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.util.Currency currency16 = numberFormat13.getCurrency();
        numberFormat12.setCurrency(currency16);
        numberFormat11.setCurrency(currency16);
        fractionFormat1.setNumeratorFormat(numberFormat11);
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field21, (int) (short) 0);
        java.lang.String str24 = fieldPosition23.toString();
        java.lang.String str25 = fieldPosition23.toString();
        fieldPosition23.setBeginIndex((int) (byte) 10);
        fieldPosition23.setBeginIndex((int) '4');
        int int30 = fieldPosition23.getBeginIndex();
        java.text.Format.Field field31 = fieldPosition23.getFieldAttribute();
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getNumeratorFormat();
        int int34 = numberFormat33.getMinimumFractionDigits();
        numberFormat33.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance();
        numberFormat44.setMaximumIntegerDigits((-1));
        java.util.Currency currency47 = numberFormat44.getCurrency();
        numberFormat43.setCurrency(currency47);
        numberFormat40.setCurrency(currency47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits((-1));
        java.util.Currency currency53 = numberFormat50.getCurrency();
        java.lang.String str55 = numberFormat50.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat40, numberFormat50);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance();
        java.lang.String str60 = numberFormat58.format(100L);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj66 = numberFormat62.parseObject("hi!", parsePosition65);
        java.lang.Number number67 = numberFormat58.parse("10,000%", parsePosition65);
        int int68 = parsePosition65.getErrorIndex();
        java.lang.Object obj69 = properFractionFormat56.parseObject("French", parsePosition65);
        java.lang.Object obj70 = fractionFormat37.parseObject("kor", parsePosition65);
        boolean boolean71 = fieldPosition23.equals((java.lang.Object) parsePosition65);
        org.apache.commons.math.fraction.Fraction fraction72 = fractionFormat1.parse("2", parsePosition65);
        java.text.NumberFormat numberFormat73 = null;
        // The following exception was thrown during execution in test generation
        try {
            fractionFormat1.setNumeratorFormat(numberFormat73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: numerator format can not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str25, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0%" + "'", str55, "0%");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(fraction72);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        java.util.Locale locale3 = new java.util.Locale("", "-116 / 117", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str4 = locale3.getISO3Language();
        org.junit.Assert.assertEquals(locale3.toString(), "_-116 / 117_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setVariant("French");
        java.util.Locale locale10 = builder9.build();
        java.lang.String str11 = locale10.getISO3Language();
        boolean boolean12 = locale4.equals((java.lang.Object) locale10);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.setVariant("French");
        java.util.Locale.Builder builder6 = builder2.setVariant("Chinese");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayLanguage(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category7);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale.setDefault(category7, locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale15);
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(locale20);
        java.util.Set<java.lang.Character> charSet22 = locale20.getExtensionKeys();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale20.getDisplayScript(locale23);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale20);
        java.util.Set<java.lang.Character> charSet27 = locale20.getExtensionKeys();
        java.util.Locale.Builder builder28 = builder19.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder28.setRegion("-13\240572");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -13?572 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str10, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-13), (int) (byte) -35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -13 to fraction (-9,223,372,036,854,775,794/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat3 = fractionFormat1.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj9 = numberFormat5.parseObject("hi!", parsePosition8);
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat1.parse("-117 / 1", parsePosition8);
        java.lang.String str11 = parsePosition8.toString();
        int int12 = parsePosition8.getIndex();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("14");
        java.lang.String str15 = locale14.toLanguageTag();
        boolean boolean16 = parsePosition8.equals((java.lang.Object) locale14);
        java.util.Locale locale18 = new java.util.Locale("java.text.ParsePosition[index=-117,errorIndex=9]");
        boolean boolean19 = parsePosition8.equals((java.lang.Object) locale18);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=9]" + "'", str11, "java.text.ParsePosition[index=10,errorIndex=9]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "java.text.parseposition[index=-117,errorindex=9]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) 100);
        int int2 = fieldPosition1.getBeginIndex();
        fieldPosition1.setEndIndex((-1));
        int int5 = fieldPosition1.getBeginIndex();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance();
        numberFormat7.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        numberFormat10.setCurrency(currency14);
        numberFormat7.setCurrency(currency14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        java.lang.String str22 = numberFormat17.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat7, numberFormat17);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance();
        java.lang.String str26 = numberFormat24.format(100L);
        properFractionFormat23.setWholeFormat(numberFormat24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance();
        java.lang.String str30 = numberFormat28.format(100L);
        int int31 = numberFormat28.getMinimumFractionDigits();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayLanguage(locale33);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getNumberInstance(locale33);
        java.lang.String str37 = numberFormat35.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat28, numberFormat35);
        int int39 = numberFormat35.getMaximumIntegerDigits();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) '4');
        java.lang.Number number43 = numberFormat35.parse("java.text.ParsePosition[index=10,errorIndex=9]", parsePosition42);
        boolean boolean44 = fieldPosition1.equals((java.lang.Object) parsePosition42);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "32" + "'", str37, "32");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNull(number43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(116);
        java.lang.String str2 = fieldPosition1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=116,attribute=null,beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=116,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = properFractionFormat32.getDenominatorFormat();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getDisplayCountry();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale37);
        java.lang.String str41 = numberFormat39.format((double) 52);
        properFractionFormat32.setNumeratorFormat(numberFormat39);
        java.lang.String str44 = numberFormat39.format((long) (-2));
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u52a0\u62ff\u5927" + "'", str38, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "$52.00" + "'", str41, "$52.00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-$2.00" + "'", str44, "-$2.00");
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.NumberFormat$Field(percent)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.numberformat$field(percent)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("French");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str19 = locale16.getISO3Country();
        java.util.Locale.setDefault(category0, locale16);
        java.lang.String str21 = locale16.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "french" + "'", str10, "french");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "coreano" + "'", str17, "coreano");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "italiano" + "'", str21, "italiano");
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale11);
        java.util.Locale locale16 = new java.util.Locale("French");
        java.util.Locale locale17 = locale16.stripExtensions();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale16);
        java.math.RoundingMode roundingMode19 = numberFormat18.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = numberFormat14.parseObject("fra");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale16.toString(), "french");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "french");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale0.getDisplayScript(locale2);
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale0.getDisplayVariant(locale6);
        java.lang.String str8 = locale6.getVariant();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str11 = locale10.getISO3Language();
        java.util.Locale locale14 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=32]", "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=0]");
        java.lang.String str15 = locale10.getDisplayVariant(locale14);
        java.lang.String str16 = locale6.getDisplayVariant(locale10);
        java.lang.String str17 = locale10.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale14.toString(), "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(per mille),beginindex=10,endindex=32]_JAVA.TEXT.FIELDPOSITION[FIELD=0,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(PER MILLE),BEGININDEX=10,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance();
        numberFormat2.setMaximumIntegerDigits((-1));
        java.util.Currency currency5 = numberFormat2.getCurrency();
        numberFormat1.setCurrency(currency5);
        java.lang.String str8 = numberFormat1.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat12.getNumeratorFormat();
        java.text.ParseException parseException17 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray18 = parseException17.getSuppressed();
        boolean boolean19 = numberFormat14.equals((java.lang.Object) throwableArray18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat21 = fractionFormat20.getNumeratorFormat();
        java.text.NumberFormat numberFormat22 = fractionFormat20.getNumeratorFormat();
        java.text.ParseException parseException25 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray26 = parseException25.getSuppressed();
        boolean boolean27 = numberFormat22.equals((java.lang.Object) throwableArray26);
        numberFormat22.setMaximumFractionDigits((int) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.text.NumberFormat numberFormat31 = properFractionFormat30.getWholeFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat14, numberFormat31);
        int int33 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayLanguage(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        java.lang.String str38 = locale35.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.lang.String str40 = locale35.getVariant();
        java.lang.StringBuffer stringBuffer41 = null;
        java.text.NumberFormat.Field field42 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition((java.text.Format.Field) field42);
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str45 = field44.toString();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getIntegerInstance(locale46);
        boolean boolean49 = field44.equals((java.lang.Object) numberFormat48);
        java.text.NumberFormat.Field field50 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj51 = new java.lang.Object();
        boolean boolean52 = field50.equals(obj51);
        boolean boolean53 = field44.equals((java.lang.Object) field50);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field50);
        int int55 = fieldPosition54.getBeginIndex();
        int int56 = fieldPosition54.getEndIndex();
        fieldPosition54.setBeginIndex((int) (byte) 116);
        boolean boolean59 = field42.equals((java.lang.Object) fieldPosition54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer60 = numberFormat10.format((java.lang.Object) locale35, stringBuffer41, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency5);
// flaky:         org.junit.Assert.assertEquals(currency5.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10,000%" + "'", str8, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str36, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u97d3\u6587" + "'", str38, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(field42);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str45, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(field50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\ub3c5\uc77c\uc5b4", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        java.util.Locale locale2 = new java.util.Locale("java.text.parseposition[index=10,errorindex=10]", "English (United Kingdom)");
        boolean boolean3 = locale2.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for java.text.parseposition[index=10,errorindex=10]");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseposition[index=10,errorindex=10]_ENGLISH (UNITED KINGDOM)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        java.text.ParseException parseException2 = new java.text.ParseException("$52.00", (int) (byte) 0);
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: $52.00" + "'", str3, "java.text.ParseException: $52.00");
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayLanguage(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale5.getDisplayName(locale7);
        java.util.Locale.Builder builder13 = builder4.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("japonais (Japon)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: japonais (Japon) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        int int12 = fraction11.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.multiply(fraction15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance();
        boolean boolean18 = numberFormat17.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isParseIntegerOnly();
        boolean boolean21 = fraction15.equals((java.lang.Object) boolean20);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction0.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int31 = fraction30.intValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction25.add(fraction27);
        int int34 = fraction33.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction39.subtract(fraction42);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction37.add(fraction39);
        int int46 = fraction45.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction33.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int56 = fraction55.intValue();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction52.subtract(fraction55);
        boolean boolean59 = fraction55.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction33.add(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction0.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction0.negate();
        double double64 = fraction0.doubleValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-117 / 1" + "'", str26, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-117) + "'", int31 == (-117));
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-117 / 1" + "'", str38, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-117) + "'", int43 == (-117));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-117) + "'", int56 == (-117));
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        numberFormat3.setMinimumFractionDigits((int) 'x');
        java.util.Currency currency6 = numberFormat3.getCurrency();
        int int7 = numberFormat3.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "GBP");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 120 + "'", int7 == 120);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance();
        java.lang.String str20 = numberFormat18.format(100L);
        properFractionFormat17.setWholeFormat(numberFormat18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance();
        java.lang.String str24 = numberFormat22.format(100L);
        int int25 = numberFormat22.getMinimumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale27);
        java.lang.String str31 = numberFormat29.format((long) ' ');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat22, numberFormat29);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat34 = properFractionFormat32.getWholeFormat();
        java.text.NumberFormat numberFormat35 = properFractionFormat32.getWholeFormat();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.lang.String str43 = locale38.getDisplayCountry(locale39);
        java.lang.String str44 = locale39.toLanguageTag();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale39);
        java.lang.String str46 = locale36.getDisplayVariant(locale39);
        java.lang.String str48 = locale39.getExtension('u');
        java.lang.String str49 = locale39.getCountry();
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getIntegerInstance(locale39);
        properFractionFormat32.setNumeratorFormat(numberFormat50);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, (int) (short) -117);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field56, (int) (short) 0);
        java.lang.String str59 = fieldPosition58.toString();
        java.lang.String str60 = fieldPosition58.toString();
        fieldPosition58.setBeginIndex((int) (byte) 10);
        fieldPosition58.setBeginIndex((int) '4');
        boolean boolean66 = fieldPosition58.equals((java.lang.Object) (short) -1);
        java.text.Format.Field field67 = fieldPosition58.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer68 = properFractionFormat32.format(fraction54, stringBuffer55, fieldPosition58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
// flaky:         org.junit.Assert.assertEquals(currency8.toString(), "GBP");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
// flaky:         org.junit.Assert.assertEquals(currency14.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32" + "'", str31, "32");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "kor" + "'", str42, "kor");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko" + "'", str44, "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str59, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(field67);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        int int30 = parsePosition26.getIndex();
        org.apache.commons.math.fraction.Fraction fraction31 = properFractionFormat17.parse("French", parsePosition26);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance();
        numberFormat35.setMaximumIntegerDigits((-1));
        java.util.Currency currency38 = numberFormat35.getCurrency();
        numberFormat34.setCurrency(currency38);
        java.lang.String str41 = numberFormat34.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat43 = fractionFormat42.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat34, numberFormat43);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj50 = numberFormat46.parseObject("hi!", parsePosition49);
        java.lang.String str51 = parsePosition49.toString();
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat44.parse("\244 32.00", parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat17.parse("\uc911\uad6d\uc5b4", parsePosition49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat55 = fractionFormat54.getNumeratorFormat();
        java.text.NumberFormat numberFormat56 = fractionFormat54.getNumeratorFormat();
        java.lang.String str58 = numberFormat56.format((double) 1.0f);
        properFractionFormat17.setWholeFormat(numberFormat56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency61 = numberFormat60.getCurrency();
        boolean boolean62 = numberFormat60.isParseIntegerOnly();
        properFractionFormat17.setWholeFormat(numberFormat60);
        numberFormat60.setMinimumIntegerDigits((int) (byte) 10);
        java.util.Currency currency66 = numberFormat60.getCurrency();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(fraction31);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str51, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        java.util.Locale locale2 = new java.util.Locale("", "\u52a0\u62ff\u5927");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u52a0\u62ff\u5927");
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str3 = fieldPosition2.toString();
        java.lang.String str4 = fieldPosition2.toString();
        fieldPosition2.setBeginIndex((int) (byte) 10);
        fieldPosition2.setBeginIndex((int) '4');
        fieldPosition2.setBeginIndex((int) (short) 1);
        java.text.Format.Field field11 = fieldPosition2.getFieldAttribute();
        int int12 = fieldPosition2.getEndIndex();
        fieldPosition2.setBeginIndex((int) (short) 1);
        java.util.Locale locale15 = java.util.Locale.UK;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale17);
        numberFormat20.setMaximumIntegerDigits(0);
        boolean boolean23 = fieldPosition2.equals((java.lang.Object) numberFormat20);
        int int24 = numberFormat20.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((-117), (int) (byte) 1);
        boolean boolean9 = numberFormat4.equals((java.lang.Object) (byte) 1);
        numberFormat4.setParseIntegerOnly(true);
        java.lang.Object obj12 = numberFormat4.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = numberFormat4.parse("CHN");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"CHN\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguage("French");
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("FR");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("2\240147\240483\240647,00 \244");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2?147?483?647,00 ? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        boolean boolean8 = locale4.hasExtensions();
        java.util.Locale.Builder builder9 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("Chinese");
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getScript();
        java.lang.String str20 = locale17.getVariant();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale22 = java.util.Locale.getDefault(category15);
        java.util.Locale locale23 = java.util.Locale.getDefault(category15);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale27 = new java.util.Locale("United Kingdom", "1");
        java.lang.String str28 = locale23.getDisplayLanguage(locale27);
        java.util.Locale.Builder builder29 = builder14.setLocale(locale23);
        java.util.Locale.Builder builder31 = builder14.setRegion("FR");
        java.util.Locale.Builder builder33 = builder14.setVariant("");
        java.util.Locale.Builder builder35 = builder14.removeUnicodeLocaleAttribute("French");
        java.util.Locale.Builder builder38 = builder14.setExtension('x', "35");
        java.util.Locale.Builder builder39 = builder14.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder39.setVariant("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=10,endIndex=35] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str6, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale27.toString(), "united kingdom_1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean" + "'", str28, "Korean");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("13,571");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits((-1));
        java.util.Currency currency9 = numberFormat6.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        int int11 = numberFormat6.getMinimumIntegerDigits();
        numberFormat6.setParseIntegerOnly(true);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        java.lang.String str23 = numberFormat16.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat25 = fractionFormat24.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat16, numberFormat25);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (short) 10);
        parsePosition29.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat26.parse("fran\347ais", parsePosition29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits((-1));
        java.util.Currency currency36 = numberFormat33.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        boolean boolean38 = parsePosition29.equals((java.lang.Object) fractionFormat37);
        java.lang.Object obj39 = numberFormat6.parseObject("0 / 1", parsePosition29);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale41);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 10);
        parsePosition45.setErrorIndex((int) (byte) 1);
        java.lang.Object obj48 = fractionFormat42.parseObject("United Kingdom", parsePosition45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj53 = numberFormat49.parseObject("hi!", parsePosition52);
        fractionFormat42.setDenominatorFormat(numberFormat49);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj60 = numberFormat56.parseObject("hi!", parsePosition59);
        parsePosition59.setErrorIndex(10);
        org.apache.commons.math.fraction.Fraction fraction63 = fractionFormat42.parse("coreano", parsePosition59);
        java.lang.Object obj64 = numberFormat6.parseObject("en-GB", parsePosition59);
        java.lang.Object obj65 = numberFormat3.parseObject("\uce90\ub098\ub2e4", parsePosition59);
        int int66 = numberFormat3.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "10,000%" + "'", str23, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat1);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance();
        numberFormat12.setMaximumIntegerDigits((-1));
        numberFormat12.setMinimumIntegerDigits(0);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance();
        boolean boolean18 = numberFormat17.isGroupingUsed();
        numberFormat17.setParseIntegerOnly(false);
        java.lang.Number number22 = numberFormat17.parse("0%");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat12, numberFormat17);
        java.text.NumberFormat numberFormat24 = properFractionFormat23.getWholeFormat();
        numberFormat24.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.getDisplayScript();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        properFractionFormat27.setWholeFormat(numberFormat30);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj37 = numberFormat33.parseObject("hi!", parsePosition36);
        parsePosition36.setErrorIndex(10);
        parsePosition36.setIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat27.parse("ja-JP", parsePosition36);
        parsePosition36.setIndex(387);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + 0L + "'", number22, 0L);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(fraction42);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance();
        java.lang.String str4 = numberFormat2.format(100L);
        int int5 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode11 = numberFormat8.getRoundingMode();
        numberFormat2.setRoundingMode(roundingMode11);
        numberFormat1.setRoundingMode(roundingMode11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat16 = fractionFormat15.getNumeratorFormat();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance();
        numberFormat20.setMaximumIntegerDigits((-1));
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat19.setCurrency(currency23);
        java.lang.String str26 = numberFormat19.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat28 = fractionFormat27.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat19, numberFormat28);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) (short) 10);
        parsePosition32.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction35 = properFractionFormat29.parse("fran\347ais", parsePosition32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance();
        numberFormat36.setMaximumIntegerDigits((-1));
        java.util.Currency currency39 = numberFormat36.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        boolean boolean41 = parsePosition32.equals((java.lang.Object) fractionFormat40);
        java.lang.Object obj42 = numberFormat16.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition32);
        java.lang.String str43 = parsePosition32.toString();
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale53.getScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale53, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        java.lang.String[] strArray70 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList71);
        java.lang.String str74 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList71);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Collection<java.util.Locale> localeCollection78 = null;
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, localeCollection78, filteringMode79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, localeCollection78);
        java.util.Locale locale82 = java.util.Locale.UK;
        java.lang.String str83 = locale82.getDisplayScript();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet84);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap86 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList87 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap86);
        boolean boolean88 = parsePosition32.equals((java.lang.Object) languageRangeList87);
        int int89 = parsePosition32.getErrorIndex();
        parsePosition32.setIndex((int) (byte) 117);
        java.lang.Number number92 = numberFormat1.parse("-4", parsePosition32);
        java.math.RoundingMode roundingMode93 = numberFormat1.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
// flaky:         org.junit.Assert.assertEquals(currency23.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "10,000%" + "'", str26, "10,000%");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(fraction35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency39);
// flaky:         org.junit.Assert.assertEquals(currency39.toString(), "CAD");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=10]" + "'", str43, "java.text.ParsePosition[index=10,errorIndex=10]");
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(languageRangeList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNull(number92);
        org.junit.Assert.assertTrue("'" + roundingMode93 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode93.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("en");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.lang.String str16 = locale14.getScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale14, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.lang.String[] strArray31 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Collection<java.util.Locale> localeCollection39 = null;
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, localeCollection39, filteringMode40);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, localeCollection39);
        java.util.Locale locale43 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale48.getScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale48, locale51, locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList54, filteringMode56);
        java.lang.String[] strArray65 = new java.lang.String[] { "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", "", "hi!", "kor", "10,000%", "\ud55c\uad6d\uc5b4", "kor" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList66);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.lang.String str70 = locale69.getDisplayScript();
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayLanguage(locale76);
        java.lang.String str78 = locale76.getScript();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale76, locale79, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet71, filteringMode84);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList42, filteringMode84);
        java.util.Collection<java.lang.String> strCollection88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags(languageRangeList2, strCollection88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str49, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str77, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(localeList87);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        java.util.Locale locale3 = new java.util.Locale("java.text.ParseException: kor", "0 %", "francese");
        java.lang.String str4 = locale3.toLanguageTag();
        boolean boolean5 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.parseexception: kor_0 %_francese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und-francese" + "'", str4, "und-francese");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("-0 %", (double) (byte) -116);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-116.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale34.getScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale38.getScript();
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale15, locale19, locale20, locale24, locale26, locale29, locale32, locale34, locale38 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.lang.String str51 = locale49.getScript();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale49, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList55, filteringMode57);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList43, filteringMode57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap60);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int7 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.subtract(fraction6);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction3);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.add(fraction11);
        long long13 = fraction9.longValue();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder17 = builder14.setVariant("");
        java.util.Locale.Builder builder18 = builder14.clearExtensions();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale19.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale19.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayLanguage(locale27);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale24.getDisplayLanguage(locale29);
        java.util.Locale.Builder builder34 = builder18.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = fraction9.compareTo((java.lang.Object) builder34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale$Builder cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-117) + "'", int7 == (-117));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str21, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u97d3\u6587" + "'", str25, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str28, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "coreano" + "'", str30, "coreano");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "cinese" + "'", str33, "cinese");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("hi!", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits((-1));
        numberFormat0.setMaximumIntegerDigits((int) (short) 100);
        numberFormat0.setMinimumFractionDigits((int) (short) 0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (short) 0);
        java.lang.String str11 = fieldPosition10.toString();
        fieldPosition10.setEndIndex((int) 'a');
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        numberFormat19.setMaximumIntegerDigits((-1));
        java.util.Currency currency22 = numberFormat19.getCurrency();
        numberFormat18.setCurrency(currency22);
        numberFormat15.setCurrency(currency22);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance();
        numberFormat25.setMaximumIntegerDigits((-1));
        java.util.Currency currency28 = numberFormat25.getCurrency();
        java.lang.String str30 = numberFormat25.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat15, numberFormat25);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance();
        java.lang.String str34 = numberFormat32.format(100L);
        properFractionFormat31.setWholeFormat(numberFormat32);
        java.text.NumberFormat numberFormat36 = properFractionFormat31.getWholeFormat();
        boolean boolean37 = fieldPosition10.equals((java.lang.Object) properFractionFormat31);
        java.text.NumberFormat numberFormat38 = properFractionFormat31.getWholeFormat();
        java.util.Currency currency39 = numberFormat38.getCurrency();
        numberFormat0.setCurrency(currency39);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance();
        java.util.Currency currency42 = numberFormat41.getCurrency();
        java.math.RoundingMode roundingMode43 = numberFormat41.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat0.formatToCharacterIterator((java.lang.Object) roundingMode43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]" + "'", str11, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0%" + "'", str30, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode43 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode43.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        java.text.ParseException parseException2 = new java.text.ParseException("francese", (int) 'a');
        java.text.ParseException parseException5 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray6 = parseException5.getSuppressed();
        java.text.ParseException parseException9 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray10 = parseException9.getSuppressed();
        parseException5.addSuppressed((java.lang.Throwable) parseException9);
        int int12 = parseException9.getErrorOffset();
        int int13 = parseException9.getErrorOffset();
        parseException2.addSuppressed((java.lang.Throwable) parseException9);
        int int15 = parseException2.getErrorOffset();
        int int16 = parseException2.getErrorOffset();
        java.lang.Throwable[] throwableArray17 = parseException2.getSuppressed();
        int int18 = parseException2.getErrorOffset();
        int int19 = parseException2.getErrorOffset();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.lang.String str1 = field0.toString();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale2);
        boolean boolean5 = field0.equals((java.lang.Object) numberFormat4);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.SIGN;
        java.lang.Object obj7 = new java.lang.Object();
        boolean boolean8 = field6.equals(obj7);
        boolean boolean9 = field0.equals((java.lang.Object) field6);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 100);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field0, (-35));
        java.lang.String str16 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str1, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str16, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat3 = fractionFormat2.getNumeratorFormat();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 10);
        parsePosition6.setErrorIndex((int) (byte) 1);
        parsePosition6.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat2.parse("French", parsePosition6);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance();
        numberFormat13.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance();
        numberFormat17.setMaximumIntegerDigits((-1));
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat16.setCurrency(currency20);
        numberFormat13.setCurrency(currency20);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        numberFormat23.setMaximumIntegerDigits((-1));
        java.util.Currency currency26 = numberFormat23.getCurrency();
        java.lang.String str28 = numberFormat23.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12, numberFormat13, numberFormat23);
        fractionFormat2.setDenominatorFormat(numberFormat23);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj36 = numberFormat32.parseObject("hi!", parsePosition35);
        parsePosition35.setErrorIndex(10);
        org.apache.commons.math.fraction.Fraction fraction39 = fractionFormat2.parse("anglais", parsePosition35);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 10);
        parsePosition42.setErrorIndex((int) (byte) 1);
        parsePosition42.setErrorIndex(0);
        int int47 = parsePosition42.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction48 = fractionFormat2.parse("China", parsePosition42);
        java.util.Locale locale52 = new java.util.Locale("United Kingdom", "French", "zh_CN");
        java.lang.String str53 = locale52.getDisplayLanguage();
        boolean boolean54 = parsePosition42.equals((java.lang.Object) str53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "francese" + "'", str1, "francese");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0%" + "'", str28, "0%");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertEquals(locale52.toString(), "united kingdom_FRENCH_zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "united kingdom" + "'", str53, "united kingdom");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 10);
        parsePosition66.setErrorIndex((int) (byte) 1);
        java.lang.Object obj69 = fractionFormat63.parseObject("United Kingdom", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction70 = properFractionFormat17.parse("32", parsePosition66);
        java.text.NumberFormat numberFormat71 = properFractionFormat17.getDenominatorFormat();
        java.lang.Object obj72 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat73 = properFractionFormat17.getDenominatorFormat();
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.NumberFormat.Field field76 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition78 = new java.text.FieldPosition((java.text.Format.Field) field76, (int) (short) 0);
        int int79 = fieldPosition78.getEndIndex();
        java.text.ParseException parseException82 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray83 = parseException82.getSuppressed();
        int int84 = parseException82.getErrorOffset();
        boolean boolean85 = fieldPosition78.equals((java.lang.Object) parseException82);
        fieldPosition78.setEndIndex(116);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer88 = numberFormat73.format((long) 1, stringBuffer75, fieldPosition78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "francese" + "'", str33, "francese");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(fraction70);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.addUnicodeLocaleAttribute("java.text.ParsePosition[index=2147483647,errorIndex=9]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParsePosition[index=2147483647,errorIndex=9] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(52, (int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int13 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction7.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction4.subtract(fraction16);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int25 = fraction24.intValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction21);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction17.add(fraction21);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int39 = fraction38.intValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction35.subtract(fraction38);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction31.multiply(fraction35);
        int int43 = fraction28.compareTo((java.lang.Object) fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction3.divide(fraction28);
        double double45 = fraction3.doubleValue();
        int int46 = fraction3.intValue();
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-117 / 1" + "'", str8, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-117) + "'", int13 == (-117));
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-117) + "'", int25 == (-117));
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-117) + "'", int39 == (-117));
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        java.util.Locale locale1 = new java.util.Locale("French");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.Object obj4 = locale2.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "french");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "french");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "french");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "french");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "french");
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        java.util.Locale locale3 = new java.util.Locale("0 %", "", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale.setDefault(category5, locale7);
        java.lang.String str12 = locale7.getDisplayName();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.String str18 = locale7.getDisplayVariant(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance();
        numberFormat24.setMaximumIntegerDigits((-1));
        java.util.Currency currency27 = numberFormat24.getCurrency();
        numberFormat23.setCurrency(currency27);
        java.lang.String str30 = numberFormat23.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat32 = fractionFormat31.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22, numberFormat23, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 10);
        parsePosition36.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction39 = properFractionFormat33.parse("fran\347ais", parsePosition36);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits((-1));
        java.util.Currency currency43 = numberFormat40.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40);
        boolean boolean45 = parsePosition36.equals((java.lang.Object) fractionFormat44);
        java.lang.Object obj46 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", parsePosition36);
        fractionFormat4.setNumeratorFormat(numberFormat20);
        java.lang.StringBuffer stringBuffer49 = null;
        java.text.NumberFormat.Field field50 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field50, (int) (short) 0);
        int int53 = fieldPosition52.getEndIndex();
        fieldPosition52.setBeginIndex((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = numberFormat20.format((double) (byte) -3, stringBuffer49, fieldPosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "0 %");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str8, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United Kingdom" + "'", str17, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10.000%" + "'", str30, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(fraction39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(field50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayLanguage(locale34);
        java.lang.String str36 = locale34.getScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale38.getScript();
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale15, locale19, locale20, locale24, locale26, locale29, locale32, locale34, locale38 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayLanguage(locale49);
        java.lang.String str51 = locale49.getScript();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale49, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList55, filteringMode57);
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList43, filteringMode57);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayLanguage(locale64);
        java.lang.String str66 = locale64.getScript();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale64, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList73, filteringMode74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList77, strMap78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList77, strMap80);
        java.util.Collection<java.util.Locale> localeCollection82 = null;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList81, localeCollection82);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str5, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str22, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str30, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str39, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str50, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(languageRangeList81);
        org.junit.Assert.assertNotNull(localeList83);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        boolean boolean6 = locale0.hasExtensions();
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale0.getDisplayVariant(locale7);
        java.util.Locale locale10 = new java.util.Locale("100");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale0.getDisplayLanguage(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.util.Locale.setDefault(locale10);
        java.lang.String str15 = locale10.getCountry();
        java.lang.String str16 = locale10.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "100");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-117), (int) '4');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str6 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction5);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int11 = fraction10.intValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction5.add(fraction7);
        int int14 = fraction13.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction17 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance();
        boolean boolean20 = numberFormat19.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        boolean boolean22 = numberFormat19.isParseIntegerOnly();
        boolean boolean23 = fraction17.equals((java.lang.Object) boolean22);
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((double) 10);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = new org.apache.commons.math.fraction.Fraction((int) '4', (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.multiply(fraction29);
        int int31 = fraction17.compareTo((java.lang.Object) fraction25);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str39 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int44 = fraction43.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.subtract(fraction43);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction38.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction35.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction34.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction25.divide(fraction49);
        org.apache.commons.math.fraction.Fraction fraction52 = fraction2.subtract(fraction49);
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        float float54 = fraction52.floatValue();
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-117 / 1" + "'", str6, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-117) + "'", int11 == (-117));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-117 / 1" + "'", str39, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-117) + "'", int44 == (-117));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-13 / 4" + "'", str53, "-13 / 4");
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + (-3.25f) + "'", float54 == (-3.25f));
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayVariant();
        boolean boolean3 = locale0.hasExtensions();
        java.lang.Object obj4 = null;
        boolean boolean5 = locale0.equals(obj4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setVariant("1 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance();
        numberFormat5.setMaximumIntegerDigits((-1));
        java.util.Currency currency8 = numberFormat5.getCurrency();
        numberFormat4.setCurrency(currency8);
        numberFormat1.setCurrency(currency8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits((-1));
        java.util.Currency currency14 = numberFormat11.getCurrency();
        java.lang.String str16 = numberFormat11.format((double) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat1, numberFormat11);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance();
        java.lang.String str21 = numberFormat19.format(100L);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj27 = numberFormat23.parseObject("hi!", parsePosition26);
        java.lang.Number number28 = numberFormat19.parse("10,000%", parsePosition26);
        int int29 = parsePosition26.getErrorIndex();
        java.lang.Object obj30 = properFractionFormat17.parseObject("French", parsePosition26);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.text.NumberFormat numberFormat35 = fractionFormat34.getNumeratorFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 10);
        parsePosition38.setErrorIndex((int) (byte) 1);
        parsePosition38.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction43 = fractionFormat34.parse("French", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat17.parse("", parsePosition38);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayLanguage(locale46);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale46);
        java.lang.Object obj49 = numberFormat48.clone();
        properFractionFormat17.setWholeFormat(numberFormat48);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayLanguage(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale51.getDisplayCountry(locale52);
        java.lang.String str57 = locale52.toLanguageTag();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale52);
        boolean boolean59 = numberFormat58.isParseIntegerOnly();
        properFractionFormat17.setDenominatorFormat(numberFormat58);
        boolean boolean61 = numberFormat58.isParseIntegerOnly();
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale62);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale62);
        int int65 = numberFormat64.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat67 = fractionFormat66.getNumeratorFormat();
        int int68 = numberFormat67.getMinimumFractionDigits();
        numberFormat67.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat72 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat73 = fractionFormat72.getNumeratorFormat();
        int int74 = numberFormat73.getMinimumFractionDigits();
        java.lang.String str76 = numberFormat73.format((double) (byte) -1);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayLanguage(locale78);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getNumberInstance(locale78);
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getPercentInstance();
        numberFormat82.setMaximumIntegerDigits((-1));
        java.util.Currency currency85 = numberFormat82.getCurrency();
        numberFormat81.setCurrency(currency85);
        numberFormat80.setCurrency(currency85);
        boolean boolean88 = numberFormat80.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat89 = new org.apache.commons.math.fraction.FractionFormat(numberFormat73, numberFormat80);
        fractionFormat71.setNumeratorFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat91 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58, numberFormat64, numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat92 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction94 = properFractionFormat92.parse("100,00 \244");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"100,00 ?\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0%" + "'", str16, "0%");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "francese" + "'", str33, "francese");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str47, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str54, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(fractionFormat72);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1" + "'", str76, "-1");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str79, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(currency85);
        org.junit.Assert.assertEquals(currency85.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -1);
        parsePosition1.setErrorIndex((int) (short) -4);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale11.getVariant();
        java.util.Locale.setDefault(category9, locale11);
        java.lang.String str16 = locale11.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale17.getDisplayCountry(locale20);
        java.lang.String str22 = locale11.getDisplayVariant(locale17);
        java.lang.String str23 = locale5.getDisplayName(locale17);
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale5.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayScript();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale27.getDisplayCountry(locale30);
        java.lang.String str32 = locale24.getDisplayVariant(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale1.getDisplayLanguage(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance();
        numberFormat43.setMaximumIntegerDigits((-1));
        java.util.Currency currency46 = numberFormat43.getCurrency();
        numberFormat42.setCurrency(currency46);
        java.lang.String str49 = numberFormat42.format((double) 100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat51 = fractionFormat50.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41, numberFormat42, numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 10);
        parsePosition55.setErrorIndex((int) (byte) 1);
        org.apache.commons.math.fraction.Fraction fraction58 = properFractionFormat52.parse("fran\347ais", parsePosition55);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance();
        numberFormat59.setMaximumIntegerDigits((-1));
        java.util.Currency currency62 = numberFormat59.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = new org.apache.commons.math.fraction.FractionFormat(numberFormat59);
        boolean boolean64 = parsePosition55.equals((java.lang.Object) fractionFormat63);
        java.lang.Object obj65 = numberFormat39.parseObject("java.text.ParseException: java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition55);
        java.lang.String str67 = numberFormat39.format((long) (-13572));
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.Format.Field field69 = null;
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition(field69, (-1));
        int int72 = fieldPosition71.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer73 = numberFormat37.format((java.lang.Object) numberFormat39, stringBuffer68, fieldPosition71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str16, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United Kingdom" + "'", str21, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4" + "'", str26, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "United Kingdom" + "'", str31, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Korean" + "'", str35, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10.000%" + "'", str49, "10.000%");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj65);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-13.572" + "'", str67, "-13.572");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Currency currency4 = numberFormat1.getCurrency();
        numberFormat0.setCurrency(currency4);
        java.lang.String str7 = numberFormat0.format((double) 100);
        java.math.RoundingMode roundingMode8 = numberFormat0.getRoundingMode();
        numberFormat0.setMinimumIntegerDigits(1);
        boolean boolean11 = numberFormat0.isGroupingUsed();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance();
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj20 = numberFormat16.parseObject("hi!", parsePosition19);
        java.lang.Object obj21 = numberFormat14.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", parsePosition19);
        java.lang.String str23 = numberFormat14.format((double) 'x');
        numberFormat14.setMinimumIntegerDigits(1);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (byte) -1);
        java.lang.String str29 = parsePosition28.toString();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale.Builder builder33 = builder30.setVariant("");
        java.util.Locale.Builder builder34 = builder30.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.setLanguageTag("anglais");
        java.util.Locale locale37 = builder36.build();
        java.util.Locale.Builder builder38 = builder36.clearExtensions();
        boolean boolean39 = parsePosition28.equals((java.lang.Object) builder38);
        java.lang.Object obj40 = numberFormat14.parseObject("10", parsePosition28);
        java.lang.Number number41 = numberFormat0.parse("ita", parsePosition28);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency4);
// flaky:         org.junit.Assert.assertEquals(currency4.toString(), "GBP");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertTrue("'" + roundingMode8 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode8.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "120" + "'", str23, "120");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str29, "java.text.ParsePosition[index=-1,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "anglais");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(number41);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int9 = fraction8.intValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.subtract(fraction8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction3.add(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction0.subtract(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str18 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int23 = fraction22.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction14.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int35 = fraction34.intValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction31.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction27.add(fraction31);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction12.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int48 = fraction47.intValue();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.subtract(fraction47);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.add(fraction44);
        int int51 = fraction50.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        java.lang.String str55 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int60 = fraction59.intValue();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction56.subtract(fraction59);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction54.add(fraction56);
        int int63 = fraction62.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction66 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction62.multiply(fraction66);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction50.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.ZERO;
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'u', (int) (byte) -1);
        int int73 = fraction72.intValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction69.subtract(fraction72);
        boolean boolean76 = fraction72.equals((java.lang.Object) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction72.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction50.add(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction39.divide(fraction50);
        org.apache.commons.math.fraction.Fraction fraction82 = new org.apache.commons.math.fraction.Fraction((-1), (int) '#');
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction39.multiply(fraction82);
        java.lang.String str85 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction84);
        long long86 = fraction84.longValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-117 / 1" + "'", str4, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-117) + "'", int9 == (-117));
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-117 / 1" + "'", str18, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-117) + "'", int23 == (-117));
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-117) + "'", int35 == (-117));
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-117 / 1" + "'", str43, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-117) + "'", int48 == (-117));
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-117 / 1" + "'", str55, "-117 / 1");
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-117) + "'", int60 == (-117));
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-117) + "'", int73 == (-117));
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "13,572 / 35" + "'", str85, "13,572 / 35");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 387L + "'", long86 == 387L);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale14 = new java.util.Locale("\u671d\u9c9c\u6587", "\u671d\u9c9c\u6587", "");
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        numberFormat16.setMaximumIntegerDigits(0);
        numberFormat16.setMaximumFractionDigits((int) (byte) 117);
        int int21 = numberFormat16.getMaximumFractionDigits();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u671d\u9c9c\u6587\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 117 + "'", int21 == 117);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale14.getDisplayScript(locale16);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.lang.String str22 = locale21.getDisplayName();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale21);
        java.lang.Object obj24 = numberFormat23.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str3, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (United Kingdom)" + "'", str22, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        java.util.Locale locale2 = new java.util.Locale("$35.00", "Deutschland");
        org.junit.Assert.assertEquals(locale2.toString(), "$35.00_DEUTSCHLAND");
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-1L));
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        short short4 = fraction2.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance();
        java.lang.String str4 = numberFormat2.format(100L);
        int int5 = numberFormat2.getMinimumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(1);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits((-1));
        java.math.RoundingMode roundingMode11 = numberFormat8.getRoundingMode();
        numberFormat2.setRoundingMode(roundingMode11);
        numberFormat1.setRoundingMode(roundingMode11);
        boolean boolean14 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat17 = fractionFormat16.getNumeratorFormat();
        int int18 = numberFormat17.getMinimumFractionDigits();
        java.util.Currency currency19 = numberFormat17.getCurrency();
        fractionFormat15.setDenominatorFormat(numberFormat17);
        java.lang.Object obj21 = fractionFormat15.clone();
        java.text.NumberFormat numberFormat22 = fractionFormat15.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100" + "'", str4, "100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(currency19);
// flaky:         org.junit.Assert.assertEquals(currency19.toString(), "GBP");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        int int3 = fieldPosition2.getEndIndex();
        java.text.ParseException parseException6 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray7 = parseException6.getSuppressed();
        int int8 = parseException6.getErrorOffset();
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) parseException6);
        java.text.ParseException parseException12 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        int int13 = parseException12.getErrorOffset();
        parseException6.addSuppressed((java.lang.Throwable) parseException12);
        int int15 = parseException6.getErrorOffset();
        java.text.ParseException parseException18 = new java.text.ParseException("java.text.ParseException: 100", (int) (byte) 10);
        java.text.ParseException parseException21 = new java.text.ParseException("\uce90\ub098\ub2e4", (int) (byte) 1);
        java.text.ParseException parseException24 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray25 = parseException24.getSuppressed();
        java.text.ParseException parseException28 = new java.text.ParseException("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(per mille),beginIndex=0,endIndex=0]", 0);
        java.lang.Throwable[] throwableArray29 = parseException28.getSuppressed();
        parseException24.addSuppressed((java.lang.Throwable) parseException28);
        parseException21.addSuppressed((java.lang.Throwable) parseException28);
        java.text.ParseException parseException34 = new java.text.ParseException("", (-13572));
        parseException21.addSuppressed((java.lang.Throwable) parseException34);
        java.text.ParseException parseException38 = new java.text.ParseException("fr", (int) (byte) -117);
        parseException21.addSuppressed((java.lang.Throwable) parseException38);
        parseException18.addSuppressed((java.lang.Throwable) parseException38);
        parseException6.addSuppressed((java.lang.Throwable) parseException38);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale6.getCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale6);
        java.util.Locale.Builder builder11 = builder3.setLocale(locale6);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.Builder builder14 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder15 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder11.setRegion("-0.009");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -0.009 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }
}
